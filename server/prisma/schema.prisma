generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String                 @id @default(uuid())
  email                       String                 @unique
  phone                       String                 @unique
  name                        String
  socialMedia                 String
  goals                       String[]
  heardAboutUs                String
  role                        Role
  verified                    Boolean                @default(false)
  BankAccounts                BankDetails[]
  businessInfo                BusinessInfo?
  createdCourses              Course[]
  CoursePurchasers            CoursePurchasers[]
  createdPayingUps            PayingUp[]
  boughtPayingUpTickets       PayingUpTicket[]
  premiumContent              PremiumContent[]
  premiumAccess               PremiumContentAccess[]
  createdTelegrams            Telegram[]
  boughtTelegramSubscriptions TelegramSubscription?
  upiIds                      UPI[]
  wallet                      Wallet?
  createdWebinars             Webinar[]
  boughtWebinarTickets        WebinarTicket[]
  kycRecords                  kycRecords?
}

model Otp {
  id            String   @id @default(uuid())
  phoneNumber   String   @unique
  phoneCodeHash String
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  updatedAt     DateTime @updatedAt
}

model Wallet {
  id               String        @id @default(uuid())
  userId           String        @unique
  balance          Float         @default(0.0)
  totalEarnings    Float         @default(0.0)
  totalWithdrawals Float         @default(0.0)
  isKycVerified    Boolean       @default(false)
  mpin             String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  transactions     Transaction[]
  user             User          @relation(fields: [userId], references: [id])
  withdrawals      Withdrawal[]
}

model BankDetails {
  id                    String       @id @default(uuid())
  accountHolderName     String
  accountNumber         String
  ifscCode              String
  bankDocument          String?
  upiId                 String[]
  razorpayContactID     String?
  razorpayFundAccountID String?
  userId                String
  primary               Boolean      @default(false)
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  upiIds                UPI[]
  withdrawls            Withdrawal[]
}

model UPI {
  id                    String       @id @default(uuid())
  upiId                 String       @unique
  razorpayFundAccountID String?
  razorpayContactID     String?
  bankDetailsId         String
  userId                String
  createdAt             DateTime     @default(now())
  updatedAt             DateTime     @updatedAt
  bankDetails           BankDetails  @relation(fields: [bankDetailsId], references: [id], onDelete: Cascade)
  user                  User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  withdrawls            Withdrawal[]
}

model kycRecords {
  id            String   @id @default(uuid())
  userId        String   @unique
  socialMedia   Json
  aadhaarNumber String
  aadhaarFront  String
  aadhaarBack   String
  panCard       String
  selfie        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        String   @default("Pending")
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model BusinessInfo {
  id                String   @id @default(uuid())
  firstName         String
  lastName          String
  businessStructure String
  gstNumber         String   @unique
  sebiNumber        String   @unique
  sebiCertificate   String?
  userId            String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id            String   @id @default(uuid())
  walletId      String
  amount        Float
  email         String
  phoneNumber   String
  product       String
  modeOfPayment String
  status        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  wallet        Wallet   @relation(fields: [walletId], references: [id])
}

model Withdrawal {
  id               String      @id @default(uuid())
  walletId         String
  amount           Float
  modeOfWithdrawal String
  bankDetailsId    String
  upiId            String
  status           String
  razorpayPayoutID String?
  createdAt        DateTime    @default(now())
  bankDetails      BankDetails @relation(fields: [bankDetailsId], references: [id])
  upi              UPI         @relation(fields: [upiId], references: [id])
  wallet           Wallet      @relation(fields: [walletId], references: [id])
}

model Webinar {
  id             String          @id @default(uuid())
  title          String
  category       String
  coverImage     String
  occurrence     String
  startDate      DateTime
  paymentEnabled Boolean         @default(true)
  endDate        DateTime
  isOnline       Boolean
  venue          String?
  link           Json
  discount       Json?
  isPaid         Boolean
  quantity       Int
  amount         Float?
  createdById    String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  createdBy      User            @relation(fields: [createdById], references: [id])
  tickets        WebinarTicket[]
}

model WebinarTicket {
  id         String  @id @default(uuid())
  webinarId  String
  boughtById String
  paymentId  String?
  orderId    String?
  boughtBy   User    @relation(fields: [boughtById], references: [id])
  webinar    Webinar @relation(fields: [webinarId], references: [id], onDelete: Cascade)
}

model Course {
  id              String             @id @default(cuid())
  title           String
  price           Float
  discount        Json?
  validity        String
  aboutThisCourse Json
  testimonials    Json
  courseBenefits  Json
  faqs            Json
  gallery         Json
  coverImage      Json
  language        Json
  startDate       DateTime
  endDate         DateTime?
  createdBy       String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  creator         User               @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  products        CourseProduct?
  purchasedBy     CoursePurchasers[]
  lessons         Lessons[]
}

model CourseProduct {
  id              String  @id @default(cuid())
  title           String
  isActive        Boolean @default(false)
  productMetaData Json
  courseId        String  @unique
  course          Course  @relation(fields: [courseId], references: [id])
}

model Lessons {
  id         String  @id @default(cuid())
  isActive   Boolean
  lessonData Json
  courseId   String
  course     Course  @relation(fields: [courseId], references: [id])
}

model CoursePurchasers {
  id          String   @id @default(uuid())
  courseId    String
  purchaserId String
  paymentId   String
  orderId     String
  createdAt   DateTime @default(now())
  course      Course   @relation(fields: [courseId], references: [id])
  purchaser   User     @relation(fields: [purchaserId], references: [id])
}

model PayingUp {
  id              String           @id @default(uuid())
  title           String
  description     String
  discount        Json?
  paymentDetails  Json
  category        Json
  testimonials    Json
  faqs            Json
  refundPolicies  Json
  tacs            Json
  coverImage      Json
  files           Json
  createdById     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  createdBy       User             @relation(fields: [createdById], references: [id])
  payingUpTickets PayingUpTicket[]
}

model PayingUpTicket {
  id         String   @id @default(uuid())
  payingUpId String
  boughtById String
  paymentId  String?
  orderId    String?
  boughtBy   User     @relation(fields: [boughtById], references: [id])
  payingUp   PayingUp @relation(fields: [payingUpId], references: [id], onDelete: Cascade)
}

model Telegram {
  id                    String                 @id @unique @default(uuid())
  coverImage            String
  channelLink           String
  title                 String
  description           String
  genre                 String
  discount              Json
  subscription          Json
  createdById           String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  createdBy             User                   @relation(fields: [createdById], references: [id])
  telegramSubscriptions TelegramSubscription[]
}

model TelegramSubscription {
  id         String   @id @unique @default(uuid())
  validDays  Int
  telegramId String
  chatId     String?
  boughtById String   @unique
  paymentId  String?
  orderId    String?
  createdAt  DateTime @default(now())
  boughtBy   User     @relation(fields: [boughtById], references: [id])
  telegram   Telegram @relation(fields: [telegramId], references: [id])
}

model PremiumContent {
  id          String                 @id @default(uuid())
  title       String
  category    String
  unlockPrice Float
  text        String?
  images      String[]
  files       String[]
  discount    Json?
  createdById String
  createdAt   DateTime               @default(now())
  createdBy   User                   @relation(fields: [createdById], references: [id])
  access      PremiumContentAccess[]
}

model PremiumContentAccess {
  userId         String
  contentId      String
  purchasedAt    DateTime       @default(now())
  expiryDate     DateTime?
  premiumContent PremiumContent @relation(fields: [contentId], references: [id])
  user           User           @relation(fields: [userId], references: [id])

  @@id([userId, contentId])
}

enum Role {
  User
  Creator
  Admin
}

enum SubscriptionType {
  MONTHLY
  YEARLY
}
