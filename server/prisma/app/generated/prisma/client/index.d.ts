
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Otp
 * 
 */
export type Otp = $Result.DefaultSelection<Prisma.$OtpPayload>
/**
 * Model Wallet
 * 
 */
export type Wallet = $Result.DefaultSelection<Prisma.$WalletPayload>
/**
 * Model BankDetails
 * 
 */
export type BankDetails = $Result.DefaultSelection<Prisma.$BankDetailsPayload>
/**
 * Model UPI
 * 
 */
export type UPI = $Result.DefaultSelection<Prisma.$UPIPayload>
/**
 * Model kycRecords
 * 
 */
export type kycRecords = $Result.DefaultSelection<Prisma.$kycRecordsPayload>
/**
 * Model BusinessInfo
 * 
 */
export type BusinessInfo = $Result.DefaultSelection<Prisma.$BusinessInfoPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model Withdrawal
 * 
 */
export type Withdrawal = $Result.DefaultSelection<Prisma.$WithdrawalPayload>
/**
 * Model Webinar
 * 
 */
export type Webinar = $Result.DefaultSelection<Prisma.$WebinarPayload>
/**
 * Model WebinarTicket
 * 
 */
export type WebinarTicket = $Result.DefaultSelection<Prisma.$WebinarTicketPayload>
/**
 * Model Course
 * 
 */
export type Course = $Result.DefaultSelection<Prisma.$CoursePayload>
/**
 * Model CourseProduct
 * 
 */
export type CourseProduct = $Result.DefaultSelection<Prisma.$CourseProductPayload>
/**
 * Model Lessons
 * 
 */
export type Lessons = $Result.DefaultSelection<Prisma.$LessonsPayload>
/**
 * Model CoursePurchasers
 * 
 */
export type CoursePurchasers = $Result.DefaultSelection<Prisma.$CoursePurchasersPayload>
/**
 * Model PayingUp
 * 
 */
export type PayingUp = $Result.DefaultSelection<Prisma.$PayingUpPayload>
/**
 * Model PayingUpTicket
 * 
 */
export type PayingUpTicket = $Result.DefaultSelection<Prisma.$PayingUpTicketPayload>
/**
 * Model Telegram
 * 
 */
export type Telegram = $Result.DefaultSelection<Prisma.$TelegramPayload>
/**
 * Model TelegramSubscription
 * 
 */
export type TelegramSubscription = $Result.DefaultSelection<Prisma.$TelegramSubscriptionPayload>
/**
 * Model PremiumContent
 * 
 */
export type PremiumContent = $Result.DefaultSelection<Prisma.$PremiumContentPayload>
/**
 * Model PremiumContentAccess
 * 
 */
export type PremiumContentAccess = $Result.DefaultSelection<Prisma.$PremiumContentAccessPayload>
/**
 * Model Newsletter
 * 
 */
export type Newsletter = $Result.DefaultSelection<Prisma.$NewsletterPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  User: 'User',
  Creator: 'Creator',
  Admin: 'Admin',
  SuperAdmin: 'SuperAdmin'
};

export type Role = (typeof Role)[keyof typeof Role]


export const SubscriptionType: {
  MONTHLY: 'MONTHLY',
  YEARLY: 'YEARLY'
};

export type SubscriptionType = (typeof SubscriptionType)[keyof typeof SubscriptionType]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type SubscriptionType = $Enums.SubscriptionType

export const SubscriptionType: typeof $Enums.SubscriptionType

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.otp`: Exposes CRUD operations for the **Otp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Otps
    * const otps = await prisma.otp.findMany()
    * ```
    */
  get otp(): Prisma.OtpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.bankDetails`: Exposes CRUD operations for the **BankDetails** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BankDetails
    * const bankDetails = await prisma.bankDetails.findMany()
    * ```
    */
  get bankDetails(): Prisma.BankDetailsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.uPI`: Exposes CRUD operations for the **UPI** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UPIS
    * const uPIS = await prisma.uPI.findMany()
    * ```
    */
  get uPI(): Prisma.UPIDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.kycRecords`: Exposes CRUD operations for the **kycRecords** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more KycRecords
    * const kycRecords = await prisma.kycRecords.findMany()
    * ```
    */
  get kycRecords(): Prisma.kycRecordsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.businessInfo`: Exposes CRUD operations for the **BusinessInfo** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessInfos
    * const businessInfos = await prisma.businessInfo.findMany()
    * ```
    */
  get businessInfo(): Prisma.BusinessInfoDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.withdrawal`: Exposes CRUD operations for the **Withdrawal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Withdrawals
    * const withdrawals = await prisma.withdrawal.findMany()
    * ```
    */
  get withdrawal(): Prisma.WithdrawalDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webinar`: Exposes CRUD operations for the **Webinar** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Webinars
    * const webinars = await prisma.webinar.findMany()
    * ```
    */
  get webinar(): Prisma.WebinarDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.webinarTicket`: Exposes CRUD operations for the **WebinarTicket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more WebinarTickets
    * const webinarTickets = await prisma.webinarTicket.findMany()
    * ```
    */
  get webinarTicket(): Prisma.WebinarTicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.course`: Exposes CRUD operations for the **Course** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Courses
    * const courses = await prisma.course.findMany()
    * ```
    */
  get course(): Prisma.CourseDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.courseProduct`: Exposes CRUD operations for the **CourseProduct** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CourseProducts
    * const courseProducts = await prisma.courseProduct.findMany()
    * ```
    */
  get courseProduct(): Prisma.CourseProductDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.lessons`: Exposes CRUD operations for the **Lessons** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Lessons
    * const lessons = await prisma.lessons.findMany()
    * ```
    */
  get lessons(): Prisma.LessonsDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.coursePurchasers`: Exposes CRUD operations for the **CoursePurchasers** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CoursePurchasers
    * const coursePurchasers = await prisma.coursePurchasers.findMany()
    * ```
    */
  get coursePurchasers(): Prisma.CoursePurchasersDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payingUp`: Exposes CRUD operations for the **PayingUp** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayingUps
    * const payingUps = await prisma.payingUp.findMany()
    * ```
    */
  get payingUp(): Prisma.PayingUpDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.payingUpTicket`: Exposes CRUD operations for the **PayingUpTicket** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PayingUpTickets
    * const payingUpTickets = await prisma.payingUpTicket.findMany()
    * ```
    */
  get payingUpTicket(): Prisma.PayingUpTicketDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.telegram`: Exposes CRUD operations for the **Telegram** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Telegrams
    * const telegrams = await prisma.telegram.findMany()
    * ```
    */
  get telegram(): Prisma.TelegramDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.telegramSubscription`: Exposes CRUD operations for the **TelegramSubscription** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TelegramSubscriptions
    * const telegramSubscriptions = await prisma.telegramSubscription.findMany()
    * ```
    */
  get telegramSubscription(): Prisma.TelegramSubscriptionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.premiumContent`: Exposes CRUD operations for the **PremiumContent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PremiumContents
    * const premiumContents = await prisma.premiumContent.findMany()
    * ```
    */
  get premiumContent(): Prisma.PremiumContentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.premiumContentAccess`: Exposes CRUD operations for the **PremiumContentAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PremiumContentAccesses
    * const premiumContentAccesses = await prisma.premiumContentAccess.findMany()
    * ```
    */
  get premiumContentAccess(): Prisma.PremiumContentAccessDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.newsletter`: Exposes CRUD operations for the **Newsletter** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Newsletters
    * const newsletters = await prisma.newsletter.findMany()
    * ```
    */
  get newsletter(): Prisma.NewsletterDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.7.0
   * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Otp: 'Otp',
    Wallet: 'Wallet',
    BankDetails: 'BankDetails',
    UPI: 'UPI',
    kycRecords: 'kycRecords',
    BusinessInfo: 'BusinessInfo',
    Transaction: 'Transaction',
    Withdrawal: 'Withdrawal',
    Webinar: 'Webinar',
    WebinarTicket: 'WebinarTicket',
    Course: 'Course',
    CourseProduct: 'CourseProduct',
    Lessons: 'Lessons',
    CoursePurchasers: 'CoursePurchasers',
    PayingUp: 'PayingUp',
    PayingUpTicket: 'PayingUpTicket',
    Telegram: 'Telegram',
    TelegramSubscription: 'TelegramSubscription',
    PremiumContent: 'PremiumContent',
    PremiumContentAccess: 'PremiumContentAccess',
    Newsletter: 'Newsletter'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "otp" | "wallet" | "bankDetails" | "uPI" | "kycRecords" | "businessInfo" | "transaction" | "withdrawal" | "webinar" | "webinarTicket" | "course" | "courseProduct" | "lessons" | "coursePurchasers" | "payingUp" | "payingUpTicket" | "telegram" | "telegramSubscription" | "premiumContent" | "premiumContentAccess" | "newsletter"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Otp: {
        payload: Prisma.$OtpPayload<ExtArgs>
        fields: Prisma.OtpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OtpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OtpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findFirst: {
            args: Prisma.OtpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OtpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          findMany: {
            args: Prisma.OtpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          create: {
            args: Prisma.OtpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          createMany: {
            args: Prisma.OtpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OtpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          delete: {
            args: Prisma.OtpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          update: {
            args: Prisma.OtpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          deleteMany: {
            args: Prisma.OtpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OtpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OtpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>[]
          }
          upsert: {
            args: Prisma.OtpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OtpPayload>
          }
          aggregate: {
            args: Prisma.OtpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOtp>
          }
          groupBy: {
            args: Prisma.OtpGroupByArgs<ExtArgs>
            result: $Utils.Optional<OtpGroupByOutputType>[]
          }
          count: {
            args: Prisma.OtpCountArgs<ExtArgs>
            result: $Utils.Optional<OtpCountAggregateOutputType> | number
          }
        }
      }
      Wallet: {
        payload: Prisma.$WalletPayload<ExtArgs>
        fields: Prisma.WalletFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WalletFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findFirst: {
            args: Prisma.WalletFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          findMany: {
            args: Prisma.WalletFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          create: {
            args: Prisma.WalletCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          createMany: {
            args: Prisma.WalletCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WalletCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          delete: {
            args: Prisma.WalletDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          update: {
            args: Prisma.WalletUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          deleteMany: {
            args: Prisma.WalletDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WalletUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WalletUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>[]
          }
          upsert: {
            args: Prisma.WalletUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WalletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.WalletGroupByArgs<ExtArgs>
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletCountArgs<ExtArgs>
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      BankDetails: {
        payload: Prisma.$BankDetailsPayload<ExtArgs>
        fields: Prisma.BankDetailsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BankDetailsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BankDetailsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>
          }
          findFirst: {
            args: Prisma.BankDetailsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BankDetailsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>
          }
          findMany: {
            args: Prisma.BankDetailsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>[]
          }
          create: {
            args: Prisma.BankDetailsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>
          }
          createMany: {
            args: Prisma.BankDetailsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BankDetailsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>[]
          }
          delete: {
            args: Prisma.BankDetailsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>
          }
          update: {
            args: Prisma.BankDetailsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>
          }
          deleteMany: {
            args: Prisma.BankDetailsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BankDetailsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BankDetailsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>[]
          }
          upsert: {
            args: Prisma.BankDetailsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BankDetailsPayload>
          }
          aggregate: {
            args: Prisma.BankDetailsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBankDetails>
          }
          groupBy: {
            args: Prisma.BankDetailsGroupByArgs<ExtArgs>
            result: $Utils.Optional<BankDetailsGroupByOutputType>[]
          }
          count: {
            args: Prisma.BankDetailsCountArgs<ExtArgs>
            result: $Utils.Optional<BankDetailsCountAggregateOutputType> | number
          }
        }
      }
      UPI: {
        payload: Prisma.$UPIPayload<ExtArgs>
        fields: Prisma.UPIFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UPIFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UPIFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>
          }
          findFirst: {
            args: Prisma.UPIFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UPIFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>
          }
          findMany: {
            args: Prisma.UPIFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>[]
          }
          create: {
            args: Prisma.UPICreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>
          }
          createMany: {
            args: Prisma.UPICreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UPICreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>[]
          }
          delete: {
            args: Prisma.UPIDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>
          }
          update: {
            args: Prisma.UPIUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>
          }
          deleteMany: {
            args: Prisma.UPIDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UPIUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UPIUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>[]
          }
          upsert: {
            args: Prisma.UPIUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UPIPayload>
          }
          aggregate: {
            args: Prisma.UPIAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUPI>
          }
          groupBy: {
            args: Prisma.UPIGroupByArgs<ExtArgs>
            result: $Utils.Optional<UPIGroupByOutputType>[]
          }
          count: {
            args: Prisma.UPICountArgs<ExtArgs>
            result: $Utils.Optional<UPICountAggregateOutputType> | number
          }
        }
      }
      kycRecords: {
        payload: Prisma.$kycRecordsPayload<ExtArgs>
        fields: Prisma.kycRecordsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.kycRecordsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.kycRecordsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>
          }
          findFirst: {
            args: Prisma.kycRecordsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.kycRecordsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>
          }
          findMany: {
            args: Prisma.kycRecordsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>[]
          }
          create: {
            args: Prisma.kycRecordsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>
          }
          createMany: {
            args: Prisma.kycRecordsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.kycRecordsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>[]
          }
          delete: {
            args: Prisma.kycRecordsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>
          }
          update: {
            args: Prisma.kycRecordsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>
          }
          deleteMany: {
            args: Prisma.kycRecordsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.kycRecordsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.kycRecordsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>[]
          }
          upsert: {
            args: Prisma.kycRecordsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$kycRecordsPayload>
          }
          aggregate: {
            args: Prisma.KycRecordsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateKycRecords>
          }
          groupBy: {
            args: Prisma.kycRecordsGroupByArgs<ExtArgs>
            result: $Utils.Optional<KycRecordsGroupByOutputType>[]
          }
          count: {
            args: Prisma.kycRecordsCountArgs<ExtArgs>
            result: $Utils.Optional<KycRecordsCountAggregateOutputType> | number
          }
        }
      }
      BusinessInfo: {
        payload: Prisma.$BusinessInfoPayload<ExtArgs>
        fields: Prisma.BusinessInfoFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessInfoFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessInfoFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>
          }
          findFirst: {
            args: Prisma.BusinessInfoFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessInfoFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>
          }
          findMany: {
            args: Prisma.BusinessInfoFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>[]
          }
          create: {
            args: Prisma.BusinessInfoCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>
          }
          createMany: {
            args: Prisma.BusinessInfoCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessInfoCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>[]
          }
          delete: {
            args: Prisma.BusinessInfoDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>
          }
          update: {
            args: Prisma.BusinessInfoUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>
          }
          deleteMany: {
            args: Prisma.BusinessInfoDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessInfoUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.BusinessInfoUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>[]
          }
          upsert: {
            args: Prisma.BusinessInfoUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$BusinessInfoPayload>
          }
          aggregate: {
            args: Prisma.BusinessInfoAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateBusinessInfo>
          }
          groupBy: {
            args: Prisma.BusinessInfoGroupByArgs<ExtArgs>
            result: $Utils.Optional<BusinessInfoGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessInfoCountArgs<ExtArgs>
            result: $Utils.Optional<BusinessInfoCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      Withdrawal: {
        payload: Prisma.$WithdrawalPayload<ExtArgs>
        fields: Prisma.WithdrawalFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WithdrawalFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WithdrawalFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>
          }
          findFirst: {
            args: Prisma.WithdrawalFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WithdrawalFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>
          }
          findMany: {
            args: Prisma.WithdrawalFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>[]
          }
          create: {
            args: Prisma.WithdrawalCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>
          }
          createMany: {
            args: Prisma.WithdrawalCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WithdrawalCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>[]
          }
          delete: {
            args: Prisma.WithdrawalDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>
          }
          update: {
            args: Prisma.WithdrawalUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>
          }
          deleteMany: {
            args: Prisma.WithdrawalDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WithdrawalUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WithdrawalUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>[]
          }
          upsert: {
            args: Prisma.WithdrawalUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WithdrawalPayload>
          }
          aggregate: {
            args: Prisma.WithdrawalAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWithdrawal>
          }
          groupBy: {
            args: Prisma.WithdrawalGroupByArgs<ExtArgs>
            result: $Utils.Optional<WithdrawalGroupByOutputType>[]
          }
          count: {
            args: Prisma.WithdrawalCountArgs<ExtArgs>
            result: $Utils.Optional<WithdrawalCountAggregateOutputType> | number
          }
        }
      }
      Webinar: {
        payload: Prisma.$WebinarPayload<ExtArgs>
        fields: Prisma.WebinarFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebinarFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebinarFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>
          }
          findFirst: {
            args: Prisma.WebinarFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebinarFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>
          }
          findMany: {
            args: Prisma.WebinarFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>[]
          }
          create: {
            args: Prisma.WebinarCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>
          }
          createMany: {
            args: Prisma.WebinarCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebinarCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>[]
          }
          delete: {
            args: Prisma.WebinarDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>
          }
          update: {
            args: Prisma.WebinarUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>
          }
          deleteMany: {
            args: Prisma.WebinarDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebinarUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebinarUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>[]
          }
          upsert: {
            args: Prisma.WebinarUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarPayload>
          }
          aggregate: {
            args: Prisma.WebinarAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebinar>
          }
          groupBy: {
            args: Prisma.WebinarGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebinarGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebinarCountArgs<ExtArgs>
            result: $Utils.Optional<WebinarCountAggregateOutputType> | number
          }
        }
      }
      WebinarTicket: {
        payload: Prisma.$WebinarTicketPayload<ExtArgs>
        fields: Prisma.WebinarTicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.WebinarTicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WebinarTicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>
          }
          findFirst: {
            args: Prisma.WebinarTicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WebinarTicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>
          }
          findMany: {
            args: Prisma.WebinarTicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>[]
          }
          create: {
            args: Prisma.WebinarTicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>
          }
          createMany: {
            args: Prisma.WebinarTicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.WebinarTicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>[]
          }
          delete: {
            args: Prisma.WebinarTicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>
          }
          update: {
            args: Prisma.WebinarTicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>
          }
          deleteMany: {
            args: Prisma.WebinarTicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.WebinarTicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.WebinarTicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>[]
          }
          upsert: {
            args: Prisma.WebinarTicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$WebinarTicketPayload>
          }
          aggregate: {
            args: Prisma.WebinarTicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateWebinarTicket>
          }
          groupBy: {
            args: Prisma.WebinarTicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<WebinarTicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.WebinarTicketCountArgs<ExtArgs>
            result: $Utils.Optional<WebinarTicketCountAggregateOutputType> | number
          }
        }
      }
      Course: {
        payload: Prisma.$CoursePayload<ExtArgs>
        fields: Prisma.CourseFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findFirst: {
            args: Prisma.CourseFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          findMany: {
            args: Prisma.CourseFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          create: {
            args: Prisma.CourseCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          createMany: {
            args: Prisma.CourseCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          delete: {
            args: Prisma.CourseDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          update: {
            args: Prisma.CourseUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          deleteMany: {
            args: Prisma.CourseDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>[]
          }
          upsert: {
            args: Prisma.CourseUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePayload>
          }
          aggregate: {
            args: Prisma.CourseAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourse>
          }
          groupBy: {
            args: Prisma.CourseGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseCountArgs<ExtArgs>
            result: $Utils.Optional<CourseCountAggregateOutputType> | number
          }
        }
      }
      CourseProduct: {
        payload: Prisma.$CourseProductPayload<ExtArgs>
        fields: Prisma.CourseProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CourseProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CourseProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>
          }
          findFirst: {
            args: Prisma.CourseProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CourseProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>
          }
          findMany: {
            args: Prisma.CourseProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>[]
          }
          create: {
            args: Prisma.CourseProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>
          }
          createMany: {
            args: Prisma.CourseProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CourseProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>[]
          }
          delete: {
            args: Prisma.CourseProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>
          }
          update: {
            args: Prisma.CourseProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>
          }
          deleteMany: {
            args: Prisma.CourseProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CourseProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CourseProductUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>[]
          }
          upsert: {
            args: Prisma.CourseProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CourseProductPayload>
          }
          aggregate: {
            args: Prisma.CourseProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCourseProduct>
          }
          groupBy: {
            args: Prisma.CourseProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<CourseProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.CourseProductCountArgs<ExtArgs>
            result: $Utils.Optional<CourseProductCountAggregateOutputType> | number
          }
        }
      }
      Lessons: {
        payload: Prisma.$LessonsPayload<ExtArgs>
        fields: Prisma.LessonsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LessonsFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LessonsFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          findFirst: {
            args: Prisma.LessonsFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LessonsFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          findMany: {
            args: Prisma.LessonsFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>[]
          }
          create: {
            args: Prisma.LessonsCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          createMany: {
            args: Prisma.LessonsCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LessonsCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>[]
          }
          delete: {
            args: Prisma.LessonsDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          update: {
            args: Prisma.LessonsUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          deleteMany: {
            args: Prisma.LessonsDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LessonsUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LessonsUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>[]
          }
          upsert: {
            args: Prisma.LessonsUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LessonsPayload>
          }
          aggregate: {
            args: Prisma.LessonsAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLessons>
          }
          groupBy: {
            args: Prisma.LessonsGroupByArgs<ExtArgs>
            result: $Utils.Optional<LessonsGroupByOutputType>[]
          }
          count: {
            args: Prisma.LessonsCountArgs<ExtArgs>
            result: $Utils.Optional<LessonsCountAggregateOutputType> | number
          }
        }
      }
      CoursePurchasers: {
        payload: Prisma.$CoursePurchasersPayload<ExtArgs>
        fields: Prisma.CoursePurchasersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoursePurchasersFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoursePurchasersFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>
          }
          findFirst: {
            args: Prisma.CoursePurchasersFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoursePurchasersFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>
          }
          findMany: {
            args: Prisma.CoursePurchasersFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>[]
          }
          create: {
            args: Prisma.CoursePurchasersCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>
          }
          createMany: {
            args: Prisma.CoursePurchasersCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CoursePurchasersCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>[]
          }
          delete: {
            args: Prisma.CoursePurchasersDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>
          }
          update: {
            args: Prisma.CoursePurchasersUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>
          }
          deleteMany: {
            args: Prisma.CoursePurchasersDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CoursePurchasersUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CoursePurchasersUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>[]
          }
          upsert: {
            args: Prisma.CoursePurchasersUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CoursePurchasersPayload>
          }
          aggregate: {
            args: Prisma.CoursePurchasersAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCoursePurchasers>
          }
          groupBy: {
            args: Prisma.CoursePurchasersGroupByArgs<ExtArgs>
            result: $Utils.Optional<CoursePurchasersGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoursePurchasersCountArgs<ExtArgs>
            result: $Utils.Optional<CoursePurchasersCountAggregateOutputType> | number
          }
        }
      }
      PayingUp: {
        payload: Prisma.$PayingUpPayload<ExtArgs>
        fields: Prisma.PayingUpFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayingUpFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayingUpFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>
          }
          findFirst: {
            args: Prisma.PayingUpFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayingUpFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>
          }
          findMany: {
            args: Prisma.PayingUpFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>[]
          }
          create: {
            args: Prisma.PayingUpCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>
          }
          createMany: {
            args: Prisma.PayingUpCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayingUpCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>[]
          }
          delete: {
            args: Prisma.PayingUpDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>
          }
          update: {
            args: Prisma.PayingUpUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>
          }
          deleteMany: {
            args: Prisma.PayingUpDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayingUpUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayingUpUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>[]
          }
          upsert: {
            args: Prisma.PayingUpUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpPayload>
          }
          aggregate: {
            args: Prisma.PayingUpAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayingUp>
          }
          groupBy: {
            args: Prisma.PayingUpGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayingUpGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayingUpCountArgs<ExtArgs>
            result: $Utils.Optional<PayingUpCountAggregateOutputType> | number
          }
        }
      }
      PayingUpTicket: {
        payload: Prisma.$PayingUpTicketPayload<ExtArgs>
        fields: Prisma.PayingUpTicketFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PayingUpTicketFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PayingUpTicketFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>
          }
          findFirst: {
            args: Prisma.PayingUpTicketFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PayingUpTicketFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>
          }
          findMany: {
            args: Prisma.PayingUpTicketFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>[]
          }
          create: {
            args: Prisma.PayingUpTicketCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>
          }
          createMany: {
            args: Prisma.PayingUpTicketCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PayingUpTicketCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>[]
          }
          delete: {
            args: Prisma.PayingUpTicketDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>
          }
          update: {
            args: Prisma.PayingUpTicketUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>
          }
          deleteMany: {
            args: Prisma.PayingUpTicketDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PayingUpTicketUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PayingUpTicketUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>[]
          }
          upsert: {
            args: Prisma.PayingUpTicketUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PayingUpTicketPayload>
          }
          aggregate: {
            args: Prisma.PayingUpTicketAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePayingUpTicket>
          }
          groupBy: {
            args: Prisma.PayingUpTicketGroupByArgs<ExtArgs>
            result: $Utils.Optional<PayingUpTicketGroupByOutputType>[]
          }
          count: {
            args: Prisma.PayingUpTicketCountArgs<ExtArgs>
            result: $Utils.Optional<PayingUpTicketCountAggregateOutputType> | number
          }
        }
      }
      Telegram: {
        payload: Prisma.$TelegramPayload<ExtArgs>
        fields: Prisma.TelegramFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TelegramFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TelegramFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>
          }
          findFirst: {
            args: Prisma.TelegramFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TelegramFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>
          }
          findMany: {
            args: Prisma.TelegramFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>[]
          }
          create: {
            args: Prisma.TelegramCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>
          }
          createMany: {
            args: Prisma.TelegramCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TelegramCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>[]
          }
          delete: {
            args: Prisma.TelegramDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>
          }
          update: {
            args: Prisma.TelegramUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>
          }
          deleteMany: {
            args: Prisma.TelegramDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TelegramUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TelegramUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>[]
          }
          upsert: {
            args: Prisma.TelegramUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramPayload>
          }
          aggregate: {
            args: Prisma.TelegramAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTelegram>
          }
          groupBy: {
            args: Prisma.TelegramGroupByArgs<ExtArgs>
            result: $Utils.Optional<TelegramGroupByOutputType>[]
          }
          count: {
            args: Prisma.TelegramCountArgs<ExtArgs>
            result: $Utils.Optional<TelegramCountAggregateOutputType> | number
          }
        }
      }
      TelegramSubscription: {
        payload: Prisma.$TelegramSubscriptionPayload<ExtArgs>
        fields: Prisma.TelegramSubscriptionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TelegramSubscriptionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TelegramSubscriptionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>
          }
          findFirst: {
            args: Prisma.TelegramSubscriptionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TelegramSubscriptionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>
          }
          findMany: {
            args: Prisma.TelegramSubscriptionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>[]
          }
          create: {
            args: Prisma.TelegramSubscriptionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>
          }
          createMany: {
            args: Prisma.TelegramSubscriptionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TelegramSubscriptionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>[]
          }
          delete: {
            args: Prisma.TelegramSubscriptionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>
          }
          update: {
            args: Prisma.TelegramSubscriptionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>
          }
          deleteMany: {
            args: Prisma.TelegramSubscriptionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TelegramSubscriptionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TelegramSubscriptionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>[]
          }
          upsert: {
            args: Prisma.TelegramSubscriptionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TelegramSubscriptionPayload>
          }
          aggregate: {
            args: Prisma.TelegramSubscriptionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTelegramSubscription>
          }
          groupBy: {
            args: Prisma.TelegramSubscriptionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TelegramSubscriptionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TelegramSubscriptionCountArgs<ExtArgs>
            result: $Utils.Optional<TelegramSubscriptionCountAggregateOutputType> | number
          }
        }
      }
      PremiumContent: {
        payload: Prisma.$PremiumContentPayload<ExtArgs>
        fields: Prisma.PremiumContentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PremiumContentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PremiumContentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>
          }
          findFirst: {
            args: Prisma.PremiumContentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PremiumContentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>
          }
          findMany: {
            args: Prisma.PremiumContentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>[]
          }
          create: {
            args: Prisma.PremiumContentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>
          }
          createMany: {
            args: Prisma.PremiumContentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PremiumContentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>[]
          }
          delete: {
            args: Prisma.PremiumContentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>
          }
          update: {
            args: Prisma.PremiumContentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>
          }
          deleteMany: {
            args: Prisma.PremiumContentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PremiumContentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PremiumContentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>[]
          }
          upsert: {
            args: Prisma.PremiumContentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentPayload>
          }
          aggregate: {
            args: Prisma.PremiumContentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePremiumContent>
          }
          groupBy: {
            args: Prisma.PremiumContentGroupByArgs<ExtArgs>
            result: $Utils.Optional<PremiumContentGroupByOutputType>[]
          }
          count: {
            args: Prisma.PremiumContentCountArgs<ExtArgs>
            result: $Utils.Optional<PremiumContentCountAggregateOutputType> | number
          }
        }
      }
      PremiumContentAccess: {
        payload: Prisma.$PremiumContentAccessPayload<ExtArgs>
        fields: Prisma.PremiumContentAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PremiumContentAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PremiumContentAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>
          }
          findFirst: {
            args: Prisma.PremiumContentAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PremiumContentAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>
          }
          findMany: {
            args: Prisma.PremiumContentAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>[]
          }
          create: {
            args: Prisma.PremiumContentAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>
          }
          createMany: {
            args: Prisma.PremiumContentAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PremiumContentAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>[]
          }
          delete: {
            args: Prisma.PremiumContentAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>
          }
          update: {
            args: Prisma.PremiumContentAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>
          }
          deleteMany: {
            args: Prisma.PremiumContentAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PremiumContentAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PremiumContentAccessUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>[]
          }
          upsert: {
            args: Prisma.PremiumContentAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PremiumContentAccessPayload>
          }
          aggregate: {
            args: Prisma.PremiumContentAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePremiumContentAccess>
          }
          groupBy: {
            args: Prisma.PremiumContentAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<PremiumContentAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.PremiumContentAccessCountArgs<ExtArgs>
            result: $Utils.Optional<PremiumContentAccessCountAggregateOutputType> | number
          }
        }
      }
      Newsletter: {
        payload: Prisma.$NewsletterPayload<ExtArgs>
        fields: Prisma.NewsletterFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NewsletterFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NewsletterFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          findFirst: {
            args: Prisma.NewsletterFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NewsletterFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          findMany: {
            args: Prisma.NewsletterFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>[]
          }
          create: {
            args: Prisma.NewsletterCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          createMany: {
            args: Prisma.NewsletterCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NewsletterCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>[]
          }
          delete: {
            args: Prisma.NewsletterDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          update: {
            args: Prisma.NewsletterUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          deleteMany: {
            args: Prisma.NewsletterDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NewsletterUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NewsletterUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>[]
          }
          upsert: {
            args: Prisma.NewsletterUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NewsletterPayload>
          }
          aggregate: {
            args: Prisma.NewsletterAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNewsletter>
          }
          groupBy: {
            args: Prisma.NewsletterGroupByArgs<ExtArgs>
            result: $Utils.Optional<NewsletterGroupByOutputType>[]
          }
          count: {
            args: Prisma.NewsletterCountArgs<ExtArgs>
            result: $Utils.Optional<NewsletterCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    otp?: OtpOmit
    wallet?: WalletOmit
    bankDetails?: BankDetailsOmit
    uPI?: UPIOmit
    kycRecords?: kycRecordsOmit
    businessInfo?: BusinessInfoOmit
    transaction?: TransactionOmit
    withdrawal?: WithdrawalOmit
    webinar?: WebinarOmit
    webinarTicket?: WebinarTicketOmit
    course?: CourseOmit
    courseProduct?: CourseProductOmit
    lessons?: LessonsOmit
    coursePurchasers?: CoursePurchasersOmit
    payingUp?: PayingUpOmit
    payingUpTicket?: PayingUpTicketOmit
    telegram?: TelegramOmit
    telegramSubscription?: TelegramSubscriptionOmit
    premiumContent?: PremiumContentOmit
    premiumContentAccess?: PremiumContentAccessOmit
    newsletter?: NewsletterOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    boughtWebinarTickets: number
    boughtPayingUpTickets: number
    boughtTelegramSubscriptions: number
    createdWebinars: number
    createdCourses: number
    createdPayingUps: number
    createdTelegrams: number
    CoursePurchasers: number
    BankAccounts: number
    upiIds: number
    premiumContent: number
    premiumAccess: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boughtWebinarTickets?: boolean | UserCountOutputTypeCountBoughtWebinarTicketsArgs
    boughtPayingUpTickets?: boolean | UserCountOutputTypeCountBoughtPayingUpTicketsArgs
    boughtTelegramSubscriptions?: boolean | UserCountOutputTypeCountBoughtTelegramSubscriptionsArgs
    createdWebinars?: boolean | UserCountOutputTypeCountCreatedWebinarsArgs
    createdCourses?: boolean | UserCountOutputTypeCountCreatedCoursesArgs
    createdPayingUps?: boolean | UserCountOutputTypeCountCreatedPayingUpsArgs
    createdTelegrams?: boolean | UserCountOutputTypeCountCreatedTelegramsArgs
    CoursePurchasers?: boolean | UserCountOutputTypeCountCoursePurchasersArgs
    BankAccounts?: boolean | UserCountOutputTypeCountBankAccountsArgs
    upiIds?: boolean | UserCountOutputTypeCountUpiIdsArgs
    premiumContent?: boolean | UserCountOutputTypeCountPremiumContentArgs
    premiumAccess?: boolean | UserCountOutputTypeCountPremiumAccessArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoughtWebinarTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebinarTicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoughtPayingUpTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayingUpTicketWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBoughtTelegramSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelegramSubscriptionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedWebinarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebinarWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedPayingUpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayingUpWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatedTelegramsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelegramWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCoursePurchasersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursePurchasersWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBankAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankDetailsWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpiIdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UPIWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPremiumContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumContentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPremiumAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumContentAccessWhereInput
  }


  /**
   * Count Type WalletCountOutputType
   */

  export type WalletCountOutputType = {
    transactions: number
    withdrawals: number
  }

  export type WalletCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | WalletCountOutputTypeCountTransactionsArgs
    withdrawals?: boolean | WalletCountOutputTypeCountWithdrawalsArgs
  }

  // Custom InputTypes
  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletCountOutputType
     */
    select?: WalletCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountWithdrawalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WithdrawalWhereInput
  }


  /**
   * Count Type BankDetailsCountOutputType
   */

  export type BankDetailsCountOutputType = {
    upiIds: number
    withdrawls: number
  }

  export type BankDetailsCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    upiIds?: boolean | BankDetailsCountOutputTypeCountUpiIdsArgs
    withdrawls?: boolean | BankDetailsCountOutputTypeCountWithdrawlsArgs
  }

  // Custom InputTypes
  /**
   * BankDetailsCountOutputType without action
   */
  export type BankDetailsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetailsCountOutputType
     */
    select?: BankDetailsCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BankDetailsCountOutputType without action
   */
  export type BankDetailsCountOutputTypeCountUpiIdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UPIWhereInput
  }

  /**
   * BankDetailsCountOutputType without action
   */
  export type BankDetailsCountOutputTypeCountWithdrawlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WithdrawalWhereInput
  }


  /**
   * Count Type UPICountOutputType
   */

  export type UPICountOutputType = {
    withdrawls: number
  }

  export type UPICountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    withdrawls?: boolean | UPICountOutputTypeCountWithdrawlsArgs
  }

  // Custom InputTypes
  /**
   * UPICountOutputType without action
   */
  export type UPICountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPICountOutputType
     */
    select?: UPICountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UPICountOutputType without action
   */
  export type UPICountOutputTypeCountWithdrawlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WithdrawalWhereInput
  }


  /**
   * Count Type WebinarCountOutputType
   */

  export type WebinarCountOutputType = {
    tickets: number
  }

  export type WebinarCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | WebinarCountOutputTypeCountTicketsArgs
  }

  // Custom InputTypes
  /**
   * WebinarCountOutputType without action
   */
  export type WebinarCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarCountOutputType
     */
    select?: WebinarCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * WebinarCountOutputType without action
   */
  export type WebinarCountOutputTypeCountTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebinarTicketWhereInput
  }


  /**
   * Count Type CourseCountOutputType
   */

  export type CourseCountOutputType = {
    products: number
    lessons: number
    purchasedBy: number
  }

  export type CourseCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | CourseCountOutputTypeCountProductsArgs
    lessons?: boolean | CourseCountOutputTypeCountLessonsArgs
    purchasedBy?: boolean | CourseCountOutputTypeCountPurchasedByArgs
  }

  // Custom InputTypes
  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseCountOutputType
     */
    select?: CourseCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseProductWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountLessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonsWhereInput
  }

  /**
   * CourseCountOutputType without action
   */
  export type CourseCountOutputTypeCountPurchasedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursePurchasersWhereInput
  }


  /**
   * Count Type PayingUpCountOutputType
   */

  export type PayingUpCountOutputType = {
    payingUpTickets: number
  }

  export type PayingUpCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payingUpTickets?: boolean | PayingUpCountOutputTypeCountPayingUpTicketsArgs
  }

  // Custom InputTypes
  /**
   * PayingUpCountOutputType without action
   */
  export type PayingUpCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpCountOutputType
     */
    select?: PayingUpCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PayingUpCountOutputType without action
   */
  export type PayingUpCountOutputTypeCountPayingUpTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayingUpTicketWhereInput
  }


  /**
   * Count Type TelegramCountOutputType
   */

  export type TelegramCountOutputType = {
    telegramSubscriptions: number
  }

  export type TelegramCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telegramSubscriptions?: boolean | TelegramCountOutputTypeCountTelegramSubscriptionsArgs
  }

  // Custom InputTypes
  /**
   * TelegramCountOutputType without action
   */
  export type TelegramCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramCountOutputType
     */
    select?: TelegramCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TelegramCountOutputType without action
   */
  export type TelegramCountOutputTypeCountTelegramSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelegramSubscriptionWhereInput
  }


  /**
   * Count Type PremiumContentCountOutputType
   */

  export type PremiumContentCountOutputType = {
    access: number
  }

  export type PremiumContentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    access?: boolean | PremiumContentCountOutputTypeCountAccessArgs
  }

  // Custom InputTypes
  /**
   * PremiumContentCountOutputType without action
   */
  export type PremiumContentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentCountOutputType
     */
    select?: PremiumContentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PremiumContentCountOutputType without action
   */
  export type PremiumContentCountOutputTypeCountAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumContentAccessWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    creatorComission: number | null
  }

  export type UserSumAggregateOutputType = {
    creatorComission: number | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    name: string | null
    socialMedia: string | null
    heardAboutUs: string | null
    role: $Enums.Role | null
    verified: boolean | null
    creatorComission: number | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phone: string | null
    name: string | null
    socialMedia: string | null
    heardAboutUs: string | null
    role: $Enums.Role | null
    verified: boolean | null
    creatorComission: number | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    phone: number
    name: number
    socialMedia: number
    goals: number
    heardAboutUs: number
    role: number
    verified: number
    creatorComission: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    creatorComission?: true
  }

  export type UserSumAggregateInputType = {
    creatorComission?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    name?: true
    socialMedia?: true
    heardAboutUs?: true
    role?: true
    verified?: true
    creatorComission?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    name?: true
    socialMedia?: true
    heardAboutUs?: true
    role?: true
    verified?: true
    creatorComission?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    phone?: true
    name?: true
    socialMedia?: true
    goals?: true
    heardAboutUs?: true
    role?: true
    verified?: true
    creatorComission?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals: string[]
    heardAboutUs: string
    role: $Enums.Role
    verified: boolean
    creatorComission: number | null
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    name?: boolean
    socialMedia?: boolean
    goals?: boolean
    heardAboutUs?: boolean
    role?: boolean
    verified?: boolean
    creatorComission?: boolean
    boughtWebinarTickets?: boolean | User$boughtWebinarTicketsArgs<ExtArgs>
    boughtPayingUpTickets?: boolean | User$boughtPayingUpTicketsArgs<ExtArgs>
    boughtTelegramSubscriptions?: boolean | User$boughtTelegramSubscriptionsArgs<ExtArgs>
    createdWebinars?: boolean | User$createdWebinarsArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    createdPayingUps?: boolean | User$createdPayingUpsArgs<ExtArgs>
    createdTelegrams?: boolean | User$createdTelegramsArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    CoursePurchasers?: boolean | User$CoursePurchasersArgs<ExtArgs>
    businessInfo?: boolean | User$businessInfoArgs<ExtArgs>
    kycRecords?: boolean | User$kycRecordsArgs<ExtArgs>
    BankAccounts?: boolean | User$BankAccountsArgs<ExtArgs>
    upiIds?: boolean | User$upiIdsArgs<ExtArgs>
    premiumContent?: boolean | User$premiumContentArgs<ExtArgs>
    premiumAccess?: boolean | User$premiumAccessArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    name?: boolean
    socialMedia?: boolean
    goals?: boolean
    heardAboutUs?: boolean
    role?: boolean
    verified?: boolean
    creatorComission?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phone?: boolean
    name?: boolean
    socialMedia?: boolean
    goals?: boolean
    heardAboutUs?: boolean
    role?: boolean
    verified?: boolean
    creatorComission?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    phone?: boolean
    name?: boolean
    socialMedia?: boolean
    goals?: boolean
    heardAboutUs?: boolean
    role?: boolean
    verified?: boolean
    creatorComission?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "phone" | "name" | "socialMedia" | "goals" | "heardAboutUs" | "role" | "verified" | "creatorComission", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    boughtWebinarTickets?: boolean | User$boughtWebinarTicketsArgs<ExtArgs>
    boughtPayingUpTickets?: boolean | User$boughtPayingUpTicketsArgs<ExtArgs>
    boughtTelegramSubscriptions?: boolean | User$boughtTelegramSubscriptionsArgs<ExtArgs>
    createdWebinars?: boolean | User$createdWebinarsArgs<ExtArgs>
    createdCourses?: boolean | User$createdCoursesArgs<ExtArgs>
    createdPayingUps?: boolean | User$createdPayingUpsArgs<ExtArgs>
    createdTelegrams?: boolean | User$createdTelegramsArgs<ExtArgs>
    wallet?: boolean | User$walletArgs<ExtArgs>
    CoursePurchasers?: boolean | User$CoursePurchasersArgs<ExtArgs>
    businessInfo?: boolean | User$businessInfoArgs<ExtArgs>
    kycRecords?: boolean | User$kycRecordsArgs<ExtArgs>
    BankAccounts?: boolean | User$BankAccountsArgs<ExtArgs>
    upiIds?: boolean | User$upiIdsArgs<ExtArgs>
    premiumContent?: boolean | User$premiumContentArgs<ExtArgs>
    premiumAccess?: boolean | User$premiumAccessArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      boughtWebinarTickets: Prisma.$WebinarTicketPayload<ExtArgs>[]
      boughtPayingUpTickets: Prisma.$PayingUpTicketPayload<ExtArgs>[]
      boughtTelegramSubscriptions: Prisma.$TelegramSubscriptionPayload<ExtArgs>[]
      createdWebinars: Prisma.$WebinarPayload<ExtArgs>[]
      createdCourses: Prisma.$CoursePayload<ExtArgs>[]
      createdPayingUps: Prisma.$PayingUpPayload<ExtArgs>[]
      createdTelegrams: Prisma.$TelegramPayload<ExtArgs>[]
      wallet: Prisma.$WalletPayload<ExtArgs> | null
      CoursePurchasers: Prisma.$CoursePurchasersPayload<ExtArgs>[]
      businessInfo: Prisma.$BusinessInfoPayload<ExtArgs> | null
      kycRecords: Prisma.$kycRecordsPayload<ExtArgs> | null
      BankAccounts: Prisma.$BankDetailsPayload<ExtArgs>[]
      upiIds: Prisma.$UPIPayload<ExtArgs>[]
      premiumContent: Prisma.$PremiumContentPayload<ExtArgs>[]
      premiumAccess: Prisma.$PremiumContentAccessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      phone: string
      name: string
      socialMedia: string
      goals: string[]
      heardAboutUs: string
      role: $Enums.Role
      verified: boolean
      creatorComission: number | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    boughtWebinarTickets<T extends User$boughtWebinarTicketsArgs<ExtArgs> = {}>(args?: Subset<T, User$boughtWebinarTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    boughtPayingUpTickets<T extends User$boughtPayingUpTicketsArgs<ExtArgs> = {}>(args?: Subset<T, User$boughtPayingUpTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    boughtTelegramSubscriptions<T extends User$boughtTelegramSubscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, User$boughtTelegramSubscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdWebinars<T extends User$createdWebinarsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdWebinarsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdCourses<T extends User$createdCoursesArgs<ExtArgs> = {}>(args?: Subset<T, User$createdCoursesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdPayingUps<T extends User$createdPayingUpsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdPayingUpsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdTelegrams<T extends User$createdTelegramsArgs<ExtArgs> = {}>(args?: Subset<T, User$createdTelegramsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    wallet<T extends User$walletArgs<ExtArgs> = {}>(args?: Subset<T, User$walletArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    CoursePurchasers<T extends User$CoursePurchasersArgs<ExtArgs> = {}>(args?: Subset<T, User$CoursePurchasersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    businessInfo<T extends User$businessInfoArgs<ExtArgs> = {}>(args?: Subset<T, User$businessInfoArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    kycRecords<T extends User$kycRecordsArgs<ExtArgs> = {}>(args?: Subset<T, User$kycRecordsArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    BankAccounts<T extends User$BankAccountsArgs<ExtArgs> = {}>(args?: Subset<T, User$BankAccountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    upiIds<T extends User$upiIdsArgs<ExtArgs> = {}>(args?: Subset<T, User$upiIdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    premiumContent<T extends User$premiumContentArgs<ExtArgs> = {}>(args?: Subset<T, User$premiumContentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    premiumAccess<T extends User$premiumAccessArgs<ExtArgs> = {}>(args?: Subset<T, User$premiumAccessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly phone: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly socialMedia: FieldRef<"User", 'String'>
    readonly goals: FieldRef<"User", 'String[]'>
    readonly heardAboutUs: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly verified: FieldRef<"User", 'Boolean'>
    readonly creatorComission: FieldRef<"User", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.boughtWebinarTickets
   */
  export type User$boughtWebinarTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    where?: WebinarTicketWhereInput
    orderBy?: WebinarTicketOrderByWithRelationInput | WebinarTicketOrderByWithRelationInput[]
    cursor?: WebinarTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebinarTicketScalarFieldEnum | WebinarTicketScalarFieldEnum[]
  }

  /**
   * User.boughtPayingUpTickets
   */
  export type User$boughtPayingUpTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    where?: PayingUpTicketWhereInput
    orderBy?: PayingUpTicketOrderByWithRelationInput | PayingUpTicketOrderByWithRelationInput[]
    cursor?: PayingUpTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayingUpTicketScalarFieldEnum | PayingUpTicketScalarFieldEnum[]
  }

  /**
   * User.boughtTelegramSubscriptions
   */
  export type User$boughtTelegramSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    where?: TelegramSubscriptionWhereInput
    orderBy?: TelegramSubscriptionOrderByWithRelationInput | TelegramSubscriptionOrderByWithRelationInput[]
    cursor?: TelegramSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelegramSubscriptionScalarFieldEnum | TelegramSubscriptionScalarFieldEnum[]
  }

  /**
   * User.createdWebinars
   */
  export type User$createdWebinarsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    where?: WebinarWhereInput
    orderBy?: WebinarOrderByWithRelationInput | WebinarOrderByWithRelationInput[]
    cursor?: WebinarWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebinarScalarFieldEnum | WebinarScalarFieldEnum[]
  }

  /**
   * User.createdCourses
   */
  export type User$createdCoursesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    cursor?: CourseWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * User.createdPayingUps
   */
  export type User$createdPayingUpsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    where?: PayingUpWhereInput
    orderBy?: PayingUpOrderByWithRelationInput | PayingUpOrderByWithRelationInput[]
    cursor?: PayingUpWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayingUpScalarFieldEnum | PayingUpScalarFieldEnum[]
  }

  /**
   * User.createdTelegrams
   */
  export type User$createdTelegramsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    where?: TelegramWhereInput
    orderBy?: TelegramOrderByWithRelationInput | TelegramOrderByWithRelationInput[]
    cursor?: TelegramWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelegramScalarFieldEnum | TelegramScalarFieldEnum[]
  }

  /**
   * User.wallet
   */
  export type User$walletArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
  }

  /**
   * User.CoursePurchasers
   */
  export type User$CoursePurchasersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    where?: CoursePurchasersWhereInput
    orderBy?: CoursePurchasersOrderByWithRelationInput | CoursePurchasersOrderByWithRelationInput[]
    cursor?: CoursePurchasersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursePurchasersScalarFieldEnum | CoursePurchasersScalarFieldEnum[]
  }

  /**
   * User.businessInfo
   */
  export type User$businessInfoArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    where?: BusinessInfoWhereInput
  }

  /**
   * User.kycRecords
   */
  export type User$kycRecordsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    where?: kycRecordsWhereInput
  }

  /**
   * User.BankAccounts
   */
  export type User$BankAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    where?: BankDetailsWhereInput
    orderBy?: BankDetailsOrderByWithRelationInput | BankDetailsOrderByWithRelationInput[]
    cursor?: BankDetailsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BankDetailsScalarFieldEnum | BankDetailsScalarFieldEnum[]
  }

  /**
   * User.upiIds
   */
  export type User$upiIdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    where?: UPIWhereInput
    orderBy?: UPIOrderByWithRelationInput | UPIOrderByWithRelationInput[]
    cursor?: UPIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UPIScalarFieldEnum | UPIScalarFieldEnum[]
  }

  /**
   * User.premiumContent
   */
  export type User$premiumContentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    where?: PremiumContentWhereInput
    orderBy?: PremiumContentOrderByWithRelationInput | PremiumContentOrderByWithRelationInput[]
    cursor?: PremiumContentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PremiumContentScalarFieldEnum | PremiumContentScalarFieldEnum[]
  }

  /**
   * User.premiumAccess
   */
  export type User$premiumAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    where?: PremiumContentAccessWhereInput
    orderBy?: PremiumContentAccessOrderByWithRelationInput | PremiumContentAccessOrderByWithRelationInput[]
    cursor?: PremiumContentAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PremiumContentAccessScalarFieldEnum | PremiumContentAccessScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Otp
   */

  export type AggregateOtp = {
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  export type OtpMinAggregateOutputType = {
    id: string | null
    phoneNumber: string | null
    phoneCodeHash: string | null
    createdAt: Date | null
    expiresAt: Date | null
    updatedAt: Date | null
  }

  export type OtpMaxAggregateOutputType = {
    id: string | null
    phoneNumber: string | null
    phoneCodeHash: string | null
    createdAt: Date | null
    expiresAt: Date | null
    updatedAt: Date | null
  }

  export type OtpCountAggregateOutputType = {
    id: number
    phoneNumber: number
    phoneCodeHash: number
    createdAt: number
    expiresAt: number
    updatedAt: number
    _all: number
  }


  export type OtpMinAggregateInputType = {
    id?: true
    phoneNumber?: true
    phoneCodeHash?: true
    createdAt?: true
    expiresAt?: true
    updatedAt?: true
  }

  export type OtpMaxAggregateInputType = {
    id?: true
    phoneNumber?: true
    phoneCodeHash?: true
    createdAt?: true
    expiresAt?: true
    updatedAt?: true
  }

  export type OtpCountAggregateInputType = {
    id?: true
    phoneNumber?: true
    phoneCodeHash?: true
    createdAt?: true
    expiresAt?: true
    updatedAt?: true
    _all?: true
  }

  export type OtpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otp to aggregate.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Otps
    **/
    _count?: true | OtpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OtpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OtpMaxAggregateInputType
  }

  export type GetOtpAggregateType<T extends OtpAggregateArgs> = {
        [P in keyof T & keyof AggregateOtp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOtp[P]>
      : GetScalarType<T[P], AggregateOtp[P]>
  }




  export type OtpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OtpWhereInput
    orderBy?: OtpOrderByWithAggregationInput | OtpOrderByWithAggregationInput[]
    by: OtpScalarFieldEnum[] | OtpScalarFieldEnum
    having?: OtpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OtpCountAggregateInputType | true
    _min?: OtpMinAggregateInputType
    _max?: OtpMaxAggregateInputType
  }

  export type OtpGroupByOutputType = {
    id: string
    phoneNumber: string
    phoneCodeHash: string
    createdAt: Date
    expiresAt: Date
    updatedAt: Date
    _count: OtpCountAggregateOutputType | null
    _min: OtpMinAggregateOutputType | null
    _max: OtpMaxAggregateOutputType | null
  }

  type GetOtpGroupByPayload<T extends OtpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OtpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OtpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OtpGroupByOutputType[P]>
            : GetScalarType<T[P], OtpGroupByOutputType[P]>
        }
      >
    >


  export type OtpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    phoneCodeHash?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    phoneCodeHash?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    phoneNumber?: boolean
    phoneCodeHash?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["otp"]>

  export type OtpSelectScalar = {
    id?: boolean
    phoneNumber?: boolean
    phoneCodeHash?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    updatedAt?: boolean
  }

  export type OtpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "phoneNumber" | "phoneCodeHash" | "createdAt" | "expiresAt" | "updatedAt", ExtArgs["result"]["otp"]>

  export type $OtpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Otp"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      phoneNumber: string
      phoneCodeHash: string
      createdAt: Date
      expiresAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["otp"]>
    composites: {}
  }

  type OtpGetPayload<S extends boolean | null | undefined | OtpDefaultArgs> = $Result.GetResult<Prisma.$OtpPayload, S>

  type OtpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OtpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OtpCountAggregateInputType | true
    }

  export interface OtpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Otp'], meta: { name: 'Otp' } }
    /**
     * Find zero or one Otp that matches the filter.
     * @param {OtpFindUniqueArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OtpFindUniqueArgs>(args: SelectSubset<T, OtpFindUniqueArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Otp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OtpFindUniqueOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OtpFindUniqueOrThrowArgs>(args: SelectSubset<T, OtpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Otp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OtpFindFirstArgs>(args?: SelectSubset<T, OtpFindFirstArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Otp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindFirstOrThrowArgs} args - Arguments to find a Otp
     * @example
     * // Get one Otp
     * const otp = await prisma.otp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OtpFindFirstOrThrowArgs>(args?: SelectSubset<T, OtpFindFirstOrThrowArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Otps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Otps
     * const otps = await prisma.otp.findMany()
     * 
     * // Get first 10 Otps
     * const otps = await prisma.otp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const otpWithIdOnly = await prisma.otp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OtpFindManyArgs>(args?: SelectSubset<T, OtpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Otp.
     * @param {OtpCreateArgs} args - Arguments to create a Otp.
     * @example
     * // Create one Otp
     * const Otp = await prisma.otp.create({
     *   data: {
     *     // ... data to create a Otp
     *   }
     * })
     * 
     */
    create<T extends OtpCreateArgs>(args: SelectSubset<T, OtpCreateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Otps.
     * @param {OtpCreateManyArgs} args - Arguments to create many Otps.
     * @example
     * // Create many Otps
     * const otp = await prisma.otp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OtpCreateManyArgs>(args?: SelectSubset<T, OtpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Otps and returns the data saved in the database.
     * @param {OtpCreateManyAndReturnArgs} args - Arguments to create many Otps.
     * @example
     * // Create many Otps
     * const otp = await prisma.otp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Otps and only return the `id`
     * const otpWithIdOnly = await prisma.otp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OtpCreateManyAndReturnArgs>(args?: SelectSubset<T, OtpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Otp.
     * @param {OtpDeleteArgs} args - Arguments to delete one Otp.
     * @example
     * // Delete one Otp
     * const Otp = await prisma.otp.delete({
     *   where: {
     *     // ... filter to delete one Otp
     *   }
     * })
     * 
     */
    delete<T extends OtpDeleteArgs>(args: SelectSubset<T, OtpDeleteArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Otp.
     * @param {OtpUpdateArgs} args - Arguments to update one Otp.
     * @example
     * // Update one Otp
     * const otp = await prisma.otp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OtpUpdateArgs>(args: SelectSubset<T, OtpUpdateArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Otps.
     * @param {OtpDeleteManyArgs} args - Arguments to filter Otps to delete.
     * @example
     * // Delete a few Otps
     * const { count } = await prisma.otp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OtpDeleteManyArgs>(args?: SelectSubset<T, OtpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OtpUpdateManyArgs>(args: SelectSubset<T, OtpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Otps and returns the data updated in the database.
     * @param {OtpUpdateManyAndReturnArgs} args - Arguments to update many Otps.
     * @example
     * // Update many Otps
     * const otp = await prisma.otp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Otps and only return the `id`
     * const otpWithIdOnly = await prisma.otp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OtpUpdateManyAndReturnArgs>(args: SelectSubset<T, OtpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Otp.
     * @param {OtpUpsertArgs} args - Arguments to update or create a Otp.
     * @example
     * // Update or create a Otp
     * const otp = await prisma.otp.upsert({
     *   create: {
     *     // ... data to create a Otp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Otp we want to update
     *   }
     * })
     */
    upsert<T extends OtpUpsertArgs>(args: SelectSubset<T, OtpUpsertArgs<ExtArgs>>): Prisma__OtpClient<$Result.GetResult<Prisma.$OtpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Otps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpCountArgs} args - Arguments to filter Otps to count.
     * @example
     * // Count the number of Otps
     * const count = await prisma.otp.count({
     *   where: {
     *     // ... the filter for the Otps we want to count
     *   }
     * })
    **/
    count<T extends OtpCountArgs>(
      args?: Subset<T, OtpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OtpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OtpAggregateArgs>(args: Subset<T, OtpAggregateArgs>): Prisma.PrismaPromise<GetOtpAggregateType<T>>

    /**
     * Group by Otp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OtpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OtpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OtpGroupByArgs['orderBy'] }
        : { orderBy?: OtpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OtpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOtpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Otp model
   */
  readonly fields: OtpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Otp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OtpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Otp model
   */
  interface OtpFieldRefs {
    readonly id: FieldRef<"Otp", 'String'>
    readonly phoneNumber: FieldRef<"Otp", 'String'>
    readonly phoneCodeHash: FieldRef<"Otp", 'String'>
    readonly createdAt: FieldRef<"Otp", 'DateTime'>
    readonly expiresAt: FieldRef<"Otp", 'DateTime'>
    readonly updatedAt: FieldRef<"Otp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Otp findUnique
   */
  export type OtpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findUniqueOrThrow
   */
  export type OtpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp findFirst
   */
  export type OtpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findFirstOrThrow
   */
  export type OtpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Filter, which Otp to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Otps.
     */
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp findMany
   */
  export type OtpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Filter, which Otps to fetch.
     */
    where?: OtpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Otps to fetch.
     */
    orderBy?: OtpOrderByWithRelationInput | OtpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Otps.
     */
    cursor?: OtpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Otps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Otps.
     */
    skip?: number
    distinct?: OtpScalarFieldEnum | OtpScalarFieldEnum[]
  }

  /**
   * Otp create
   */
  export type OtpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * The data needed to create a Otp.
     */
    data: XOR<OtpCreateInput, OtpUncheckedCreateInput>
  }

  /**
   * Otp createMany
   */
  export type OtpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Otps.
     */
    data: OtpCreateManyInput | OtpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Otp createManyAndReturn
   */
  export type OtpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * The data used to create many Otps.
     */
    data: OtpCreateManyInput | OtpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Otp update
   */
  export type OtpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * The data needed to update a Otp.
     */
    data: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
    /**
     * Choose, which Otp to update.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp updateMany
   */
  export type OtpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Otps.
     */
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyInput>
    /**
     * Filter which Otps to update
     */
    where?: OtpWhereInput
    /**
     * Limit how many Otps to update.
     */
    limit?: number
  }

  /**
   * Otp updateManyAndReturn
   */
  export type OtpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * The data used to update Otps.
     */
    data: XOR<OtpUpdateManyMutationInput, OtpUncheckedUpdateManyInput>
    /**
     * Filter which Otps to update
     */
    where?: OtpWhereInput
    /**
     * Limit how many Otps to update.
     */
    limit?: number
  }

  /**
   * Otp upsert
   */
  export type OtpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * The filter to search for the Otp to update in case it exists.
     */
    where: OtpWhereUniqueInput
    /**
     * In case the Otp found by the `where` argument doesn't exist, create a new Otp with this data.
     */
    create: XOR<OtpCreateInput, OtpUncheckedCreateInput>
    /**
     * In case the Otp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OtpUpdateInput, OtpUncheckedUpdateInput>
  }

  /**
   * Otp delete
   */
  export type OtpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
    /**
     * Filter which Otp to delete.
     */
    where: OtpWhereUniqueInput
  }

  /**
   * Otp deleteMany
   */
  export type OtpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Otps to delete
     */
    where?: OtpWhereInput
    /**
     * Limit how many Otps to delete.
     */
    limit?: number
  }

  /**
   * Otp without action
   */
  export type OtpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Otp
     */
    select?: OtpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Otp
     */
    omit?: OtpOmit<ExtArgs> | null
  }


  /**
   * Model Wallet
   */

  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    balance: number | null
    totalEarnings: number | null
    totalWithdrawals: number | null
  }

  export type WalletSumAggregateOutputType = {
    balance: number | null
    totalEarnings: number | null
    totalWithdrawals: number | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    userId: string | null
    balance: number | null
    totalEarnings: number | null
    totalWithdrawals: number | null
    isKycVerified: boolean | null
    mpin: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    balance: number | null
    totalEarnings: number | null
    totalWithdrawals: number | null
    isKycVerified: boolean | null
    mpin: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    userId: number
    balance: number
    totalEarnings: number
    totalWithdrawals: number
    isKycVerified: number
    mpin: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    balance?: true
    totalEarnings?: true
    totalWithdrawals?: true
  }

  export type WalletSumAggregateInputType = {
    balance?: true
    totalEarnings?: true
    totalWithdrawals?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    userId?: true
    balance?: true
    totalEarnings?: true
    totalWithdrawals?: true
    isKycVerified?: true
    mpin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    userId?: true
    balance?: true
    totalEarnings?: true
    totalWithdrawals?: true
    isKycVerified?: true
    mpin?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    userId?: true
    balance?: true
    totalEarnings?: true
    totalWithdrawals?: true
    isKycVerified?: true
    mpin?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: WalletOrderByWithAggregationInput | WalletOrderByWithAggregationInput[]
    by: WalletScalarFieldEnum[] | WalletScalarFieldEnum
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }

  export type WalletGroupByOutputType = {
    id: string
    userId: string
    balance: number
    totalEarnings: number
    totalWithdrawals: number
    isKycVerified: boolean
    mpin: string | null
    createdAt: Date
    updatedAt: Date
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balance?: boolean
    totalEarnings?: boolean
    totalWithdrawals?: boolean
    isKycVerified?: boolean
    mpin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Wallet$transactionsArgs<ExtArgs>
    withdrawals?: boolean | Wallet$withdrawalsArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balance?: boolean
    totalEarnings?: boolean
    totalWithdrawals?: boolean
    isKycVerified?: boolean
    mpin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    balance?: boolean
    totalEarnings?: boolean
    totalWithdrawals?: boolean
    isKycVerified?: boolean
    mpin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    userId?: boolean
    balance?: boolean
    totalEarnings?: boolean
    totalWithdrawals?: boolean
    isKycVerified?: boolean
    mpin?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WalletOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "balance" | "totalEarnings" | "totalWithdrawals" | "isKycVerified" | "mpin" | "createdAt" | "updatedAt", ExtArgs["result"]["wallet"]>
  export type WalletInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    transactions?: boolean | Wallet$transactionsArgs<ExtArgs>
    withdrawals?: boolean | Wallet$withdrawalsArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WalletIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WalletIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WalletPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Wallet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      withdrawals: Prisma.$WithdrawalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      balance: number
      totalEarnings: number
      totalWithdrawals: number
      isKycVerified: boolean
      mpin: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["wallet"]>
    composites: {}
  }

  type WalletGetPayload<S extends boolean | null | undefined | WalletDefaultArgs> = $Result.GetResult<Prisma.$WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WalletFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WalletFindUniqueArgs>(args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Wallet that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs>(args: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WalletFindFirstArgs>(args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Wallet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs>(args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WalletFindManyArgs>(args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
     */
    create<T extends WalletCreateArgs>(args: SelectSubset<T, WalletCreateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Wallets.
     * @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WalletCreateManyArgs>(args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Wallets and returns the data saved in the database.
     * @param {WalletCreateManyAndReturnArgs} args - Arguments to create many Wallets.
     * @example
     * // Create many Wallets
     * const wallet = await prisma.wallet.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WalletCreateManyAndReturnArgs>(args?: SelectSubset<T, WalletCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
     */
    delete<T extends WalletDeleteArgs>(args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WalletUpdateArgs>(args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WalletDeleteManyArgs>(args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WalletUpdateManyArgs>(args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets and returns the data updated in the database.
     * @param {WalletUpdateManyAndReturnArgs} args - Arguments to update many Wallets.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Wallets and only return the `id`
     * const walletWithIdOnly = await prisma.wallet.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WalletUpdateManyAndReturnArgs>(args: SelectSubset<T, WalletUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
     */
    upsert<T extends WalletUpsertArgs>(args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Wallet model
   */
  readonly fields: WalletFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    transactions<T extends Wallet$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    withdrawals<T extends Wallet$withdrawalsArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$withdrawalsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Wallet model
   */
  interface WalletFieldRefs {
    readonly id: FieldRef<"Wallet", 'String'>
    readonly userId: FieldRef<"Wallet", 'String'>
    readonly balance: FieldRef<"Wallet", 'Float'>
    readonly totalEarnings: FieldRef<"Wallet", 'Float'>
    readonly totalWithdrawals: FieldRef<"Wallet", 'Float'>
    readonly isKycVerified: FieldRef<"Wallet", 'Boolean'>
    readonly mpin: FieldRef<"Wallet", 'String'>
    readonly createdAt: FieldRef<"Wallet", 'DateTime'>
    readonly updatedAt: FieldRef<"Wallet", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Wallet findUnique
   */
  export type WalletFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findFirst
   */
  export type WalletFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: WalletOrderByWithRelationInput | WalletOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: WalletScalarFieldEnum | WalletScalarFieldEnum[]
  }

  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }

  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Wallet createManyAndReturn
   */
  export type WalletCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to create many Wallets.
     */
    data: WalletCreateManyInput | WalletCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
  }

  /**
   * Wallet updateManyAndReturn
   */
  export type WalletUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }

  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
    /**
     * Limit how many Wallets to delete.
     */
    limit?: number
  }

  /**
   * Wallet.transactions
   */
  export type Wallet$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Wallet.withdrawals
   */
  export type Wallet$withdrawalsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    where?: WithdrawalWhereInput
    orderBy?: WithdrawalOrderByWithRelationInput | WithdrawalOrderByWithRelationInput[]
    cursor?: WithdrawalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WithdrawalScalarFieldEnum | WithdrawalScalarFieldEnum[]
  }

  /**
   * Wallet without action
   */
  export type WalletDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Wallet
     */
    omit?: WalletOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WalletInclude<ExtArgs> | null
  }


  /**
   * Model BankDetails
   */

  export type AggregateBankDetails = {
    _count: BankDetailsCountAggregateOutputType | null
    _min: BankDetailsMinAggregateOutputType | null
    _max: BankDetailsMaxAggregateOutputType | null
  }

  export type BankDetailsMinAggregateOutputType = {
    id: string | null
    accountHolderName: string | null
    accountNumber: string | null
    ifscCode: string | null
    bankDocument: string | null
    razorpayContactID: string | null
    razorpayFundAccountID: string | null
    userId: string | null
    primary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankDetailsMaxAggregateOutputType = {
    id: string | null
    accountHolderName: string | null
    accountNumber: string | null
    ifscCode: string | null
    bankDocument: string | null
    razorpayContactID: string | null
    razorpayFundAccountID: string | null
    userId: string | null
    primary: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BankDetailsCountAggregateOutputType = {
    id: number
    accountHolderName: number
    accountNumber: number
    ifscCode: number
    bankDocument: number
    upiId: number
    razorpayContactID: number
    razorpayFundAccountID: number
    userId: number
    primary: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BankDetailsMinAggregateInputType = {
    id?: true
    accountHolderName?: true
    accountNumber?: true
    ifscCode?: true
    bankDocument?: true
    razorpayContactID?: true
    razorpayFundAccountID?: true
    userId?: true
    primary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankDetailsMaxAggregateInputType = {
    id?: true
    accountHolderName?: true
    accountNumber?: true
    ifscCode?: true
    bankDocument?: true
    razorpayContactID?: true
    razorpayFundAccountID?: true
    userId?: true
    primary?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BankDetailsCountAggregateInputType = {
    id?: true
    accountHolderName?: true
    accountNumber?: true
    ifscCode?: true
    bankDocument?: true
    upiId?: true
    razorpayContactID?: true
    razorpayFundAccountID?: true
    userId?: true
    primary?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BankDetailsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankDetails to aggregate.
     */
    where?: BankDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankDetails to fetch.
     */
    orderBy?: BankDetailsOrderByWithRelationInput | BankDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BankDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BankDetails
    **/
    _count?: true | BankDetailsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BankDetailsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BankDetailsMaxAggregateInputType
  }

  export type GetBankDetailsAggregateType<T extends BankDetailsAggregateArgs> = {
        [P in keyof T & keyof AggregateBankDetails]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBankDetails[P]>
      : GetScalarType<T[P], AggregateBankDetails[P]>
  }




  export type BankDetailsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BankDetailsWhereInput
    orderBy?: BankDetailsOrderByWithAggregationInput | BankDetailsOrderByWithAggregationInput[]
    by: BankDetailsScalarFieldEnum[] | BankDetailsScalarFieldEnum
    having?: BankDetailsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BankDetailsCountAggregateInputType | true
    _min?: BankDetailsMinAggregateInputType
    _max?: BankDetailsMaxAggregateInputType
  }

  export type BankDetailsGroupByOutputType = {
    id: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument: string | null
    upiId: string[]
    razorpayContactID: string | null
    razorpayFundAccountID: string | null
    userId: string
    primary: boolean
    createdAt: Date
    updatedAt: Date
    _count: BankDetailsCountAggregateOutputType | null
    _min: BankDetailsMinAggregateOutputType | null
    _max: BankDetailsMaxAggregateOutputType | null
  }

  type GetBankDetailsGroupByPayload<T extends BankDetailsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BankDetailsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BankDetailsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BankDetailsGroupByOutputType[P]>
            : GetScalarType<T[P], BankDetailsGroupByOutputType[P]>
        }
      >
    >


  export type BankDetailsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountHolderName?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankDocument?: boolean
    upiId?: boolean
    razorpayContactID?: boolean
    razorpayFundAccountID?: boolean
    userId?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    upiIds?: boolean | BankDetails$upiIdsArgs<ExtArgs>
    withdrawls?: boolean | BankDetails$withdrawlsArgs<ExtArgs>
    _count?: boolean | BankDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankDetails"]>

  export type BankDetailsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountHolderName?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankDocument?: boolean
    upiId?: boolean
    razorpayContactID?: boolean
    razorpayFundAccountID?: boolean
    userId?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankDetails"]>

  export type BankDetailsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    accountHolderName?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankDocument?: boolean
    upiId?: boolean
    razorpayContactID?: boolean
    razorpayFundAccountID?: boolean
    userId?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bankDetails"]>

  export type BankDetailsSelectScalar = {
    id?: boolean
    accountHolderName?: boolean
    accountNumber?: boolean
    ifscCode?: boolean
    bankDocument?: boolean
    upiId?: boolean
    razorpayContactID?: boolean
    razorpayFundAccountID?: boolean
    userId?: boolean
    primary?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BankDetailsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "accountHolderName" | "accountNumber" | "ifscCode" | "bankDocument" | "upiId" | "razorpayContactID" | "razorpayFundAccountID" | "userId" | "primary" | "createdAt" | "updatedAt", ExtArgs["result"]["bankDetails"]>
  export type BankDetailsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    upiIds?: boolean | BankDetails$upiIdsArgs<ExtArgs>
    withdrawls?: boolean | BankDetails$withdrawlsArgs<ExtArgs>
    _count?: boolean | BankDetailsCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BankDetailsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BankDetailsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BankDetailsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BankDetails"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      upiIds: Prisma.$UPIPayload<ExtArgs>[]
      withdrawls: Prisma.$WithdrawalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      accountHolderName: string
      accountNumber: string
      ifscCode: string
      bankDocument: string | null
      upiId: string[]
      razorpayContactID: string | null
      razorpayFundAccountID: string | null
      userId: string
      primary: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["bankDetails"]>
    composites: {}
  }

  type BankDetailsGetPayload<S extends boolean | null | undefined | BankDetailsDefaultArgs> = $Result.GetResult<Prisma.$BankDetailsPayload, S>

  type BankDetailsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BankDetailsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BankDetailsCountAggregateInputType | true
    }

  export interface BankDetailsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BankDetails'], meta: { name: 'BankDetails' } }
    /**
     * Find zero or one BankDetails that matches the filter.
     * @param {BankDetailsFindUniqueArgs} args - Arguments to find a BankDetails
     * @example
     * // Get one BankDetails
     * const bankDetails = await prisma.bankDetails.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BankDetailsFindUniqueArgs>(args: SelectSubset<T, BankDetailsFindUniqueArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BankDetails that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BankDetailsFindUniqueOrThrowArgs} args - Arguments to find a BankDetails
     * @example
     * // Get one BankDetails
     * const bankDetails = await prisma.bankDetails.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BankDetailsFindUniqueOrThrowArgs>(args: SelectSubset<T, BankDetailsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BankDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankDetailsFindFirstArgs} args - Arguments to find a BankDetails
     * @example
     * // Get one BankDetails
     * const bankDetails = await prisma.bankDetails.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BankDetailsFindFirstArgs>(args?: SelectSubset<T, BankDetailsFindFirstArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BankDetails that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankDetailsFindFirstOrThrowArgs} args - Arguments to find a BankDetails
     * @example
     * // Get one BankDetails
     * const bankDetails = await prisma.bankDetails.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BankDetailsFindFirstOrThrowArgs>(args?: SelectSubset<T, BankDetailsFindFirstOrThrowArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BankDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankDetailsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BankDetails
     * const bankDetails = await prisma.bankDetails.findMany()
     * 
     * // Get first 10 BankDetails
     * const bankDetails = await prisma.bankDetails.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const bankDetailsWithIdOnly = await prisma.bankDetails.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BankDetailsFindManyArgs>(args?: SelectSubset<T, BankDetailsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BankDetails.
     * @param {BankDetailsCreateArgs} args - Arguments to create a BankDetails.
     * @example
     * // Create one BankDetails
     * const BankDetails = await prisma.bankDetails.create({
     *   data: {
     *     // ... data to create a BankDetails
     *   }
     * })
     * 
     */
    create<T extends BankDetailsCreateArgs>(args: SelectSubset<T, BankDetailsCreateArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BankDetails.
     * @param {BankDetailsCreateManyArgs} args - Arguments to create many BankDetails.
     * @example
     * // Create many BankDetails
     * const bankDetails = await prisma.bankDetails.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BankDetailsCreateManyArgs>(args?: SelectSubset<T, BankDetailsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BankDetails and returns the data saved in the database.
     * @param {BankDetailsCreateManyAndReturnArgs} args - Arguments to create many BankDetails.
     * @example
     * // Create many BankDetails
     * const bankDetails = await prisma.bankDetails.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BankDetails and only return the `id`
     * const bankDetailsWithIdOnly = await prisma.bankDetails.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BankDetailsCreateManyAndReturnArgs>(args?: SelectSubset<T, BankDetailsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BankDetails.
     * @param {BankDetailsDeleteArgs} args - Arguments to delete one BankDetails.
     * @example
     * // Delete one BankDetails
     * const BankDetails = await prisma.bankDetails.delete({
     *   where: {
     *     // ... filter to delete one BankDetails
     *   }
     * })
     * 
     */
    delete<T extends BankDetailsDeleteArgs>(args: SelectSubset<T, BankDetailsDeleteArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BankDetails.
     * @param {BankDetailsUpdateArgs} args - Arguments to update one BankDetails.
     * @example
     * // Update one BankDetails
     * const bankDetails = await prisma.bankDetails.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BankDetailsUpdateArgs>(args: SelectSubset<T, BankDetailsUpdateArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BankDetails.
     * @param {BankDetailsDeleteManyArgs} args - Arguments to filter BankDetails to delete.
     * @example
     * // Delete a few BankDetails
     * const { count } = await prisma.bankDetails.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BankDetailsDeleteManyArgs>(args?: SelectSubset<T, BankDetailsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankDetailsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BankDetails
     * const bankDetails = await prisma.bankDetails.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BankDetailsUpdateManyArgs>(args: SelectSubset<T, BankDetailsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BankDetails and returns the data updated in the database.
     * @param {BankDetailsUpdateManyAndReturnArgs} args - Arguments to update many BankDetails.
     * @example
     * // Update many BankDetails
     * const bankDetails = await prisma.bankDetails.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BankDetails and only return the `id`
     * const bankDetailsWithIdOnly = await prisma.bankDetails.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BankDetailsUpdateManyAndReturnArgs>(args: SelectSubset<T, BankDetailsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BankDetails.
     * @param {BankDetailsUpsertArgs} args - Arguments to update or create a BankDetails.
     * @example
     * // Update or create a BankDetails
     * const bankDetails = await prisma.bankDetails.upsert({
     *   create: {
     *     // ... data to create a BankDetails
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BankDetails we want to update
     *   }
     * })
     */
    upsert<T extends BankDetailsUpsertArgs>(args: SelectSubset<T, BankDetailsUpsertArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BankDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankDetailsCountArgs} args - Arguments to filter BankDetails to count.
     * @example
     * // Count the number of BankDetails
     * const count = await prisma.bankDetails.count({
     *   where: {
     *     // ... the filter for the BankDetails we want to count
     *   }
     * })
    **/
    count<T extends BankDetailsCountArgs>(
      args?: Subset<T, BankDetailsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BankDetailsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BankDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankDetailsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BankDetailsAggregateArgs>(args: Subset<T, BankDetailsAggregateArgs>): Prisma.PrismaPromise<GetBankDetailsAggregateType<T>>

    /**
     * Group by BankDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BankDetailsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BankDetailsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BankDetailsGroupByArgs['orderBy'] }
        : { orderBy?: BankDetailsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BankDetailsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBankDetailsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BankDetails model
   */
  readonly fields: BankDetailsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BankDetails.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BankDetailsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    upiIds<T extends BankDetails$upiIdsArgs<ExtArgs> = {}>(args?: Subset<T, BankDetails$upiIdsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    withdrawls<T extends BankDetails$withdrawlsArgs<ExtArgs> = {}>(args?: Subset<T, BankDetails$withdrawlsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BankDetails model
   */
  interface BankDetailsFieldRefs {
    readonly id: FieldRef<"BankDetails", 'String'>
    readonly accountHolderName: FieldRef<"BankDetails", 'String'>
    readonly accountNumber: FieldRef<"BankDetails", 'String'>
    readonly ifscCode: FieldRef<"BankDetails", 'String'>
    readonly bankDocument: FieldRef<"BankDetails", 'String'>
    readonly upiId: FieldRef<"BankDetails", 'String[]'>
    readonly razorpayContactID: FieldRef<"BankDetails", 'String'>
    readonly razorpayFundAccountID: FieldRef<"BankDetails", 'String'>
    readonly userId: FieldRef<"BankDetails", 'String'>
    readonly primary: FieldRef<"BankDetails", 'Boolean'>
    readonly createdAt: FieldRef<"BankDetails", 'DateTime'>
    readonly updatedAt: FieldRef<"BankDetails", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BankDetails findUnique
   */
  export type BankDetailsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * Filter, which BankDetails to fetch.
     */
    where: BankDetailsWhereUniqueInput
  }

  /**
   * BankDetails findUniqueOrThrow
   */
  export type BankDetailsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * Filter, which BankDetails to fetch.
     */
    where: BankDetailsWhereUniqueInput
  }

  /**
   * BankDetails findFirst
   */
  export type BankDetailsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * Filter, which BankDetails to fetch.
     */
    where?: BankDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankDetails to fetch.
     */
    orderBy?: BankDetailsOrderByWithRelationInput | BankDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankDetails.
     */
    cursor?: BankDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankDetails.
     */
    distinct?: BankDetailsScalarFieldEnum | BankDetailsScalarFieldEnum[]
  }

  /**
   * BankDetails findFirstOrThrow
   */
  export type BankDetailsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * Filter, which BankDetails to fetch.
     */
    where?: BankDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankDetails to fetch.
     */
    orderBy?: BankDetailsOrderByWithRelationInput | BankDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BankDetails.
     */
    cursor?: BankDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BankDetails.
     */
    distinct?: BankDetailsScalarFieldEnum | BankDetailsScalarFieldEnum[]
  }

  /**
   * BankDetails findMany
   */
  export type BankDetailsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * Filter, which BankDetails to fetch.
     */
    where?: BankDetailsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BankDetails to fetch.
     */
    orderBy?: BankDetailsOrderByWithRelationInput | BankDetailsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BankDetails.
     */
    cursor?: BankDetailsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BankDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BankDetails.
     */
    skip?: number
    distinct?: BankDetailsScalarFieldEnum | BankDetailsScalarFieldEnum[]
  }

  /**
   * BankDetails create
   */
  export type BankDetailsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * The data needed to create a BankDetails.
     */
    data: XOR<BankDetailsCreateInput, BankDetailsUncheckedCreateInput>
  }

  /**
   * BankDetails createMany
   */
  export type BankDetailsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BankDetails.
     */
    data: BankDetailsCreateManyInput | BankDetailsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BankDetails createManyAndReturn
   */
  export type BankDetailsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * The data used to create many BankDetails.
     */
    data: BankDetailsCreateManyInput | BankDetailsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BankDetails update
   */
  export type BankDetailsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * The data needed to update a BankDetails.
     */
    data: XOR<BankDetailsUpdateInput, BankDetailsUncheckedUpdateInput>
    /**
     * Choose, which BankDetails to update.
     */
    where: BankDetailsWhereUniqueInput
  }

  /**
   * BankDetails updateMany
   */
  export type BankDetailsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BankDetails.
     */
    data: XOR<BankDetailsUpdateManyMutationInput, BankDetailsUncheckedUpdateManyInput>
    /**
     * Filter which BankDetails to update
     */
    where?: BankDetailsWhereInput
    /**
     * Limit how many BankDetails to update.
     */
    limit?: number
  }

  /**
   * BankDetails updateManyAndReturn
   */
  export type BankDetailsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * The data used to update BankDetails.
     */
    data: XOR<BankDetailsUpdateManyMutationInput, BankDetailsUncheckedUpdateManyInput>
    /**
     * Filter which BankDetails to update
     */
    where?: BankDetailsWhereInput
    /**
     * Limit how many BankDetails to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BankDetails upsert
   */
  export type BankDetailsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * The filter to search for the BankDetails to update in case it exists.
     */
    where: BankDetailsWhereUniqueInput
    /**
     * In case the BankDetails found by the `where` argument doesn't exist, create a new BankDetails with this data.
     */
    create: XOR<BankDetailsCreateInput, BankDetailsUncheckedCreateInput>
    /**
     * In case the BankDetails was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BankDetailsUpdateInput, BankDetailsUncheckedUpdateInput>
  }

  /**
   * BankDetails delete
   */
  export type BankDetailsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
    /**
     * Filter which BankDetails to delete.
     */
    where: BankDetailsWhereUniqueInput
  }

  /**
   * BankDetails deleteMany
   */
  export type BankDetailsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BankDetails to delete
     */
    where?: BankDetailsWhereInput
    /**
     * Limit how many BankDetails to delete.
     */
    limit?: number
  }

  /**
   * BankDetails.upiIds
   */
  export type BankDetails$upiIdsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    where?: UPIWhereInput
    orderBy?: UPIOrderByWithRelationInput | UPIOrderByWithRelationInput[]
    cursor?: UPIWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UPIScalarFieldEnum | UPIScalarFieldEnum[]
  }

  /**
   * BankDetails.withdrawls
   */
  export type BankDetails$withdrawlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    where?: WithdrawalWhereInput
    orderBy?: WithdrawalOrderByWithRelationInput | WithdrawalOrderByWithRelationInput[]
    cursor?: WithdrawalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WithdrawalScalarFieldEnum | WithdrawalScalarFieldEnum[]
  }

  /**
   * BankDetails without action
   */
  export type BankDetailsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BankDetails
     */
    select?: BankDetailsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BankDetails
     */
    omit?: BankDetailsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BankDetailsInclude<ExtArgs> | null
  }


  /**
   * Model UPI
   */

  export type AggregateUPI = {
    _count: UPICountAggregateOutputType | null
    _min: UPIMinAggregateOutputType | null
    _max: UPIMaxAggregateOutputType | null
  }

  export type UPIMinAggregateOutputType = {
    id: string | null
    upiId: string | null
    razorpayFundAccountID: string | null
    razorpayContactID: string | null
    bankDetailsId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UPIMaxAggregateOutputType = {
    id: string | null
    upiId: string | null
    razorpayFundAccountID: string | null
    razorpayContactID: string | null
    bankDetailsId: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UPICountAggregateOutputType = {
    id: number
    upiId: number
    razorpayFundAccountID: number
    razorpayContactID: number
    bankDetailsId: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UPIMinAggregateInputType = {
    id?: true
    upiId?: true
    razorpayFundAccountID?: true
    razorpayContactID?: true
    bankDetailsId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UPIMaxAggregateInputType = {
    id?: true
    upiId?: true
    razorpayFundAccountID?: true
    razorpayContactID?: true
    bankDetailsId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UPICountAggregateInputType = {
    id?: true
    upiId?: true
    razorpayFundAccountID?: true
    razorpayContactID?: true
    bankDetailsId?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UPIAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UPI to aggregate.
     */
    where?: UPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UPIS to fetch.
     */
    orderBy?: UPIOrderByWithRelationInput | UPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UPIS
    **/
    _count?: true | UPICountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UPIMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UPIMaxAggregateInputType
  }

  export type GetUPIAggregateType<T extends UPIAggregateArgs> = {
        [P in keyof T & keyof AggregateUPI]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUPI[P]>
      : GetScalarType<T[P], AggregateUPI[P]>
  }




  export type UPIGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UPIWhereInput
    orderBy?: UPIOrderByWithAggregationInput | UPIOrderByWithAggregationInput[]
    by: UPIScalarFieldEnum[] | UPIScalarFieldEnum
    having?: UPIScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UPICountAggregateInputType | true
    _min?: UPIMinAggregateInputType
    _max?: UPIMaxAggregateInputType
  }

  export type UPIGroupByOutputType = {
    id: string
    upiId: string
    razorpayFundAccountID: string | null
    razorpayContactID: string | null
    bankDetailsId: string
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: UPICountAggregateOutputType | null
    _min: UPIMinAggregateOutputType | null
    _max: UPIMaxAggregateOutputType | null
  }

  type GetUPIGroupByPayload<T extends UPIGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UPIGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UPIGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UPIGroupByOutputType[P]>
            : GetScalarType<T[P], UPIGroupByOutputType[P]>
        }
      >
    >


  export type UPISelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    upiId?: boolean
    razorpayFundAccountID?: boolean
    razorpayContactID?: boolean
    bankDetailsId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    withdrawls?: boolean | UPI$withdrawlsArgs<ExtArgs>
    _count?: boolean | UPICountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uPI"]>

  export type UPISelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    upiId?: boolean
    razorpayFundAccountID?: boolean
    razorpayContactID?: boolean
    bankDetailsId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uPI"]>

  export type UPISelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    upiId?: boolean
    razorpayFundAccountID?: boolean
    razorpayContactID?: boolean
    bankDetailsId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["uPI"]>

  export type UPISelectScalar = {
    id?: boolean
    upiId?: boolean
    razorpayFundAccountID?: boolean
    razorpayContactID?: boolean
    bankDetailsId?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UPIOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "upiId" | "razorpayFundAccountID" | "razorpayContactID" | "bankDetailsId" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["uPI"]>
  export type UPIInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    withdrawls?: boolean | UPI$withdrawlsArgs<ExtArgs>
    _count?: boolean | UPICountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UPIIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type UPIIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $UPIPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UPI"
    objects: {
      bankDetails: Prisma.$BankDetailsPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      withdrawls: Prisma.$WithdrawalPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      upiId: string
      razorpayFundAccountID: string | null
      razorpayContactID: string | null
      bankDetailsId: string
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["uPI"]>
    composites: {}
  }

  type UPIGetPayload<S extends boolean | null | undefined | UPIDefaultArgs> = $Result.GetResult<Prisma.$UPIPayload, S>

  type UPICountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UPIFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UPICountAggregateInputType | true
    }

  export interface UPIDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UPI'], meta: { name: 'UPI' } }
    /**
     * Find zero or one UPI that matches the filter.
     * @param {UPIFindUniqueArgs} args - Arguments to find a UPI
     * @example
     * // Get one UPI
     * const uPI = await prisma.uPI.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UPIFindUniqueArgs>(args: SelectSubset<T, UPIFindUniqueArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UPI that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UPIFindUniqueOrThrowArgs} args - Arguments to find a UPI
     * @example
     * // Get one UPI
     * const uPI = await prisma.uPI.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UPIFindUniqueOrThrowArgs>(args: SelectSubset<T, UPIFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UPI that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UPIFindFirstArgs} args - Arguments to find a UPI
     * @example
     * // Get one UPI
     * const uPI = await prisma.uPI.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UPIFindFirstArgs>(args?: SelectSubset<T, UPIFindFirstArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UPI that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UPIFindFirstOrThrowArgs} args - Arguments to find a UPI
     * @example
     * // Get one UPI
     * const uPI = await prisma.uPI.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UPIFindFirstOrThrowArgs>(args?: SelectSubset<T, UPIFindFirstOrThrowArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UPIS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UPIFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UPIS
     * const uPIS = await prisma.uPI.findMany()
     * 
     * // Get first 10 UPIS
     * const uPIS = await prisma.uPI.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const uPIWithIdOnly = await prisma.uPI.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UPIFindManyArgs>(args?: SelectSubset<T, UPIFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UPI.
     * @param {UPICreateArgs} args - Arguments to create a UPI.
     * @example
     * // Create one UPI
     * const UPI = await prisma.uPI.create({
     *   data: {
     *     // ... data to create a UPI
     *   }
     * })
     * 
     */
    create<T extends UPICreateArgs>(args: SelectSubset<T, UPICreateArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UPIS.
     * @param {UPICreateManyArgs} args - Arguments to create many UPIS.
     * @example
     * // Create many UPIS
     * const uPI = await prisma.uPI.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UPICreateManyArgs>(args?: SelectSubset<T, UPICreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UPIS and returns the data saved in the database.
     * @param {UPICreateManyAndReturnArgs} args - Arguments to create many UPIS.
     * @example
     * // Create many UPIS
     * const uPI = await prisma.uPI.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UPIS and only return the `id`
     * const uPIWithIdOnly = await prisma.uPI.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UPICreateManyAndReturnArgs>(args?: SelectSubset<T, UPICreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UPI.
     * @param {UPIDeleteArgs} args - Arguments to delete one UPI.
     * @example
     * // Delete one UPI
     * const UPI = await prisma.uPI.delete({
     *   where: {
     *     // ... filter to delete one UPI
     *   }
     * })
     * 
     */
    delete<T extends UPIDeleteArgs>(args: SelectSubset<T, UPIDeleteArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UPI.
     * @param {UPIUpdateArgs} args - Arguments to update one UPI.
     * @example
     * // Update one UPI
     * const uPI = await prisma.uPI.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UPIUpdateArgs>(args: SelectSubset<T, UPIUpdateArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UPIS.
     * @param {UPIDeleteManyArgs} args - Arguments to filter UPIS to delete.
     * @example
     * // Delete a few UPIS
     * const { count } = await prisma.uPI.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UPIDeleteManyArgs>(args?: SelectSubset<T, UPIDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UPIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UPIUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UPIS
     * const uPI = await prisma.uPI.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UPIUpdateManyArgs>(args: SelectSubset<T, UPIUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UPIS and returns the data updated in the database.
     * @param {UPIUpdateManyAndReturnArgs} args - Arguments to update many UPIS.
     * @example
     * // Update many UPIS
     * const uPI = await prisma.uPI.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UPIS and only return the `id`
     * const uPIWithIdOnly = await prisma.uPI.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UPIUpdateManyAndReturnArgs>(args: SelectSubset<T, UPIUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UPI.
     * @param {UPIUpsertArgs} args - Arguments to update or create a UPI.
     * @example
     * // Update or create a UPI
     * const uPI = await prisma.uPI.upsert({
     *   create: {
     *     // ... data to create a UPI
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UPI we want to update
     *   }
     * })
     */
    upsert<T extends UPIUpsertArgs>(args: SelectSubset<T, UPIUpsertArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UPIS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UPICountArgs} args - Arguments to filter UPIS to count.
     * @example
     * // Count the number of UPIS
     * const count = await prisma.uPI.count({
     *   where: {
     *     // ... the filter for the UPIS we want to count
     *   }
     * })
    **/
    count<T extends UPICountArgs>(
      args?: Subset<T, UPICountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UPICountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UPI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UPIAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UPIAggregateArgs>(args: Subset<T, UPIAggregateArgs>): Prisma.PrismaPromise<GetUPIAggregateType<T>>

    /**
     * Group by UPI.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UPIGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UPIGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UPIGroupByArgs['orderBy'] }
        : { orderBy?: UPIGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UPIGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUPIGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UPI model
   */
  readonly fields: UPIFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UPI.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UPIClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    bankDetails<T extends BankDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BankDetailsDefaultArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    withdrawls<T extends UPI$withdrawlsArgs<ExtArgs> = {}>(args?: Subset<T, UPI$withdrawlsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UPI model
   */
  interface UPIFieldRefs {
    readonly id: FieldRef<"UPI", 'String'>
    readonly upiId: FieldRef<"UPI", 'String'>
    readonly razorpayFundAccountID: FieldRef<"UPI", 'String'>
    readonly razorpayContactID: FieldRef<"UPI", 'String'>
    readonly bankDetailsId: FieldRef<"UPI", 'String'>
    readonly userId: FieldRef<"UPI", 'String'>
    readonly createdAt: FieldRef<"UPI", 'DateTime'>
    readonly updatedAt: FieldRef<"UPI", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * UPI findUnique
   */
  export type UPIFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * Filter, which UPI to fetch.
     */
    where: UPIWhereUniqueInput
  }

  /**
   * UPI findUniqueOrThrow
   */
  export type UPIFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * Filter, which UPI to fetch.
     */
    where: UPIWhereUniqueInput
  }

  /**
   * UPI findFirst
   */
  export type UPIFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * Filter, which UPI to fetch.
     */
    where?: UPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UPIS to fetch.
     */
    orderBy?: UPIOrderByWithRelationInput | UPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UPIS.
     */
    cursor?: UPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UPIS.
     */
    distinct?: UPIScalarFieldEnum | UPIScalarFieldEnum[]
  }

  /**
   * UPI findFirstOrThrow
   */
  export type UPIFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * Filter, which UPI to fetch.
     */
    where?: UPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UPIS to fetch.
     */
    orderBy?: UPIOrderByWithRelationInput | UPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UPIS.
     */
    cursor?: UPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UPIS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UPIS.
     */
    distinct?: UPIScalarFieldEnum | UPIScalarFieldEnum[]
  }

  /**
   * UPI findMany
   */
  export type UPIFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * Filter, which UPIS to fetch.
     */
    where?: UPIWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UPIS to fetch.
     */
    orderBy?: UPIOrderByWithRelationInput | UPIOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UPIS.
     */
    cursor?: UPIWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UPIS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UPIS.
     */
    skip?: number
    distinct?: UPIScalarFieldEnum | UPIScalarFieldEnum[]
  }

  /**
   * UPI create
   */
  export type UPICreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * The data needed to create a UPI.
     */
    data: XOR<UPICreateInput, UPIUncheckedCreateInput>
  }

  /**
   * UPI createMany
   */
  export type UPICreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UPIS.
     */
    data: UPICreateManyInput | UPICreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UPI createManyAndReturn
   */
  export type UPICreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * The data used to create many UPIS.
     */
    data: UPICreateManyInput | UPICreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UPI update
   */
  export type UPIUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * The data needed to update a UPI.
     */
    data: XOR<UPIUpdateInput, UPIUncheckedUpdateInput>
    /**
     * Choose, which UPI to update.
     */
    where: UPIWhereUniqueInput
  }

  /**
   * UPI updateMany
   */
  export type UPIUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UPIS.
     */
    data: XOR<UPIUpdateManyMutationInput, UPIUncheckedUpdateManyInput>
    /**
     * Filter which UPIS to update
     */
    where?: UPIWhereInput
    /**
     * Limit how many UPIS to update.
     */
    limit?: number
  }

  /**
   * UPI updateManyAndReturn
   */
  export type UPIUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * The data used to update UPIS.
     */
    data: XOR<UPIUpdateManyMutationInput, UPIUncheckedUpdateManyInput>
    /**
     * Filter which UPIS to update
     */
    where?: UPIWhereInput
    /**
     * Limit how many UPIS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UPI upsert
   */
  export type UPIUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * The filter to search for the UPI to update in case it exists.
     */
    where: UPIWhereUniqueInput
    /**
     * In case the UPI found by the `where` argument doesn't exist, create a new UPI with this data.
     */
    create: XOR<UPICreateInput, UPIUncheckedCreateInput>
    /**
     * In case the UPI was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UPIUpdateInput, UPIUncheckedUpdateInput>
  }

  /**
   * UPI delete
   */
  export type UPIDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
    /**
     * Filter which UPI to delete.
     */
    where: UPIWhereUniqueInput
  }

  /**
   * UPI deleteMany
   */
  export type UPIDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UPIS to delete
     */
    where?: UPIWhereInput
    /**
     * Limit how many UPIS to delete.
     */
    limit?: number
  }

  /**
   * UPI.withdrawls
   */
  export type UPI$withdrawlsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    where?: WithdrawalWhereInput
    orderBy?: WithdrawalOrderByWithRelationInput | WithdrawalOrderByWithRelationInput[]
    cursor?: WithdrawalWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WithdrawalScalarFieldEnum | WithdrawalScalarFieldEnum[]
  }

  /**
   * UPI without action
   */
  export type UPIDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UPI
     */
    select?: UPISelect<ExtArgs> | null
    /**
     * Omit specific fields from the UPI
     */
    omit?: UPIOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UPIInclude<ExtArgs> | null
  }


  /**
   * Model kycRecords
   */

  export type AggregateKycRecords = {
    _count: KycRecordsCountAggregateOutputType | null
    _min: KycRecordsMinAggregateOutputType | null
    _max: KycRecordsMaxAggregateOutputType | null
  }

  export type KycRecordsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    aadhaarNumber: string | null
    aadhaarFront: string | null
    aadhaarBack: string | null
    panCard: string | null
    selfie: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
  }

  export type KycRecordsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    aadhaarNumber: string | null
    aadhaarFront: string | null
    aadhaarBack: string | null
    panCard: string | null
    selfie: string | null
    createdAt: Date | null
    updatedAt: Date | null
    status: string | null
  }

  export type KycRecordsCountAggregateOutputType = {
    id: number
    userId: number
    socialMedia: number
    aadhaarNumber: number
    aadhaarFront: number
    aadhaarBack: number
    panCard: number
    selfie: number
    createdAt: number
    updatedAt: number
    status: number
    _all: number
  }


  export type KycRecordsMinAggregateInputType = {
    id?: true
    userId?: true
    aadhaarNumber?: true
    aadhaarFront?: true
    aadhaarBack?: true
    panCard?: true
    selfie?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type KycRecordsMaxAggregateInputType = {
    id?: true
    userId?: true
    aadhaarNumber?: true
    aadhaarFront?: true
    aadhaarBack?: true
    panCard?: true
    selfie?: true
    createdAt?: true
    updatedAt?: true
    status?: true
  }

  export type KycRecordsCountAggregateInputType = {
    id?: true
    userId?: true
    socialMedia?: true
    aadhaarNumber?: true
    aadhaarFront?: true
    aadhaarBack?: true
    panCard?: true
    selfie?: true
    createdAt?: true
    updatedAt?: true
    status?: true
    _all?: true
  }

  export type KycRecordsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which kycRecords to aggregate.
     */
    where?: kycRecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kycRecords to fetch.
     */
    orderBy?: kycRecordsOrderByWithRelationInput | kycRecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: kycRecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kycRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kycRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned kycRecords
    **/
    _count?: true | KycRecordsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: KycRecordsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: KycRecordsMaxAggregateInputType
  }

  export type GetKycRecordsAggregateType<T extends KycRecordsAggregateArgs> = {
        [P in keyof T & keyof AggregateKycRecords]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateKycRecords[P]>
      : GetScalarType<T[P], AggregateKycRecords[P]>
  }




  export type kycRecordsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: kycRecordsWhereInput
    orderBy?: kycRecordsOrderByWithAggregationInput | kycRecordsOrderByWithAggregationInput[]
    by: KycRecordsScalarFieldEnum[] | KycRecordsScalarFieldEnum
    having?: kycRecordsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: KycRecordsCountAggregateInputType | true
    _min?: KycRecordsMinAggregateInputType
    _max?: KycRecordsMaxAggregateInputType
  }

  export type KycRecordsGroupByOutputType = {
    id: string
    userId: string
    socialMedia: JsonValue
    aadhaarNumber: string
    aadhaarFront: string
    aadhaarBack: string
    panCard: string
    selfie: string
    createdAt: Date
    updatedAt: Date
    status: string
    _count: KycRecordsCountAggregateOutputType | null
    _min: KycRecordsMinAggregateOutputType | null
    _max: KycRecordsMaxAggregateOutputType | null
  }

  type GetKycRecordsGroupByPayload<T extends kycRecordsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<KycRecordsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof KycRecordsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], KycRecordsGroupByOutputType[P]>
            : GetScalarType<T[P], KycRecordsGroupByOutputType[P]>
        }
      >
    >


  export type kycRecordsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    socialMedia?: boolean
    aadhaarNumber?: boolean
    aadhaarFront?: boolean
    aadhaarBack?: boolean
    panCard?: boolean
    selfie?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kycRecords"]>

  export type kycRecordsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    socialMedia?: boolean
    aadhaarNumber?: boolean
    aadhaarFront?: boolean
    aadhaarBack?: boolean
    panCard?: boolean
    selfie?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kycRecords"]>

  export type kycRecordsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    socialMedia?: boolean
    aadhaarNumber?: boolean
    aadhaarFront?: boolean
    aadhaarBack?: boolean
    panCard?: boolean
    selfie?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["kycRecords"]>

  export type kycRecordsSelectScalar = {
    id?: boolean
    userId?: boolean
    socialMedia?: boolean
    aadhaarNumber?: boolean
    aadhaarFront?: boolean
    aadhaarBack?: boolean
    panCard?: boolean
    selfie?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    status?: boolean
  }

  export type kycRecordsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "socialMedia" | "aadhaarNumber" | "aadhaarFront" | "aadhaarBack" | "panCard" | "selfie" | "createdAt" | "updatedAt" | "status", ExtArgs["result"]["kycRecords"]>
  export type kycRecordsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type kycRecordsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type kycRecordsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $kycRecordsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "kycRecords"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      socialMedia: Prisma.JsonValue
      aadhaarNumber: string
      aadhaarFront: string
      aadhaarBack: string
      panCard: string
      selfie: string
      createdAt: Date
      updatedAt: Date
      status: string
    }, ExtArgs["result"]["kycRecords"]>
    composites: {}
  }

  type kycRecordsGetPayload<S extends boolean | null | undefined | kycRecordsDefaultArgs> = $Result.GetResult<Prisma.$kycRecordsPayload, S>

  type kycRecordsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<kycRecordsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: KycRecordsCountAggregateInputType | true
    }

  export interface kycRecordsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['kycRecords'], meta: { name: 'kycRecords' } }
    /**
     * Find zero or one KycRecords that matches the filter.
     * @param {kycRecordsFindUniqueArgs} args - Arguments to find a KycRecords
     * @example
     * // Get one KycRecords
     * const kycRecords = await prisma.kycRecords.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends kycRecordsFindUniqueArgs>(args: SelectSubset<T, kycRecordsFindUniqueArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one KycRecords that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {kycRecordsFindUniqueOrThrowArgs} args - Arguments to find a KycRecords
     * @example
     * // Get one KycRecords
     * const kycRecords = await prisma.kycRecords.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends kycRecordsFindUniqueOrThrowArgs>(args: SelectSubset<T, kycRecordsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KycRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kycRecordsFindFirstArgs} args - Arguments to find a KycRecords
     * @example
     * // Get one KycRecords
     * const kycRecords = await prisma.kycRecords.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends kycRecordsFindFirstArgs>(args?: SelectSubset<T, kycRecordsFindFirstArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first KycRecords that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kycRecordsFindFirstOrThrowArgs} args - Arguments to find a KycRecords
     * @example
     * // Get one KycRecords
     * const kycRecords = await prisma.kycRecords.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends kycRecordsFindFirstOrThrowArgs>(args?: SelectSubset<T, kycRecordsFindFirstOrThrowArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more KycRecords that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kycRecordsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all KycRecords
     * const kycRecords = await prisma.kycRecords.findMany()
     * 
     * // Get first 10 KycRecords
     * const kycRecords = await prisma.kycRecords.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const kycRecordsWithIdOnly = await prisma.kycRecords.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends kycRecordsFindManyArgs>(args?: SelectSubset<T, kycRecordsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a KycRecords.
     * @param {kycRecordsCreateArgs} args - Arguments to create a KycRecords.
     * @example
     * // Create one KycRecords
     * const KycRecords = await prisma.kycRecords.create({
     *   data: {
     *     // ... data to create a KycRecords
     *   }
     * })
     * 
     */
    create<T extends kycRecordsCreateArgs>(args: SelectSubset<T, kycRecordsCreateArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many KycRecords.
     * @param {kycRecordsCreateManyArgs} args - Arguments to create many KycRecords.
     * @example
     * // Create many KycRecords
     * const kycRecords = await prisma.kycRecords.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends kycRecordsCreateManyArgs>(args?: SelectSubset<T, kycRecordsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many KycRecords and returns the data saved in the database.
     * @param {kycRecordsCreateManyAndReturnArgs} args - Arguments to create many KycRecords.
     * @example
     * // Create many KycRecords
     * const kycRecords = await prisma.kycRecords.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many KycRecords and only return the `id`
     * const kycRecordsWithIdOnly = await prisma.kycRecords.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends kycRecordsCreateManyAndReturnArgs>(args?: SelectSubset<T, kycRecordsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a KycRecords.
     * @param {kycRecordsDeleteArgs} args - Arguments to delete one KycRecords.
     * @example
     * // Delete one KycRecords
     * const KycRecords = await prisma.kycRecords.delete({
     *   where: {
     *     // ... filter to delete one KycRecords
     *   }
     * })
     * 
     */
    delete<T extends kycRecordsDeleteArgs>(args: SelectSubset<T, kycRecordsDeleteArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one KycRecords.
     * @param {kycRecordsUpdateArgs} args - Arguments to update one KycRecords.
     * @example
     * // Update one KycRecords
     * const kycRecords = await prisma.kycRecords.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends kycRecordsUpdateArgs>(args: SelectSubset<T, kycRecordsUpdateArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more KycRecords.
     * @param {kycRecordsDeleteManyArgs} args - Arguments to filter KycRecords to delete.
     * @example
     * // Delete a few KycRecords
     * const { count } = await prisma.kycRecords.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends kycRecordsDeleteManyArgs>(args?: SelectSubset<T, kycRecordsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KycRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kycRecordsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many KycRecords
     * const kycRecords = await prisma.kycRecords.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends kycRecordsUpdateManyArgs>(args: SelectSubset<T, kycRecordsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more KycRecords and returns the data updated in the database.
     * @param {kycRecordsUpdateManyAndReturnArgs} args - Arguments to update many KycRecords.
     * @example
     * // Update many KycRecords
     * const kycRecords = await prisma.kycRecords.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more KycRecords and only return the `id`
     * const kycRecordsWithIdOnly = await prisma.kycRecords.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends kycRecordsUpdateManyAndReturnArgs>(args: SelectSubset<T, kycRecordsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one KycRecords.
     * @param {kycRecordsUpsertArgs} args - Arguments to update or create a KycRecords.
     * @example
     * // Update or create a KycRecords
     * const kycRecords = await prisma.kycRecords.upsert({
     *   create: {
     *     // ... data to create a KycRecords
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the KycRecords we want to update
     *   }
     * })
     */
    upsert<T extends kycRecordsUpsertArgs>(args: SelectSubset<T, kycRecordsUpsertArgs<ExtArgs>>): Prisma__kycRecordsClient<$Result.GetResult<Prisma.$kycRecordsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of KycRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kycRecordsCountArgs} args - Arguments to filter KycRecords to count.
     * @example
     * // Count the number of KycRecords
     * const count = await prisma.kycRecords.count({
     *   where: {
     *     // ... the filter for the KycRecords we want to count
     *   }
     * })
    **/
    count<T extends kycRecordsCountArgs>(
      args?: Subset<T, kycRecordsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], KycRecordsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a KycRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {KycRecordsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends KycRecordsAggregateArgs>(args: Subset<T, KycRecordsAggregateArgs>): Prisma.PrismaPromise<GetKycRecordsAggregateType<T>>

    /**
     * Group by KycRecords.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {kycRecordsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends kycRecordsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: kycRecordsGroupByArgs['orderBy'] }
        : { orderBy?: kycRecordsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, kycRecordsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetKycRecordsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the kycRecords model
   */
  readonly fields: kycRecordsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for kycRecords.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__kycRecordsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the kycRecords model
   */
  interface kycRecordsFieldRefs {
    readonly id: FieldRef<"kycRecords", 'String'>
    readonly userId: FieldRef<"kycRecords", 'String'>
    readonly socialMedia: FieldRef<"kycRecords", 'Json'>
    readonly aadhaarNumber: FieldRef<"kycRecords", 'String'>
    readonly aadhaarFront: FieldRef<"kycRecords", 'String'>
    readonly aadhaarBack: FieldRef<"kycRecords", 'String'>
    readonly panCard: FieldRef<"kycRecords", 'String'>
    readonly selfie: FieldRef<"kycRecords", 'String'>
    readonly createdAt: FieldRef<"kycRecords", 'DateTime'>
    readonly updatedAt: FieldRef<"kycRecords", 'DateTime'>
    readonly status: FieldRef<"kycRecords", 'String'>
  }
    

  // Custom InputTypes
  /**
   * kycRecords findUnique
   */
  export type kycRecordsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * Filter, which kycRecords to fetch.
     */
    where: kycRecordsWhereUniqueInput
  }

  /**
   * kycRecords findUniqueOrThrow
   */
  export type kycRecordsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * Filter, which kycRecords to fetch.
     */
    where: kycRecordsWhereUniqueInput
  }

  /**
   * kycRecords findFirst
   */
  export type kycRecordsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * Filter, which kycRecords to fetch.
     */
    where?: kycRecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kycRecords to fetch.
     */
    orderBy?: kycRecordsOrderByWithRelationInput | kycRecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kycRecords.
     */
    cursor?: kycRecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kycRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kycRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kycRecords.
     */
    distinct?: KycRecordsScalarFieldEnum | KycRecordsScalarFieldEnum[]
  }

  /**
   * kycRecords findFirstOrThrow
   */
  export type kycRecordsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * Filter, which kycRecords to fetch.
     */
    where?: kycRecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kycRecords to fetch.
     */
    orderBy?: kycRecordsOrderByWithRelationInput | kycRecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for kycRecords.
     */
    cursor?: kycRecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kycRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kycRecords.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of kycRecords.
     */
    distinct?: KycRecordsScalarFieldEnum | KycRecordsScalarFieldEnum[]
  }

  /**
   * kycRecords findMany
   */
  export type kycRecordsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * Filter, which kycRecords to fetch.
     */
    where?: kycRecordsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of kycRecords to fetch.
     */
    orderBy?: kycRecordsOrderByWithRelationInput | kycRecordsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing kycRecords.
     */
    cursor?: kycRecordsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` kycRecords from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` kycRecords.
     */
    skip?: number
    distinct?: KycRecordsScalarFieldEnum | KycRecordsScalarFieldEnum[]
  }

  /**
   * kycRecords create
   */
  export type kycRecordsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * The data needed to create a kycRecords.
     */
    data: XOR<kycRecordsCreateInput, kycRecordsUncheckedCreateInput>
  }

  /**
   * kycRecords createMany
   */
  export type kycRecordsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many kycRecords.
     */
    data: kycRecordsCreateManyInput | kycRecordsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * kycRecords createManyAndReturn
   */
  export type kycRecordsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * The data used to create many kycRecords.
     */
    data: kycRecordsCreateManyInput | kycRecordsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * kycRecords update
   */
  export type kycRecordsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * The data needed to update a kycRecords.
     */
    data: XOR<kycRecordsUpdateInput, kycRecordsUncheckedUpdateInput>
    /**
     * Choose, which kycRecords to update.
     */
    where: kycRecordsWhereUniqueInput
  }

  /**
   * kycRecords updateMany
   */
  export type kycRecordsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update kycRecords.
     */
    data: XOR<kycRecordsUpdateManyMutationInput, kycRecordsUncheckedUpdateManyInput>
    /**
     * Filter which kycRecords to update
     */
    where?: kycRecordsWhereInput
    /**
     * Limit how many kycRecords to update.
     */
    limit?: number
  }

  /**
   * kycRecords updateManyAndReturn
   */
  export type kycRecordsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * The data used to update kycRecords.
     */
    data: XOR<kycRecordsUpdateManyMutationInput, kycRecordsUncheckedUpdateManyInput>
    /**
     * Filter which kycRecords to update
     */
    where?: kycRecordsWhereInput
    /**
     * Limit how many kycRecords to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * kycRecords upsert
   */
  export type kycRecordsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * The filter to search for the kycRecords to update in case it exists.
     */
    where: kycRecordsWhereUniqueInput
    /**
     * In case the kycRecords found by the `where` argument doesn't exist, create a new kycRecords with this data.
     */
    create: XOR<kycRecordsCreateInput, kycRecordsUncheckedCreateInput>
    /**
     * In case the kycRecords was found with the provided `where` argument, update it with this data.
     */
    update: XOR<kycRecordsUpdateInput, kycRecordsUncheckedUpdateInput>
  }

  /**
   * kycRecords delete
   */
  export type kycRecordsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
    /**
     * Filter which kycRecords to delete.
     */
    where: kycRecordsWhereUniqueInput
  }

  /**
   * kycRecords deleteMany
   */
  export type kycRecordsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which kycRecords to delete
     */
    where?: kycRecordsWhereInput
    /**
     * Limit how many kycRecords to delete.
     */
    limit?: number
  }

  /**
   * kycRecords without action
   */
  export type kycRecordsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the kycRecords
     */
    select?: kycRecordsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the kycRecords
     */
    omit?: kycRecordsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: kycRecordsInclude<ExtArgs> | null
  }


  /**
   * Model BusinessInfo
   */

  export type AggregateBusinessInfo = {
    _count: BusinessInfoCountAggregateOutputType | null
    _min: BusinessInfoMinAggregateOutputType | null
    _max: BusinessInfoMaxAggregateOutputType | null
  }

  export type BusinessInfoMinAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    businessStructure: string | null
    gstNumber: string | null
    sebiNumber: string | null
    sebiCertificate: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BusinessInfoMaxAggregateOutputType = {
    id: string | null
    firstName: string | null
    lastName: string | null
    businessStructure: string | null
    gstNumber: string | null
    sebiNumber: string | null
    sebiCertificate: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type BusinessInfoCountAggregateOutputType = {
    id: number
    firstName: number
    lastName: number
    businessStructure: number
    gstNumber: number
    sebiNumber: number
    sebiCertificate: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type BusinessInfoMinAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    businessStructure?: true
    gstNumber?: true
    sebiNumber?: true
    sebiCertificate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BusinessInfoMaxAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    businessStructure?: true
    gstNumber?: true
    sebiNumber?: true
    sebiCertificate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type BusinessInfoCountAggregateInputType = {
    id?: true
    firstName?: true
    lastName?: true
    businessStructure?: true
    gstNumber?: true
    sebiNumber?: true
    sebiCertificate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type BusinessInfoAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessInfo to aggregate.
     */
    where?: BusinessInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessInfos to fetch.
     */
    orderBy?: BusinessInfoOrderByWithRelationInput | BusinessInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessInfos
    **/
    _count?: true | BusinessInfoCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessInfoMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessInfoMaxAggregateInputType
  }

  export type GetBusinessInfoAggregateType<T extends BusinessInfoAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessInfo]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessInfo[P]>
      : GetScalarType<T[P], AggregateBusinessInfo[P]>
  }




  export type BusinessInfoGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessInfoWhereInput
    orderBy?: BusinessInfoOrderByWithAggregationInput | BusinessInfoOrderByWithAggregationInput[]
    by: BusinessInfoScalarFieldEnum[] | BusinessInfoScalarFieldEnum
    having?: BusinessInfoScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessInfoCountAggregateInputType | true
    _min?: BusinessInfoMinAggregateInputType
    _max?: BusinessInfoMaxAggregateInputType
  }

  export type BusinessInfoGroupByOutputType = {
    id: string
    firstName: string
    lastName: string
    businessStructure: string
    gstNumber: string | null
    sebiNumber: string | null
    sebiCertificate: string | null
    userId: string
    createdAt: Date
    updatedAt: Date
    _count: BusinessInfoCountAggregateOutputType | null
    _min: BusinessInfoMinAggregateOutputType | null
    _max: BusinessInfoMaxAggregateOutputType | null
  }

  type GetBusinessInfoGroupByPayload<T extends BusinessInfoGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessInfoGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessInfoGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessInfoGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessInfoGroupByOutputType[P]>
        }
      >
    >


  export type BusinessInfoSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    businessStructure?: boolean
    gstNumber?: boolean
    sebiNumber?: boolean
    sebiCertificate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessInfo"]>

  export type BusinessInfoSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    businessStructure?: boolean
    gstNumber?: boolean
    sebiNumber?: boolean
    sebiCertificate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessInfo"]>

  export type BusinessInfoSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    businessStructure?: boolean
    gstNumber?: boolean
    sebiNumber?: boolean
    sebiCertificate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessInfo"]>

  export type BusinessInfoSelectScalar = {
    id?: boolean
    firstName?: boolean
    lastName?: boolean
    businessStructure?: boolean
    gstNumber?: boolean
    sebiNumber?: boolean
    sebiCertificate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type BusinessInfoOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "firstName" | "lastName" | "businessStructure" | "gstNumber" | "sebiNumber" | "sebiCertificate" | "userId" | "createdAt" | "updatedAt", ExtArgs["result"]["businessInfo"]>
  export type BusinessInfoInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BusinessInfoIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type BusinessInfoIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $BusinessInfoPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessInfo"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      firstName: string
      lastName: string
      businessStructure: string
      gstNumber: string | null
      sebiNumber: string | null
      sebiCertificate: string | null
      userId: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["businessInfo"]>
    composites: {}
  }

  type BusinessInfoGetPayload<S extends boolean | null | undefined | BusinessInfoDefaultArgs> = $Result.GetResult<Prisma.$BusinessInfoPayload, S>

  type BusinessInfoCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<BusinessInfoFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: BusinessInfoCountAggregateInputType | true
    }

  export interface BusinessInfoDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessInfo'], meta: { name: 'BusinessInfo' } }
    /**
     * Find zero or one BusinessInfo that matches the filter.
     * @param {BusinessInfoFindUniqueArgs} args - Arguments to find a BusinessInfo
     * @example
     * // Get one BusinessInfo
     * const businessInfo = await prisma.businessInfo.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends BusinessInfoFindUniqueArgs>(args: SelectSubset<T, BusinessInfoFindUniqueArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one BusinessInfo that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {BusinessInfoFindUniqueOrThrowArgs} args - Arguments to find a BusinessInfo
     * @example
     * // Get one BusinessInfo
     * const businessInfo = await prisma.businessInfo.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends BusinessInfoFindUniqueOrThrowArgs>(args: SelectSubset<T, BusinessInfoFindUniqueOrThrowArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessInfo that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessInfoFindFirstArgs} args - Arguments to find a BusinessInfo
     * @example
     * // Get one BusinessInfo
     * const businessInfo = await prisma.businessInfo.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends BusinessInfoFindFirstArgs>(args?: SelectSubset<T, BusinessInfoFindFirstArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first BusinessInfo that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessInfoFindFirstOrThrowArgs} args - Arguments to find a BusinessInfo
     * @example
     * // Get one BusinessInfo
     * const businessInfo = await prisma.businessInfo.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends BusinessInfoFindFirstOrThrowArgs>(args?: SelectSubset<T, BusinessInfoFindFirstOrThrowArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more BusinessInfos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessInfoFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessInfos
     * const businessInfos = await prisma.businessInfo.findMany()
     * 
     * // Get first 10 BusinessInfos
     * const businessInfos = await prisma.businessInfo.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessInfoWithIdOnly = await prisma.businessInfo.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends BusinessInfoFindManyArgs>(args?: SelectSubset<T, BusinessInfoFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a BusinessInfo.
     * @param {BusinessInfoCreateArgs} args - Arguments to create a BusinessInfo.
     * @example
     * // Create one BusinessInfo
     * const BusinessInfo = await prisma.businessInfo.create({
     *   data: {
     *     // ... data to create a BusinessInfo
     *   }
     * })
     * 
     */
    create<T extends BusinessInfoCreateArgs>(args: SelectSubset<T, BusinessInfoCreateArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many BusinessInfos.
     * @param {BusinessInfoCreateManyArgs} args - Arguments to create many BusinessInfos.
     * @example
     * // Create many BusinessInfos
     * const businessInfo = await prisma.businessInfo.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends BusinessInfoCreateManyArgs>(args?: SelectSubset<T, BusinessInfoCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessInfos and returns the data saved in the database.
     * @param {BusinessInfoCreateManyAndReturnArgs} args - Arguments to create many BusinessInfos.
     * @example
     * // Create many BusinessInfos
     * const businessInfo = await prisma.businessInfo.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessInfos and only return the `id`
     * const businessInfoWithIdOnly = await prisma.businessInfo.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends BusinessInfoCreateManyAndReturnArgs>(args?: SelectSubset<T, BusinessInfoCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a BusinessInfo.
     * @param {BusinessInfoDeleteArgs} args - Arguments to delete one BusinessInfo.
     * @example
     * // Delete one BusinessInfo
     * const BusinessInfo = await prisma.businessInfo.delete({
     *   where: {
     *     // ... filter to delete one BusinessInfo
     *   }
     * })
     * 
     */
    delete<T extends BusinessInfoDeleteArgs>(args: SelectSubset<T, BusinessInfoDeleteArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one BusinessInfo.
     * @param {BusinessInfoUpdateArgs} args - Arguments to update one BusinessInfo.
     * @example
     * // Update one BusinessInfo
     * const businessInfo = await prisma.businessInfo.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends BusinessInfoUpdateArgs>(args: SelectSubset<T, BusinessInfoUpdateArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more BusinessInfos.
     * @param {BusinessInfoDeleteManyArgs} args - Arguments to filter BusinessInfos to delete.
     * @example
     * // Delete a few BusinessInfos
     * const { count } = await prisma.businessInfo.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends BusinessInfoDeleteManyArgs>(args?: SelectSubset<T, BusinessInfoDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessInfoUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessInfos
     * const businessInfo = await prisma.businessInfo.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends BusinessInfoUpdateManyArgs>(args: SelectSubset<T, BusinessInfoUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessInfos and returns the data updated in the database.
     * @param {BusinessInfoUpdateManyAndReturnArgs} args - Arguments to update many BusinessInfos.
     * @example
     * // Update many BusinessInfos
     * const businessInfo = await prisma.businessInfo.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more BusinessInfos and only return the `id`
     * const businessInfoWithIdOnly = await prisma.businessInfo.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends BusinessInfoUpdateManyAndReturnArgs>(args: SelectSubset<T, BusinessInfoUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one BusinessInfo.
     * @param {BusinessInfoUpsertArgs} args - Arguments to update or create a BusinessInfo.
     * @example
     * // Update or create a BusinessInfo
     * const businessInfo = await prisma.businessInfo.upsert({
     *   create: {
     *     // ... data to create a BusinessInfo
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessInfo we want to update
     *   }
     * })
     */
    upsert<T extends BusinessInfoUpsertArgs>(args: SelectSubset<T, BusinessInfoUpsertArgs<ExtArgs>>): Prisma__BusinessInfoClient<$Result.GetResult<Prisma.$BusinessInfoPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of BusinessInfos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessInfoCountArgs} args - Arguments to filter BusinessInfos to count.
     * @example
     * // Count the number of BusinessInfos
     * const count = await prisma.businessInfo.count({
     *   where: {
     *     // ... the filter for the BusinessInfos we want to count
     *   }
     * })
    **/
    count<T extends BusinessInfoCountArgs>(
      args?: Subset<T, BusinessInfoCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessInfoCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessInfoAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessInfoAggregateArgs>(args: Subset<T, BusinessInfoAggregateArgs>): Prisma.PrismaPromise<GetBusinessInfoAggregateType<T>>

    /**
     * Group by BusinessInfo.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessInfoGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessInfoGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessInfoGroupByArgs['orderBy'] }
        : { orderBy?: BusinessInfoGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessInfoGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessInfoGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessInfo model
   */
  readonly fields: BusinessInfoFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessInfo.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessInfoClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the BusinessInfo model
   */
  interface BusinessInfoFieldRefs {
    readonly id: FieldRef<"BusinessInfo", 'String'>
    readonly firstName: FieldRef<"BusinessInfo", 'String'>
    readonly lastName: FieldRef<"BusinessInfo", 'String'>
    readonly businessStructure: FieldRef<"BusinessInfo", 'String'>
    readonly gstNumber: FieldRef<"BusinessInfo", 'String'>
    readonly sebiNumber: FieldRef<"BusinessInfo", 'String'>
    readonly sebiCertificate: FieldRef<"BusinessInfo", 'String'>
    readonly userId: FieldRef<"BusinessInfo", 'String'>
    readonly createdAt: FieldRef<"BusinessInfo", 'DateTime'>
    readonly updatedAt: FieldRef<"BusinessInfo", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * BusinessInfo findUnique
   */
  export type BusinessInfoFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * Filter, which BusinessInfo to fetch.
     */
    where: BusinessInfoWhereUniqueInput
  }

  /**
   * BusinessInfo findUniqueOrThrow
   */
  export type BusinessInfoFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * Filter, which BusinessInfo to fetch.
     */
    where: BusinessInfoWhereUniqueInput
  }

  /**
   * BusinessInfo findFirst
   */
  export type BusinessInfoFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * Filter, which BusinessInfo to fetch.
     */
    where?: BusinessInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessInfos to fetch.
     */
    orderBy?: BusinessInfoOrderByWithRelationInput | BusinessInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessInfos.
     */
    cursor?: BusinessInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessInfos.
     */
    distinct?: BusinessInfoScalarFieldEnum | BusinessInfoScalarFieldEnum[]
  }

  /**
   * BusinessInfo findFirstOrThrow
   */
  export type BusinessInfoFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * Filter, which BusinessInfo to fetch.
     */
    where?: BusinessInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessInfos to fetch.
     */
    orderBy?: BusinessInfoOrderByWithRelationInput | BusinessInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessInfos.
     */
    cursor?: BusinessInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessInfos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessInfos.
     */
    distinct?: BusinessInfoScalarFieldEnum | BusinessInfoScalarFieldEnum[]
  }

  /**
   * BusinessInfo findMany
   */
  export type BusinessInfoFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * Filter, which BusinessInfos to fetch.
     */
    where?: BusinessInfoWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessInfos to fetch.
     */
    orderBy?: BusinessInfoOrderByWithRelationInput | BusinessInfoOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessInfos.
     */
    cursor?: BusinessInfoWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessInfos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessInfos.
     */
    skip?: number
    distinct?: BusinessInfoScalarFieldEnum | BusinessInfoScalarFieldEnum[]
  }

  /**
   * BusinessInfo create
   */
  export type BusinessInfoCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessInfo.
     */
    data: XOR<BusinessInfoCreateInput, BusinessInfoUncheckedCreateInput>
  }

  /**
   * BusinessInfo createMany
   */
  export type BusinessInfoCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessInfos.
     */
    data: BusinessInfoCreateManyInput | BusinessInfoCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusinessInfo createManyAndReturn
   */
  export type BusinessInfoCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * The data used to create many BusinessInfos.
     */
    data: BusinessInfoCreateManyInput | BusinessInfoCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessInfo update
   */
  export type BusinessInfoUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessInfo.
     */
    data: XOR<BusinessInfoUpdateInput, BusinessInfoUncheckedUpdateInput>
    /**
     * Choose, which BusinessInfo to update.
     */
    where: BusinessInfoWhereUniqueInput
  }

  /**
   * BusinessInfo updateMany
   */
  export type BusinessInfoUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessInfos.
     */
    data: XOR<BusinessInfoUpdateManyMutationInput, BusinessInfoUncheckedUpdateManyInput>
    /**
     * Filter which BusinessInfos to update
     */
    where?: BusinessInfoWhereInput
    /**
     * Limit how many BusinessInfos to update.
     */
    limit?: number
  }

  /**
   * BusinessInfo updateManyAndReturn
   */
  export type BusinessInfoUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * The data used to update BusinessInfos.
     */
    data: XOR<BusinessInfoUpdateManyMutationInput, BusinessInfoUncheckedUpdateManyInput>
    /**
     * Filter which BusinessInfos to update
     */
    where?: BusinessInfoWhereInput
    /**
     * Limit how many BusinessInfos to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessInfo upsert
   */
  export type BusinessInfoUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessInfo to update in case it exists.
     */
    where: BusinessInfoWhereUniqueInput
    /**
     * In case the BusinessInfo found by the `where` argument doesn't exist, create a new BusinessInfo with this data.
     */
    create: XOR<BusinessInfoCreateInput, BusinessInfoUncheckedCreateInput>
    /**
     * In case the BusinessInfo was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessInfoUpdateInput, BusinessInfoUncheckedUpdateInput>
  }

  /**
   * BusinessInfo delete
   */
  export type BusinessInfoDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
    /**
     * Filter which BusinessInfo to delete.
     */
    where: BusinessInfoWhereUniqueInput
  }

  /**
   * BusinessInfo deleteMany
   */
  export type BusinessInfoDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessInfos to delete
     */
    where?: BusinessInfoWhereInput
    /**
     * Limit how many BusinessInfos to delete.
     */
    limit?: number
  }

  /**
   * BusinessInfo without action
   */
  export type BusinessInfoDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessInfo
     */
    select?: BusinessInfoSelect<ExtArgs> | null
    /**
     * Omit specific fields from the BusinessInfo
     */
    omit?: BusinessInfoOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessInfoInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    amount: number | null
  }

  export type TransactionSumAggregateOutputType = {
    amount: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: string | null
    walletId: string | null
    amount: number | null
    email: string | null
    phoneNumber: string | null
    product: string | null
    modeOfPayment: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: string | null
    walletId: string | null
    amount: number | null
    email: string | null
    phoneNumber: string | null
    product: string | null
    modeOfPayment: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    walletId: number
    amount: number
    email: number
    phoneNumber: number
    product: number
    modeOfPayment: number
    status: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    amount?: true
  }

  export type TransactionSumAggregateInputType = {
    amount?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    email?: true
    phoneNumber?: true
    product?: true
    modeOfPayment?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    email?: true
    phoneNumber?: true
    product?: true
    modeOfPayment?: true
    status?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    email?: true
    phoneNumber?: true
    product?: true
    modeOfPayment?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: string
    walletId: string
    amount: number
    email: string
    phoneNumber: string
    product: string
    modeOfPayment: string
    status: string
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    email?: boolean
    phoneNumber?: boolean
    product?: boolean
    modeOfPayment?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    email?: boolean
    phoneNumber?: boolean
    product?: boolean
    modeOfPayment?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    email?: boolean
    phoneNumber?: boolean
    product?: boolean
    modeOfPayment?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    walletId?: boolean
    amount?: boolean
    email?: boolean
    phoneNumber?: boolean
    product?: boolean
    modeOfPayment?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletId" | "amount" | "email" | "phoneNumber" | "product" | "modeOfPayment" | "status" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      wallet: Prisma.$WalletPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletId: string
      amount: number
      email: string
      phoneNumber: string
      product: string
      modeOfPayment: string
      status: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wallet<T extends WalletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WalletDefaultArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'String'>
    readonly walletId: FieldRef<"Transaction", 'String'>
    readonly amount: FieldRef<"Transaction", 'Float'>
    readonly email: FieldRef<"Transaction", 'String'>
    readonly phoneNumber: FieldRef<"Transaction", 'String'>
    readonly product: FieldRef<"Transaction", 'String'>
    readonly modeOfPayment: FieldRef<"Transaction", 'String'>
    readonly status: FieldRef<"Transaction", 'String'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model Withdrawal
   */

  export type AggregateWithdrawal = {
    _count: WithdrawalCountAggregateOutputType | null
    _avg: WithdrawalAvgAggregateOutputType | null
    _sum: WithdrawalSumAggregateOutputType | null
    _min: WithdrawalMinAggregateOutputType | null
    _max: WithdrawalMaxAggregateOutputType | null
  }

  export type WithdrawalAvgAggregateOutputType = {
    amount: number | null
  }

  export type WithdrawalSumAggregateOutputType = {
    amount: number | null
  }

  export type WithdrawalMinAggregateOutputType = {
    id: string | null
    walletId: string | null
    amount: number | null
    modeOfWithdrawal: string | null
    bankDetailsId: string | null
    upiId: string | null
    status: string | null
    razorpayPayoutID: string | null
    createdAt: Date | null
  }

  export type WithdrawalMaxAggregateOutputType = {
    id: string | null
    walletId: string | null
    amount: number | null
    modeOfWithdrawal: string | null
    bankDetailsId: string | null
    upiId: string | null
    status: string | null
    razorpayPayoutID: string | null
    createdAt: Date | null
  }

  export type WithdrawalCountAggregateOutputType = {
    id: number
    walletId: number
    amount: number
    modeOfWithdrawal: number
    bankDetailsId: number
    upiId: number
    status: number
    razorpayPayoutID: number
    createdAt: number
    _all: number
  }


  export type WithdrawalAvgAggregateInputType = {
    amount?: true
  }

  export type WithdrawalSumAggregateInputType = {
    amount?: true
  }

  export type WithdrawalMinAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    modeOfWithdrawal?: true
    bankDetailsId?: true
    upiId?: true
    status?: true
    razorpayPayoutID?: true
    createdAt?: true
  }

  export type WithdrawalMaxAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    modeOfWithdrawal?: true
    bankDetailsId?: true
    upiId?: true
    status?: true
    razorpayPayoutID?: true
    createdAt?: true
  }

  export type WithdrawalCountAggregateInputType = {
    id?: true
    walletId?: true
    amount?: true
    modeOfWithdrawal?: true
    bankDetailsId?: true
    upiId?: true
    status?: true
    razorpayPayoutID?: true
    createdAt?: true
    _all?: true
  }

  export type WithdrawalAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Withdrawal to aggregate.
     */
    where?: WithdrawalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Withdrawals to fetch.
     */
    orderBy?: WithdrawalOrderByWithRelationInput | WithdrawalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WithdrawalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Withdrawals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Withdrawals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Withdrawals
    **/
    _count?: true | WithdrawalCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WithdrawalAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WithdrawalSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WithdrawalMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WithdrawalMaxAggregateInputType
  }

  export type GetWithdrawalAggregateType<T extends WithdrawalAggregateArgs> = {
        [P in keyof T & keyof AggregateWithdrawal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWithdrawal[P]>
      : GetScalarType<T[P], AggregateWithdrawal[P]>
  }




  export type WithdrawalGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WithdrawalWhereInput
    orderBy?: WithdrawalOrderByWithAggregationInput | WithdrawalOrderByWithAggregationInput[]
    by: WithdrawalScalarFieldEnum[] | WithdrawalScalarFieldEnum
    having?: WithdrawalScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WithdrawalCountAggregateInputType | true
    _avg?: WithdrawalAvgAggregateInputType
    _sum?: WithdrawalSumAggregateInputType
    _min?: WithdrawalMinAggregateInputType
    _max?: WithdrawalMaxAggregateInputType
  }

  export type WithdrawalGroupByOutputType = {
    id: string
    walletId: string
    amount: number
    modeOfWithdrawal: string
    bankDetailsId: string
    upiId: string
    status: string
    razorpayPayoutID: string | null
    createdAt: Date
    _count: WithdrawalCountAggregateOutputType | null
    _avg: WithdrawalAvgAggregateOutputType | null
    _sum: WithdrawalSumAggregateOutputType | null
    _min: WithdrawalMinAggregateOutputType | null
    _max: WithdrawalMaxAggregateOutputType | null
  }

  type GetWithdrawalGroupByPayload<T extends WithdrawalGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WithdrawalGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WithdrawalGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WithdrawalGroupByOutputType[P]>
            : GetScalarType<T[P], WithdrawalGroupByOutputType[P]>
        }
      >
    >


  export type WithdrawalSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    modeOfWithdrawal?: boolean
    bankDetailsId?: boolean
    upiId?: boolean
    status?: boolean
    razorpayPayoutID?: boolean
    createdAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    upi?: boolean | UPIDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["withdrawal"]>

  export type WithdrawalSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    modeOfWithdrawal?: boolean
    bankDetailsId?: boolean
    upiId?: boolean
    status?: boolean
    razorpayPayoutID?: boolean
    createdAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    upi?: boolean | UPIDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["withdrawal"]>

  export type WithdrawalSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    walletId?: boolean
    amount?: boolean
    modeOfWithdrawal?: boolean
    bankDetailsId?: boolean
    upiId?: boolean
    status?: boolean
    razorpayPayoutID?: boolean
    createdAt?: boolean
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    upi?: boolean | UPIDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["withdrawal"]>

  export type WithdrawalSelectScalar = {
    id?: boolean
    walletId?: boolean
    amount?: boolean
    modeOfWithdrawal?: boolean
    bankDetailsId?: boolean
    upiId?: boolean
    status?: boolean
    razorpayPayoutID?: boolean
    createdAt?: boolean
  }

  export type WithdrawalOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "walletId" | "amount" | "modeOfWithdrawal" | "bankDetailsId" | "upiId" | "status" | "razorpayPayoutID" | "createdAt", ExtArgs["result"]["withdrawal"]>
  export type WithdrawalInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    upi?: boolean | UPIDefaultArgs<ExtArgs>
  }
  export type WithdrawalIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    upi?: boolean | UPIDefaultArgs<ExtArgs>
  }
  export type WithdrawalIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    wallet?: boolean | WalletDefaultArgs<ExtArgs>
    bankDetails?: boolean | BankDetailsDefaultArgs<ExtArgs>
    upi?: boolean | UPIDefaultArgs<ExtArgs>
  }

  export type $WithdrawalPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Withdrawal"
    objects: {
      wallet: Prisma.$WalletPayload<ExtArgs>
      bankDetails: Prisma.$BankDetailsPayload<ExtArgs>
      upi: Prisma.$UPIPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      walletId: string
      amount: number
      modeOfWithdrawal: string
      bankDetailsId: string
      upiId: string
      status: string
      razorpayPayoutID: string | null
      createdAt: Date
    }, ExtArgs["result"]["withdrawal"]>
    composites: {}
  }

  type WithdrawalGetPayload<S extends boolean | null | undefined | WithdrawalDefaultArgs> = $Result.GetResult<Prisma.$WithdrawalPayload, S>

  type WithdrawalCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WithdrawalFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WithdrawalCountAggregateInputType | true
    }

  export interface WithdrawalDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Withdrawal'], meta: { name: 'Withdrawal' } }
    /**
     * Find zero or one Withdrawal that matches the filter.
     * @param {WithdrawalFindUniqueArgs} args - Arguments to find a Withdrawal
     * @example
     * // Get one Withdrawal
     * const withdrawal = await prisma.withdrawal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WithdrawalFindUniqueArgs>(args: SelectSubset<T, WithdrawalFindUniqueArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Withdrawal that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WithdrawalFindUniqueOrThrowArgs} args - Arguments to find a Withdrawal
     * @example
     * // Get one Withdrawal
     * const withdrawal = await prisma.withdrawal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WithdrawalFindUniqueOrThrowArgs>(args: SelectSubset<T, WithdrawalFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Withdrawal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalFindFirstArgs} args - Arguments to find a Withdrawal
     * @example
     * // Get one Withdrawal
     * const withdrawal = await prisma.withdrawal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WithdrawalFindFirstArgs>(args?: SelectSubset<T, WithdrawalFindFirstArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Withdrawal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalFindFirstOrThrowArgs} args - Arguments to find a Withdrawal
     * @example
     * // Get one Withdrawal
     * const withdrawal = await prisma.withdrawal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WithdrawalFindFirstOrThrowArgs>(args?: SelectSubset<T, WithdrawalFindFirstOrThrowArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Withdrawals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Withdrawals
     * const withdrawals = await prisma.withdrawal.findMany()
     * 
     * // Get first 10 Withdrawals
     * const withdrawals = await prisma.withdrawal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const withdrawalWithIdOnly = await prisma.withdrawal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WithdrawalFindManyArgs>(args?: SelectSubset<T, WithdrawalFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Withdrawal.
     * @param {WithdrawalCreateArgs} args - Arguments to create a Withdrawal.
     * @example
     * // Create one Withdrawal
     * const Withdrawal = await prisma.withdrawal.create({
     *   data: {
     *     // ... data to create a Withdrawal
     *   }
     * })
     * 
     */
    create<T extends WithdrawalCreateArgs>(args: SelectSubset<T, WithdrawalCreateArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Withdrawals.
     * @param {WithdrawalCreateManyArgs} args - Arguments to create many Withdrawals.
     * @example
     * // Create many Withdrawals
     * const withdrawal = await prisma.withdrawal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WithdrawalCreateManyArgs>(args?: SelectSubset<T, WithdrawalCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Withdrawals and returns the data saved in the database.
     * @param {WithdrawalCreateManyAndReturnArgs} args - Arguments to create many Withdrawals.
     * @example
     * // Create many Withdrawals
     * const withdrawal = await prisma.withdrawal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Withdrawals and only return the `id`
     * const withdrawalWithIdOnly = await prisma.withdrawal.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WithdrawalCreateManyAndReturnArgs>(args?: SelectSubset<T, WithdrawalCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Withdrawal.
     * @param {WithdrawalDeleteArgs} args - Arguments to delete one Withdrawal.
     * @example
     * // Delete one Withdrawal
     * const Withdrawal = await prisma.withdrawal.delete({
     *   where: {
     *     // ... filter to delete one Withdrawal
     *   }
     * })
     * 
     */
    delete<T extends WithdrawalDeleteArgs>(args: SelectSubset<T, WithdrawalDeleteArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Withdrawal.
     * @param {WithdrawalUpdateArgs} args - Arguments to update one Withdrawal.
     * @example
     * // Update one Withdrawal
     * const withdrawal = await prisma.withdrawal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WithdrawalUpdateArgs>(args: SelectSubset<T, WithdrawalUpdateArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Withdrawals.
     * @param {WithdrawalDeleteManyArgs} args - Arguments to filter Withdrawals to delete.
     * @example
     * // Delete a few Withdrawals
     * const { count } = await prisma.withdrawal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WithdrawalDeleteManyArgs>(args?: SelectSubset<T, WithdrawalDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Withdrawals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Withdrawals
     * const withdrawal = await prisma.withdrawal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WithdrawalUpdateManyArgs>(args: SelectSubset<T, WithdrawalUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Withdrawals and returns the data updated in the database.
     * @param {WithdrawalUpdateManyAndReturnArgs} args - Arguments to update many Withdrawals.
     * @example
     * // Update many Withdrawals
     * const withdrawal = await prisma.withdrawal.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Withdrawals and only return the `id`
     * const withdrawalWithIdOnly = await prisma.withdrawal.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WithdrawalUpdateManyAndReturnArgs>(args: SelectSubset<T, WithdrawalUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Withdrawal.
     * @param {WithdrawalUpsertArgs} args - Arguments to update or create a Withdrawal.
     * @example
     * // Update or create a Withdrawal
     * const withdrawal = await prisma.withdrawal.upsert({
     *   create: {
     *     // ... data to create a Withdrawal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Withdrawal we want to update
     *   }
     * })
     */
    upsert<T extends WithdrawalUpsertArgs>(args: SelectSubset<T, WithdrawalUpsertArgs<ExtArgs>>): Prisma__WithdrawalClient<$Result.GetResult<Prisma.$WithdrawalPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Withdrawals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalCountArgs} args - Arguments to filter Withdrawals to count.
     * @example
     * // Count the number of Withdrawals
     * const count = await prisma.withdrawal.count({
     *   where: {
     *     // ... the filter for the Withdrawals we want to count
     *   }
     * })
    **/
    count<T extends WithdrawalCountArgs>(
      args?: Subset<T, WithdrawalCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WithdrawalCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Withdrawal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WithdrawalAggregateArgs>(args: Subset<T, WithdrawalAggregateArgs>): Prisma.PrismaPromise<GetWithdrawalAggregateType<T>>

    /**
     * Group by Withdrawal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WithdrawalGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WithdrawalGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WithdrawalGroupByArgs['orderBy'] }
        : { orderBy?: WithdrawalGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WithdrawalGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWithdrawalGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Withdrawal model
   */
  readonly fields: WithdrawalFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Withdrawal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WithdrawalClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    wallet<T extends WalletDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WalletDefaultArgs<ExtArgs>>): Prisma__WalletClient<$Result.GetResult<Prisma.$WalletPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    bankDetails<T extends BankDetailsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BankDetailsDefaultArgs<ExtArgs>>): Prisma__BankDetailsClient<$Result.GetResult<Prisma.$BankDetailsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    upi<T extends UPIDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UPIDefaultArgs<ExtArgs>>): Prisma__UPIClient<$Result.GetResult<Prisma.$UPIPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Withdrawal model
   */
  interface WithdrawalFieldRefs {
    readonly id: FieldRef<"Withdrawal", 'String'>
    readonly walletId: FieldRef<"Withdrawal", 'String'>
    readonly amount: FieldRef<"Withdrawal", 'Float'>
    readonly modeOfWithdrawal: FieldRef<"Withdrawal", 'String'>
    readonly bankDetailsId: FieldRef<"Withdrawal", 'String'>
    readonly upiId: FieldRef<"Withdrawal", 'String'>
    readonly status: FieldRef<"Withdrawal", 'String'>
    readonly razorpayPayoutID: FieldRef<"Withdrawal", 'String'>
    readonly createdAt: FieldRef<"Withdrawal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Withdrawal findUnique
   */
  export type WithdrawalFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * Filter, which Withdrawal to fetch.
     */
    where: WithdrawalWhereUniqueInput
  }

  /**
   * Withdrawal findUniqueOrThrow
   */
  export type WithdrawalFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * Filter, which Withdrawal to fetch.
     */
    where: WithdrawalWhereUniqueInput
  }

  /**
   * Withdrawal findFirst
   */
  export type WithdrawalFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * Filter, which Withdrawal to fetch.
     */
    where?: WithdrawalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Withdrawals to fetch.
     */
    orderBy?: WithdrawalOrderByWithRelationInput | WithdrawalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Withdrawals.
     */
    cursor?: WithdrawalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Withdrawals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Withdrawals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Withdrawals.
     */
    distinct?: WithdrawalScalarFieldEnum | WithdrawalScalarFieldEnum[]
  }

  /**
   * Withdrawal findFirstOrThrow
   */
  export type WithdrawalFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * Filter, which Withdrawal to fetch.
     */
    where?: WithdrawalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Withdrawals to fetch.
     */
    orderBy?: WithdrawalOrderByWithRelationInput | WithdrawalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Withdrawals.
     */
    cursor?: WithdrawalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Withdrawals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Withdrawals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Withdrawals.
     */
    distinct?: WithdrawalScalarFieldEnum | WithdrawalScalarFieldEnum[]
  }

  /**
   * Withdrawal findMany
   */
  export type WithdrawalFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * Filter, which Withdrawals to fetch.
     */
    where?: WithdrawalWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Withdrawals to fetch.
     */
    orderBy?: WithdrawalOrderByWithRelationInput | WithdrawalOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Withdrawals.
     */
    cursor?: WithdrawalWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Withdrawals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Withdrawals.
     */
    skip?: number
    distinct?: WithdrawalScalarFieldEnum | WithdrawalScalarFieldEnum[]
  }

  /**
   * Withdrawal create
   */
  export type WithdrawalCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * The data needed to create a Withdrawal.
     */
    data: XOR<WithdrawalCreateInput, WithdrawalUncheckedCreateInput>
  }

  /**
   * Withdrawal createMany
   */
  export type WithdrawalCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Withdrawals.
     */
    data: WithdrawalCreateManyInput | WithdrawalCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Withdrawal createManyAndReturn
   */
  export type WithdrawalCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * The data used to create many Withdrawals.
     */
    data: WithdrawalCreateManyInput | WithdrawalCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Withdrawal update
   */
  export type WithdrawalUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * The data needed to update a Withdrawal.
     */
    data: XOR<WithdrawalUpdateInput, WithdrawalUncheckedUpdateInput>
    /**
     * Choose, which Withdrawal to update.
     */
    where: WithdrawalWhereUniqueInput
  }

  /**
   * Withdrawal updateMany
   */
  export type WithdrawalUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Withdrawals.
     */
    data: XOR<WithdrawalUpdateManyMutationInput, WithdrawalUncheckedUpdateManyInput>
    /**
     * Filter which Withdrawals to update
     */
    where?: WithdrawalWhereInput
    /**
     * Limit how many Withdrawals to update.
     */
    limit?: number
  }

  /**
   * Withdrawal updateManyAndReturn
   */
  export type WithdrawalUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * The data used to update Withdrawals.
     */
    data: XOR<WithdrawalUpdateManyMutationInput, WithdrawalUncheckedUpdateManyInput>
    /**
     * Filter which Withdrawals to update
     */
    where?: WithdrawalWhereInput
    /**
     * Limit how many Withdrawals to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Withdrawal upsert
   */
  export type WithdrawalUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * The filter to search for the Withdrawal to update in case it exists.
     */
    where: WithdrawalWhereUniqueInput
    /**
     * In case the Withdrawal found by the `where` argument doesn't exist, create a new Withdrawal with this data.
     */
    create: XOR<WithdrawalCreateInput, WithdrawalUncheckedCreateInput>
    /**
     * In case the Withdrawal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WithdrawalUpdateInput, WithdrawalUncheckedUpdateInput>
  }

  /**
   * Withdrawal delete
   */
  export type WithdrawalDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
    /**
     * Filter which Withdrawal to delete.
     */
    where: WithdrawalWhereUniqueInput
  }

  /**
   * Withdrawal deleteMany
   */
  export type WithdrawalDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Withdrawals to delete
     */
    where?: WithdrawalWhereInput
    /**
     * Limit how many Withdrawals to delete.
     */
    limit?: number
  }

  /**
   * Withdrawal without action
   */
  export type WithdrawalDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Withdrawal
     */
    select?: WithdrawalSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Withdrawal
     */
    omit?: WithdrawalOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WithdrawalInclude<ExtArgs> | null
  }


  /**
   * Model Webinar
   */

  export type AggregateWebinar = {
    _count: WebinarCountAggregateOutputType | null
    _avg: WebinarAvgAggregateOutputType | null
    _sum: WebinarSumAggregateOutputType | null
    _min: WebinarMinAggregateOutputType | null
    _max: WebinarMaxAggregateOutputType | null
  }

  export type WebinarAvgAggregateOutputType = {
    quantity: number | null
    amount: number | null
  }

  export type WebinarSumAggregateOutputType = {
    quantity: number | null
    amount: number | null
  }

  export type WebinarMinAggregateOutputType = {
    id: string | null
    title: string | null
    category: string | null
    coverImage: string | null
    occurrence: string | null
    startDate: Date | null
    paymentEnabled: boolean | null
    endDate: Date | null
    isOnline: boolean | null
    venue: string | null
    isPaid: boolean | null
    quantity: number | null
    amount: number | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebinarMaxAggregateOutputType = {
    id: string | null
    title: string | null
    category: string | null
    coverImage: string | null
    occurrence: string | null
    startDate: Date | null
    paymentEnabled: boolean | null
    endDate: Date | null
    isOnline: boolean | null
    venue: string | null
    isPaid: boolean | null
    quantity: number | null
    amount: number | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type WebinarCountAggregateOutputType = {
    id: number
    title: number
    category: number
    coverImage: number
    occurrence: number
    startDate: number
    paymentEnabled: number
    endDate: number
    isOnline: number
    venue: number
    link: number
    discount: number
    isPaid: number
    quantity: number
    amount: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type WebinarAvgAggregateInputType = {
    quantity?: true
    amount?: true
  }

  export type WebinarSumAggregateInputType = {
    quantity?: true
    amount?: true
  }

  export type WebinarMinAggregateInputType = {
    id?: true
    title?: true
    category?: true
    coverImage?: true
    occurrence?: true
    startDate?: true
    paymentEnabled?: true
    endDate?: true
    isOnline?: true
    venue?: true
    isPaid?: true
    quantity?: true
    amount?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebinarMaxAggregateInputType = {
    id?: true
    title?: true
    category?: true
    coverImage?: true
    occurrence?: true
    startDate?: true
    paymentEnabled?: true
    endDate?: true
    isOnline?: true
    venue?: true
    isPaid?: true
    quantity?: true
    amount?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type WebinarCountAggregateInputType = {
    id?: true
    title?: true
    category?: true
    coverImage?: true
    occurrence?: true
    startDate?: true
    paymentEnabled?: true
    endDate?: true
    isOnline?: true
    venue?: true
    link?: true
    discount?: true
    isPaid?: true
    quantity?: true
    amount?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type WebinarAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Webinar to aggregate.
     */
    where?: WebinarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webinars to fetch.
     */
    orderBy?: WebinarOrderByWithRelationInput | WebinarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebinarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webinars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webinars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Webinars
    **/
    _count?: true | WebinarCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WebinarAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WebinarSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebinarMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebinarMaxAggregateInputType
  }

  export type GetWebinarAggregateType<T extends WebinarAggregateArgs> = {
        [P in keyof T & keyof AggregateWebinar]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebinar[P]>
      : GetScalarType<T[P], AggregateWebinar[P]>
  }




  export type WebinarGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebinarWhereInput
    orderBy?: WebinarOrderByWithAggregationInput | WebinarOrderByWithAggregationInput[]
    by: WebinarScalarFieldEnum[] | WebinarScalarFieldEnum
    having?: WebinarScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebinarCountAggregateInputType | true
    _avg?: WebinarAvgAggregateInputType
    _sum?: WebinarSumAggregateInputType
    _min?: WebinarMinAggregateInputType
    _max?: WebinarMaxAggregateInputType
  }

  export type WebinarGroupByOutputType = {
    id: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date
    paymentEnabled: boolean
    endDate: Date
    isOnline: boolean
    venue: string | null
    link: JsonValue
    discount: JsonValue | null
    isPaid: boolean
    quantity: number
    amount: number | null
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: WebinarCountAggregateOutputType | null
    _avg: WebinarAvgAggregateOutputType | null
    _sum: WebinarSumAggregateOutputType | null
    _min: WebinarMinAggregateOutputType | null
    _max: WebinarMaxAggregateOutputType | null
  }

  type GetWebinarGroupByPayload<T extends WebinarGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebinarGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebinarGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebinarGroupByOutputType[P]>
            : GetScalarType<T[P], WebinarGroupByOutputType[P]>
        }
      >
    >


  export type WebinarSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    coverImage?: boolean
    occurrence?: boolean
    startDate?: boolean
    paymentEnabled?: boolean
    endDate?: boolean
    isOnline?: boolean
    venue?: boolean
    link?: boolean
    discount?: boolean
    isPaid?: boolean
    quantity?: boolean
    amount?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tickets?: boolean | Webinar$ticketsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WebinarCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webinar"]>

  export type WebinarSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    coverImage?: boolean
    occurrence?: boolean
    startDate?: boolean
    paymentEnabled?: boolean
    endDate?: boolean
    isOnline?: boolean
    venue?: boolean
    link?: boolean
    discount?: boolean
    isPaid?: boolean
    quantity?: boolean
    amount?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webinar"]>

  export type WebinarSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    coverImage?: boolean
    occurrence?: boolean
    startDate?: boolean
    paymentEnabled?: boolean
    endDate?: boolean
    isOnline?: boolean
    venue?: boolean
    link?: boolean
    discount?: boolean
    isPaid?: boolean
    quantity?: boolean
    amount?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webinar"]>

  export type WebinarSelectScalar = {
    id?: boolean
    title?: boolean
    category?: boolean
    coverImage?: boolean
    occurrence?: boolean
    startDate?: boolean
    paymentEnabled?: boolean
    endDate?: boolean
    isOnline?: boolean
    venue?: boolean
    link?: boolean
    discount?: boolean
    isPaid?: boolean
    quantity?: boolean
    amount?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type WebinarOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "category" | "coverImage" | "occurrence" | "startDate" | "paymentEnabled" | "endDate" | "isOnline" | "venue" | "link" | "discount" | "isPaid" | "quantity" | "amount" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["webinar"]>
  export type WebinarInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tickets?: boolean | Webinar$ticketsArgs<ExtArgs>
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | WebinarCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type WebinarIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WebinarIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WebinarPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Webinar"
    objects: {
      tickets: Prisma.$WebinarTicketPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      category: string
      coverImage: string
      occurrence: string
      startDate: Date
      paymentEnabled: boolean
      endDate: Date
      isOnline: boolean
      venue: string | null
      link: Prisma.JsonValue
      discount: Prisma.JsonValue | null
      isPaid: boolean
      quantity: number
      amount: number | null
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["webinar"]>
    composites: {}
  }

  type WebinarGetPayload<S extends boolean | null | undefined | WebinarDefaultArgs> = $Result.GetResult<Prisma.$WebinarPayload, S>

  type WebinarCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebinarFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebinarCountAggregateInputType | true
    }

  export interface WebinarDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Webinar'], meta: { name: 'Webinar' } }
    /**
     * Find zero or one Webinar that matches the filter.
     * @param {WebinarFindUniqueArgs} args - Arguments to find a Webinar
     * @example
     * // Get one Webinar
     * const webinar = await prisma.webinar.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebinarFindUniqueArgs>(args: SelectSubset<T, WebinarFindUniqueArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Webinar that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebinarFindUniqueOrThrowArgs} args - Arguments to find a Webinar
     * @example
     * // Get one Webinar
     * const webinar = await prisma.webinar.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebinarFindUniqueOrThrowArgs>(args: SelectSubset<T, WebinarFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Webinar that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarFindFirstArgs} args - Arguments to find a Webinar
     * @example
     * // Get one Webinar
     * const webinar = await prisma.webinar.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebinarFindFirstArgs>(args?: SelectSubset<T, WebinarFindFirstArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Webinar that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarFindFirstOrThrowArgs} args - Arguments to find a Webinar
     * @example
     * // Get one Webinar
     * const webinar = await prisma.webinar.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebinarFindFirstOrThrowArgs>(args?: SelectSubset<T, WebinarFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Webinars that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Webinars
     * const webinars = await prisma.webinar.findMany()
     * 
     * // Get first 10 Webinars
     * const webinars = await prisma.webinar.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webinarWithIdOnly = await prisma.webinar.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebinarFindManyArgs>(args?: SelectSubset<T, WebinarFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Webinar.
     * @param {WebinarCreateArgs} args - Arguments to create a Webinar.
     * @example
     * // Create one Webinar
     * const Webinar = await prisma.webinar.create({
     *   data: {
     *     // ... data to create a Webinar
     *   }
     * })
     * 
     */
    create<T extends WebinarCreateArgs>(args: SelectSubset<T, WebinarCreateArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Webinars.
     * @param {WebinarCreateManyArgs} args - Arguments to create many Webinars.
     * @example
     * // Create many Webinars
     * const webinar = await prisma.webinar.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebinarCreateManyArgs>(args?: SelectSubset<T, WebinarCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Webinars and returns the data saved in the database.
     * @param {WebinarCreateManyAndReturnArgs} args - Arguments to create many Webinars.
     * @example
     * // Create many Webinars
     * const webinar = await prisma.webinar.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Webinars and only return the `id`
     * const webinarWithIdOnly = await prisma.webinar.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebinarCreateManyAndReturnArgs>(args?: SelectSubset<T, WebinarCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Webinar.
     * @param {WebinarDeleteArgs} args - Arguments to delete one Webinar.
     * @example
     * // Delete one Webinar
     * const Webinar = await prisma.webinar.delete({
     *   where: {
     *     // ... filter to delete one Webinar
     *   }
     * })
     * 
     */
    delete<T extends WebinarDeleteArgs>(args: SelectSubset<T, WebinarDeleteArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Webinar.
     * @param {WebinarUpdateArgs} args - Arguments to update one Webinar.
     * @example
     * // Update one Webinar
     * const webinar = await prisma.webinar.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebinarUpdateArgs>(args: SelectSubset<T, WebinarUpdateArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Webinars.
     * @param {WebinarDeleteManyArgs} args - Arguments to filter Webinars to delete.
     * @example
     * // Delete a few Webinars
     * const { count } = await prisma.webinar.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebinarDeleteManyArgs>(args?: SelectSubset<T, WebinarDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Webinars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Webinars
     * const webinar = await prisma.webinar.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebinarUpdateManyArgs>(args: SelectSubset<T, WebinarUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Webinars and returns the data updated in the database.
     * @param {WebinarUpdateManyAndReturnArgs} args - Arguments to update many Webinars.
     * @example
     * // Update many Webinars
     * const webinar = await prisma.webinar.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Webinars and only return the `id`
     * const webinarWithIdOnly = await prisma.webinar.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebinarUpdateManyAndReturnArgs>(args: SelectSubset<T, WebinarUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Webinar.
     * @param {WebinarUpsertArgs} args - Arguments to update or create a Webinar.
     * @example
     * // Update or create a Webinar
     * const webinar = await prisma.webinar.upsert({
     *   create: {
     *     // ... data to create a Webinar
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Webinar we want to update
     *   }
     * })
     */
    upsert<T extends WebinarUpsertArgs>(args: SelectSubset<T, WebinarUpsertArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Webinars.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarCountArgs} args - Arguments to filter Webinars to count.
     * @example
     * // Count the number of Webinars
     * const count = await prisma.webinar.count({
     *   where: {
     *     // ... the filter for the Webinars we want to count
     *   }
     * })
    **/
    count<T extends WebinarCountArgs>(
      args?: Subset<T, WebinarCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebinarCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Webinar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebinarAggregateArgs>(args: Subset<T, WebinarAggregateArgs>): Prisma.PrismaPromise<GetWebinarAggregateType<T>>

    /**
     * Group by Webinar.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebinarGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebinarGroupByArgs['orderBy'] }
        : { orderBy?: WebinarGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebinarGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebinarGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Webinar model
   */
  readonly fields: WebinarFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Webinar.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebinarClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    tickets<T extends Webinar$ticketsArgs<ExtArgs> = {}>(args?: Subset<T, Webinar$ticketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Webinar model
   */
  interface WebinarFieldRefs {
    readonly id: FieldRef<"Webinar", 'String'>
    readonly title: FieldRef<"Webinar", 'String'>
    readonly category: FieldRef<"Webinar", 'String'>
    readonly coverImage: FieldRef<"Webinar", 'String'>
    readonly occurrence: FieldRef<"Webinar", 'String'>
    readonly startDate: FieldRef<"Webinar", 'DateTime'>
    readonly paymentEnabled: FieldRef<"Webinar", 'Boolean'>
    readonly endDate: FieldRef<"Webinar", 'DateTime'>
    readonly isOnline: FieldRef<"Webinar", 'Boolean'>
    readonly venue: FieldRef<"Webinar", 'String'>
    readonly link: FieldRef<"Webinar", 'Json'>
    readonly discount: FieldRef<"Webinar", 'Json'>
    readonly isPaid: FieldRef<"Webinar", 'Boolean'>
    readonly quantity: FieldRef<"Webinar", 'Int'>
    readonly amount: FieldRef<"Webinar", 'Float'>
    readonly createdById: FieldRef<"Webinar", 'String'>
    readonly createdAt: FieldRef<"Webinar", 'DateTime'>
    readonly updatedAt: FieldRef<"Webinar", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Webinar findUnique
   */
  export type WebinarFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * Filter, which Webinar to fetch.
     */
    where: WebinarWhereUniqueInput
  }

  /**
   * Webinar findUniqueOrThrow
   */
  export type WebinarFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * Filter, which Webinar to fetch.
     */
    where: WebinarWhereUniqueInput
  }

  /**
   * Webinar findFirst
   */
  export type WebinarFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * Filter, which Webinar to fetch.
     */
    where?: WebinarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webinars to fetch.
     */
    orderBy?: WebinarOrderByWithRelationInput | WebinarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Webinars.
     */
    cursor?: WebinarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webinars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webinars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Webinars.
     */
    distinct?: WebinarScalarFieldEnum | WebinarScalarFieldEnum[]
  }

  /**
   * Webinar findFirstOrThrow
   */
  export type WebinarFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * Filter, which Webinar to fetch.
     */
    where?: WebinarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webinars to fetch.
     */
    orderBy?: WebinarOrderByWithRelationInput | WebinarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Webinars.
     */
    cursor?: WebinarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webinars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webinars.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Webinars.
     */
    distinct?: WebinarScalarFieldEnum | WebinarScalarFieldEnum[]
  }

  /**
   * Webinar findMany
   */
  export type WebinarFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * Filter, which Webinars to fetch.
     */
    where?: WebinarWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Webinars to fetch.
     */
    orderBy?: WebinarOrderByWithRelationInput | WebinarOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Webinars.
     */
    cursor?: WebinarWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Webinars from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Webinars.
     */
    skip?: number
    distinct?: WebinarScalarFieldEnum | WebinarScalarFieldEnum[]
  }

  /**
   * Webinar create
   */
  export type WebinarCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * The data needed to create a Webinar.
     */
    data: XOR<WebinarCreateInput, WebinarUncheckedCreateInput>
  }

  /**
   * Webinar createMany
   */
  export type WebinarCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Webinars.
     */
    data: WebinarCreateManyInput | WebinarCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Webinar createManyAndReturn
   */
  export type WebinarCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * The data used to create many Webinars.
     */
    data: WebinarCreateManyInput | WebinarCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Webinar update
   */
  export type WebinarUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * The data needed to update a Webinar.
     */
    data: XOR<WebinarUpdateInput, WebinarUncheckedUpdateInput>
    /**
     * Choose, which Webinar to update.
     */
    where: WebinarWhereUniqueInput
  }

  /**
   * Webinar updateMany
   */
  export type WebinarUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Webinars.
     */
    data: XOR<WebinarUpdateManyMutationInput, WebinarUncheckedUpdateManyInput>
    /**
     * Filter which Webinars to update
     */
    where?: WebinarWhereInput
    /**
     * Limit how many Webinars to update.
     */
    limit?: number
  }

  /**
   * Webinar updateManyAndReturn
   */
  export type WebinarUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * The data used to update Webinars.
     */
    data: XOR<WebinarUpdateManyMutationInput, WebinarUncheckedUpdateManyInput>
    /**
     * Filter which Webinars to update
     */
    where?: WebinarWhereInput
    /**
     * Limit how many Webinars to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Webinar upsert
   */
  export type WebinarUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * The filter to search for the Webinar to update in case it exists.
     */
    where: WebinarWhereUniqueInput
    /**
     * In case the Webinar found by the `where` argument doesn't exist, create a new Webinar with this data.
     */
    create: XOR<WebinarCreateInput, WebinarUncheckedCreateInput>
    /**
     * In case the Webinar was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebinarUpdateInput, WebinarUncheckedUpdateInput>
  }

  /**
   * Webinar delete
   */
  export type WebinarDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
    /**
     * Filter which Webinar to delete.
     */
    where: WebinarWhereUniqueInput
  }

  /**
   * Webinar deleteMany
   */
  export type WebinarDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Webinars to delete
     */
    where?: WebinarWhereInput
    /**
     * Limit how many Webinars to delete.
     */
    limit?: number
  }

  /**
   * Webinar.tickets
   */
  export type Webinar$ticketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    where?: WebinarTicketWhereInput
    orderBy?: WebinarTicketOrderByWithRelationInput | WebinarTicketOrderByWithRelationInput[]
    cursor?: WebinarTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: WebinarTicketScalarFieldEnum | WebinarTicketScalarFieldEnum[]
  }

  /**
   * Webinar without action
   */
  export type WebinarDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Webinar
     */
    select?: WebinarSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Webinar
     */
    omit?: WebinarOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarInclude<ExtArgs> | null
  }


  /**
   * Model WebinarTicket
   */

  export type AggregateWebinarTicket = {
    _count: WebinarTicketCountAggregateOutputType | null
    _min: WebinarTicketMinAggregateOutputType | null
    _max: WebinarTicketMaxAggregateOutputType | null
  }

  export type WebinarTicketMinAggregateOutputType = {
    id: string | null
    webinarId: string | null
    boughtById: string | null
    paymentId: string | null
    orderId: string | null
  }

  export type WebinarTicketMaxAggregateOutputType = {
    id: string | null
    webinarId: string | null
    boughtById: string | null
    paymentId: string | null
    orderId: string | null
  }

  export type WebinarTicketCountAggregateOutputType = {
    id: number
    webinarId: number
    boughtById: number
    paymentId: number
    orderId: number
    _all: number
  }


  export type WebinarTicketMinAggregateInputType = {
    id?: true
    webinarId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
  }

  export type WebinarTicketMaxAggregateInputType = {
    id?: true
    webinarId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
  }

  export type WebinarTicketCountAggregateInputType = {
    id?: true
    webinarId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
    _all?: true
  }

  export type WebinarTicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebinarTicket to aggregate.
     */
    where?: WebinarTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebinarTickets to fetch.
     */
    orderBy?: WebinarTicketOrderByWithRelationInput | WebinarTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WebinarTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebinarTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebinarTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned WebinarTickets
    **/
    _count?: true | WebinarTicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WebinarTicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WebinarTicketMaxAggregateInputType
  }

  export type GetWebinarTicketAggregateType<T extends WebinarTicketAggregateArgs> = {
        [P in keyof T & keyof AggregateWebinarTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWebinarTicket[P]>
      : GetScalarType<T[P], AggregateWebinarTicket[P]>
  }




  export type WebinarTicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: WebinarTicketWhereInput
    orderBy?: WebinarTicketOrderByWithAggregationInput | WebinarTicketOrderByWithAggregationInput[]
    by: WebinarTicketScalarFieldEnum[] | WebinarTicketScalarFieldEnum
    having?: WebinarTicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WebinarTicketCountAggregateInputType | true
    _min?: WebinarTicketMinAggregateInputType
    _max?: WebinarTicketMaxAggregateInputType
  }

  export type WebinarTicketGroupByOutputType = {
    id: string
    webinarId: string
    boughtById: string
    paymentId: string | null
    orderId: string | null
    _count: WebinarTicketCountAggregateOutputType | null
    _min: WebinarTicketMinAggregateOutputType | null
    _max: WebinarTicketMaxAggregateOutputType | null
  }

  type GetWebinarTicketGroupByPayload<T extends WebinarTicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<WebinarTicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WebinarTicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WebinarTicketGroupByOutputType[P]>
            : GetScalarType<T[P], WebinarTicketGroupByOutputType[P]>
        }
      >
    >


  export type WebinarTicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    webinarId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    webinar?: boolean | WebinarDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webinarTicket"]>

  export type WebinarTicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    webinarId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    webinar?: boolean | WebinarDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webinarTicket"]>

  export type WebinarTicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    webinarId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    webinar?: boolean | WebinarDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["webinarTicket"]>

  export type WebinarTicketSelectScalar = {
    id?: boolean
    webinarId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
  }

  export type WebinarTicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "webinarId" | "boughtById" | "paymentId" | "orderId", ExtArgs["result"]["webinarTicket"]>
  export type WebinarTicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    webinar?: boolean | WebinarDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WebinarTicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    webinar?: boolean | WebinarDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type WebinarTicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    webinar?: boolean | WebinarDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $WebinarTicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "WebinarTicket"
    objects: {
      webinar: Prisma.$WebinarPayload<ExtArgs>
      boughtBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      webinarId: string
      boughtById: string
      paymentId: string | null
      orderId: string | null
    }, ExtArgs["result"]["webinarTicket"]>
    composites: {}
  }

  type WebinarTicketGetPayload<S extends boolean | null | undefined | WebinarTicketDefaultArgs> = $Result.GetResult<Prisma.$WebinarTicketPayload, S>

  type WebinarTicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<WebinarTicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: WebinarTicketCountAggregateInputType | true
    }

  export interface WebinarTicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['WebinarTicket'], meta: { name: 'WebinarTicket' } }
    /**
     * Find zero or one WebinarTicket that matches the filter.
     * @param {WebinarTicketFindUniqueArgs} args - Arguments to find a WebinarTicket
     * @example
     * // Get one WebinarTicket
     * const webinarTicket = await prisma.webinarTicket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends WebinarTicketFindUniqueArgs>(args: SelectSubset<T, WebinarTicketFindUniqueArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one WebinarTicket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {WebinarTicketFindUniqueOrThrowArgs} args - Arguments to find a WebinarTicket
     * @example
     * // Get one WebinarTicket
     * const webinarTicket = await prisma.webinarTicket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends WebinarTicketFindUniqueOrThrowArgs>(args: SelectSubset<T, WebinarTicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebinarTicket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarTicketFindFirstArgs} args - Arguments to find a WebinarTicket
     * @example
     * // Get one WebinarTicket
     * const webinarTicket = await prisma.webinarTicket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends WebinarTicketFindFirstArgs>(args?: SelectSubset<T, WebinarTicketFindFirstArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first WebinarTicket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarTicketFindFirstOrThrowArgs} args - Arguments to find a WebinarTicket
     * @example
     * // Get one WebinarTicket
     * const webinarTicket = await prisma.webinarTicket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends WebinarTicketFindFirstOrThrowArgs>(args?: SelectSubset<T, WebinarTicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more WebinarTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarTicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all WebinarTickets
     * const webinarTickets = await prisma.webinarTicket.findMany()
     * 
     * // Get first 10 WebinarTickets
     * const webinarTickets = await prisma.webinarTicket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const webinarTicketWithIdOnly = await prisma.webinarTicket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends WebinarTicketFindManyArgs>(args?: SelectSubset<T, WebinarTicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a WebinarTicket.
     * @param {WebinarTicketCreateArgs} args - Arguments to create a WebinarTicket.
     * @example
     * // Create one WebinarTicket
     * const WebinarTicket = await prisma.webinarTicket.create({
     *   data: {
     *     // ... data to create a WebinarTicket
     *   }
     * })
     * 
     */
    create<T extends WebinarTicketCreateArgs>(args: SelectSubset<T, WebinarTicketCreateArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many WebinarTickets.
     * @param {WebinarTicketCreateManyArgs} args - Arguments to create many WebinarTickets.
     * @example
     * // Create many WebinarTickets
     * const webinarTicket = await prisma.webinarTicket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends WebinarTicketCreateManyArgs>(args?: SelectSubset<T, WebinarTicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many WebinarTickets and returns the data saved in the database.
     * @param {WebinarTicketCreateManyAndReturnArgs} args - Arguments to create many WebinarTickets.
     * @example
     * // Create many WebinarTickets
     * const webinarTicket = await prisma.webinarTicket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many WebinarTickets and only return the `id`
     * const webinarTicketWithIdOnly = await prisma.webinarTicket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends WebinarTicketCreateManyAndReturnArgs>(args?: SelectSubset<T, WebinarTicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a WebinarTicket.
     * @param {WebinarTicketDeleteArgs} args - Arguments to delete one WebinarTicket.
     * @example
     * // Delete one WebinarTicket
     * const WebinarTicket = await prisma.webinarTicket.delete({
     *   where: {
     *     // ... filter to delete one WebinarTicket
     *   }
     * })
     * 
     */
    delete<T extends WebinarTicketDeleteArgs>(args: SelectSubset<T, WebinarTicketDeleteArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one WebinarTicket.
     * @param {WebinarTicketUpdateArgs} args - Arguments to update one WebinarTicket.
     * @example
     * // Update one WebinarTicket
     * const webinarTicket = await prisma.webinarTicket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends WebinarTicketUpdateArgs>(args: SelectSubset<T, WebinarTicketUpdateArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more WebinarTickets.
     * @param {WebinarTicketDeleteManyArgs} args - Arguments to filter WebinarTickets to delete.
     * @example
     * // Delete a few WebinarTickets
     * const { count } = await prisma.webinarTicket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends WebinarTicketDeleteManyArgs>(args?: SelectSubset<T, WebinarTicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebinarTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarTicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many WebinarTickets
     * const webinarTicket = await prisma.webinarTicket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends WebinarTicketUpdateManyArgs>(args: SelectSubset<T, WebinarTicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more WebinarTickets and returns the data updated in the database.
     * @param {WebinarTicketUpdateManyAndReturnArgs} args - Arguments to update many WebinarTickets.
     * @example
     * // Update many WebinarTickets
     * const webinarTicket = await prisma.webinarTicket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more WebinarTickets and only return the `id`
     * const webinarTicketWithIdOnly = await prisma.webinarTicket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends WebinarTicketUpdateManyAndReturnArgs>(args: SelectSubset<T, WebinarTicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one WebinarTicket.
     * @param {WebinarTicketUpsertArgs} args - Arguments to update or create a WebinarTicket.
     * @example
     * // Update or create a WebinarTicket
     * const webinarTicket = await prisma.webinarTicket.upsert({
     *   create: {
     *     // ... data to create a WebinarTicket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the WebinarTicket we want to update
     *   }
     * })
     */
    upsert<T extends WebinarTicketUpsertArgs>(args: SelectSubset<T, WebinarTicketUpsertArgs<ExtArgs>>): Prisma__WebinarTicketClient<$Result.GetResult<Prisma.$WebinarTicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of WebinarTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarTicketCountArgs} args - Arguments to filter WebinarTickets to count.
     * @example
     * // Count the number of WebinarTickets
     * const count = await prisma.webinarTicket.count({
     *   where: {
     *     // ... the filter for the WebinarTickets we want to count
     *   }
     * })
    **/
    count<T extends WebinarTicketCountArgs>(
      args?: Subset<T, WebinarTicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WebinarTicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a WebinarTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarTicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WebinarTicketAggregateArgs>(args: Subset<T, WebinarTicketAggregateArgs>): Prisma.PrismaPromise<GetWebinarTicketAggregateType<T>>

    /**
     * Group by WebinarTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WebinarTicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WebinarTicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WebinarTicketGroupByArgs['orderBy'] }
        : { orderBy?: WebinarTicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WebinarTicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWebinarTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the WebinarTicket model
   */
  readonly fields: WebinarTicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for WebinarTicket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__WebinarTicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    webinar<T extends WebinarDefaultArgs<ExtArgs> = {}>(args?: Subset<T, WebinarDefaultArgs<ExtArgs>>): Prisma__WebinarClient<$Result.GetResult<Prisma.$WebinarPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    boughtBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the WebinarTicket model
   */
  interface WebinarTicketFieldRefs {
    readonly id: FieldRef<"WebinarTicket", 'String'>
    readonly webinarId: FieldRef<"WebinarTicket", 'String'>
    readonly boughtById: FieldRef<"WebinarTicket", 'String'>
    readonly paymentId: FieldRef<"WebinarTicket", 'String'>
    readonly orderId: FieldRef<"WebinarTicket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * WebinarTicket findUnique
   */
  export type WebinarTicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * Filter, which WebinarTicket to fetch.
     */
    where: WebinarTicketWhereUniqueInput
  }

  /**
   * WebinarTicket findUniqueOrThrow
   */
  export type WebinarTicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * Filter, which WebinarTicket to fetch.
     */
    where: WebinarTicketWhereUniqueInput
  }

  /**
   * WebinarTicket findFirst
   */
  export type WebinarTicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * Filter, which WebinarTicket to fetch.
     */
    where?: WebinarTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebinarTickets to fetch.
     */
    orderBy?: WebinarTicketOrderByWithRelationInput | WebinarTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebinarTickets.
     */
    cursor?: WebinarTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebinarTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebinarTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebinarTickets.
     */
    distinct?: WebinarTicketScalarFieldEnum | WebinarTicketScalarFieldEnum[]
  }

  /**
   * WebinarTicket findFirstOrThrow
   */
  export type WebinarTicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * Filter, which WebinarTicket to fetch.
     */
    where?: WebinarTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebinarTickets to fetch.
     */
    orderBy?: WebinarTicketOrderByWithRelationInput | WebinarTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for WebinarTickets.
     */
    cursor?: WebinarTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebinarTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebinarTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of WebinarTickets.
     */
    distinct?: WebinarTicketScalarFieldEnum | WebinarTicketScalarFieldEnum[]
  }

  /**
   * WebinarTicket findMany
   */
  export type WebinarTicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * Filter, which WebinarTickets to fetch.
     */
    where?: WebinarTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of WebinarTickets to fetch.
     */
    orderBy?: WebinarTicketOrderByWithRelationInput | WebinarTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing WebinarTickets.
     */
    cursor?: WebinarTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` WebinarTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` WebinarTickets.
     */
    skip?: number
    distinct?: WebinarTicketScalarFieldEnum | WebinarTicketScalarFieldEnum[]
  }

  /**
   * WebinarTicket create
   */
  export type WebinarTicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * The data needed to create a WebinarTicket.
     */
    data: XOR<WebinarTicketCreateInput, WebinarTicketUncheckedCreateInput>
  }

  /**
   * WebinarTicket createMany
   */
  export type WebinarTicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many WebinarTickets.
     */
    data: WebinarTicketCreateManyInput | WebinarTicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * WebinarTicket createManyAndReturn
   */
  export type WebinarTicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * The data used to create many WebinarTickets.
     */
    data: WebinarTicketCreateManyInput | WebinarTicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebinarTicket update
   */
  export type WebinarTicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * The data needed to update a WebinarTicket.
     */
    data: XOR<WebinarTicketUpdateInput, WebinarTicketUncheckedUpdateInput>
    /**
     * Choose, which WebinarTicket to update.
     */
    where: WebinarTicketWhereUniqueInput
  }

  /**
   * WebinarTicket updateMany
   */
  export type WebinarTicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update WebinarTickets.
     */
    data: XOR<WebinarTicketUpdateManyMutationInput, WebinarTicketUncheckedUpdateManyInput>
    /**
     * Filter which WebinarTickets to update
     */
    where?: WebinarTicketWhereInput
    /**
     * Limit how many WebinarTickets to update.
     */
    limit?: number
  }

  /**
   * WebinarTicket updateManyAndReturn
   */
  export type WebinarTicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * The data used to update WebinarTickets.
     */
    data: XOR<WebinarTicketUpdateManyMutationInput, WebinarTicketUncheckedUpdateManyInput>
    /**
     * Filter which WebinarTickets to update
     */
    where?: WebinarTicketWhereInput
    /**
     * Limit how many WebinarTickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * WebinarTicket upsert
   */
  export type WebinarTicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * The filter to search for the WebinarTicket to update in case it exists.
     */
    where: WebinarTicketWhereUniqueInput
    /**
     * In case the WebinarTicket found by the `where` argument doesn't exist, create a new WebinarTicket with this data.
     */
    create: XOR<WebinarTicketCreateInput, WebinarTicketUncheckedCreateInput>
    /**
     * In case the WebinarTicket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WebinarTicketUpdateInput, WebinarTicketUncheckedUpdateInput>
  }

  /**
   * WebinarTicket delete
   */
  export type WebinarTicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
    /**
     * Filter which WebinarTicket to delete.
     */
    where: WebinarTicketWhereUniqueInput
  }

  /**
   * WebinarTicket deleteMany
   */
  export type WebinarTicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which WebinarTickets to delete
     */
    where?: WebinarTicketWhereInput
    /**
     * Limit how many WebinarTickets to delete.
     */
    limit?: number
  }

  /**
   * WebinarTicket without action
   */
  export type WebinarTicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WebinarTicket
     */
    select?: WebinarTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the WebinarTicket
     */
    omit?: WebinarTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: WebinarTicketInclude<ExtArgs> | null
  }


  /**
   * Model Course
   */

  export type AggregateCourse = {
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  export type CourseAvgAggregateOutputType = {
    price: number | null
  }

  export type CourseSumAggregateOutputType = {
    price: number | null
  }

  export type CourseMinAggregateOutputType = {
    id: string | null
    title: string | null
    price: number | null
    validity: string | null
    startDate: Date | null
    endDate: Date | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseMaxAggregateOutputType = {
    id: string | null
    title: string | null
    price: number | null
    validity: string | null
    startDate: Date | null
    endDate: Date | null
    createdBy: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CourseCountAggregateOutputType = {
    id: number
    title: number
    price: number
    discount: number
    validity: number
    aboutThisCourse: number
    testimonials: number
    courseBenefits: number
    faqs: number
    gallery: number
    coverImage: number
    language: number
    startDate: number
    endDate: number
    createdBy: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CourseAvgAggregateInputType = {
    price?: true
  }

  export type CourseSumAggregateInputType = {
    price?: true
  }

  export type CourseMinAggregateInputType = {
    id?: true
    title?: true
    price?: true
    validity?: true
    startDate?: true
    endDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseMaxAggregateInputType = {
    id?: true
    title?: true
    price?: true
    validity?: true
    startDate?: true
    endDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CourseCountAggregateInputType = {
    id?: true
    title?: true
    price?: true
    discount?: true
    validity?: true
    aboutThisCourse?: true
    testimonials?: true
    courseBenefits?: true
    faqs?: true
    gallery?: true
    coverImage?: true
    language?: true
    startDate?: true
    endDate?: true
    createdBy?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CourseAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Course to aggregate.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Courses
    **/
    _count?: true | CourseCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CourseAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CourseSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseMaxAggregateInputType
  }

  export type GetCourseAggregateType<T extends CourseAggregateArgs> = {
        [P in keyof T & keyof AggregateCourse]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourse[P]>
      : GetScalarType<T[P], AggregateCourse[P]>
  }




  export type CourseGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseWhereInput
    orderBy?: CourseOrderByWithAggregationInput | CourseOrderByWithAggregationInput[]
    by: CourseScalarFieldEnum[] | CourseScalarFieldEnum
    having?: CourseScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseCountAggregateInputType | true
    _avg?: CourseAvgAggregateInputType
    _sum?: CourseSumAggregateInputType
    _min?: CourseMinAggregateInputType
    _max?: CourseMaxAggregateInputType
  }

  export type CourseGroupByOutputType = {
    id: string
    title: string
    price: number
    discount: JsonValue | null
    validity: string
    aboutThisCourse: JsonValue
    testimonials: JsonValue
    courseBenefits: JsonValue
    faqs: JsonValue
    gallery: JsonValue
    coverImage: JsonValue
    language: JsonValue
    startDate: Date
    endDate: Date | null
    createdBy: string
    createdAt: Date
    updatedAt: Date
    _count: CourseCountAggregateOutputType | null
    _avg: CourseAvgAggregateOutputType | null
    _sum: CourseSumAggregateOutputType | null
    _min: CourseMinAggregateOutputType | null
    _max: CourseMaxAggregateOutputType | null
  }

  type GetCourseGroupByPayload<T extends CourseGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseGroupByOutputType[P]>
            : GetScalarType<T[P], CourseGroupByOutputType[P]>
        }
      >
    >


  export type CourseSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    price?: boolean
    discount?: boolean
    validity?: boolean
    aboutThisCourse?: boolean
    testimonials?: boolean
    courseBenefits?: boolean
    faqs?: boolean
    gallery?: boolean
    coverImage?: boolean
    language?: boolean
    startDate?: boolean
    endDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | Course$productsArgs<ExtArgs>
    lessons?: boolean | Course$lessonsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    purchasedBy?: boolean | Course$purchasedByArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    price?: boolean
    discount?: boolean
    validity?: boolean
    aboutThisCourse?: boolean
    testimonials?: boolean
    courseBenefits?: boolean
    faqs?: boolean
    gallery?: boolean
    coverImage?: boolean
    language?: boolean
    startDate?: boolean
    endDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    price?: boolean
    discount?: boolean
    validity?: boolean
    aboutThisCourse?: boolean
    testimonials?: boolean
    courseBenefits?: boolean
    faqs?: boolean
    gallery?: boolean
    coverImage?: boolean
    language?: boolean
    startDate?: boolean
    endDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["course"]>

  export type CourseSelectScalar = {
    id?: boolean
    title?: boolean
    price?: boolean
    discount?: boolean
    validity?: boolean
    aboutThisCourse?: boolean
    testimonials?: boolean
    courseBenefits?: boolean
    faqs?: boolean
    gallery?: boolean
    coverImage?: boolean
    language?: boolean
    startDate?: boolean
    endDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CourseOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "price" | "discount" | "validity" | "aboutThisCourse" | "testimonials" | "courseBenefits" | "faqs" | "gallery" | "coverImage" | "language" | "startDate" | "endDate" | "createdBy" | "createdAt" | "updatedAt", ExtArgs["result"]["course"]>
  export type CourseInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | Course$productsArgs<ExtArgs>
    lessons?: boolean | Course$lessonsArgs<ExtArgs>
    creator?: boolean | UserDefaultArgs<ExtArgs>
    purchasedBy?: boolean | Course$purchasedByArgs<ExtArgs>
    _count?: boolean | CourseCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CourseIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type CourseIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CoursePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Course"
    objects: {
      products: Prisma.$CourseProductPayload<ExtArgs>[]
      lessons: Prisma.$LessonsPayload<ExtArgs>[]
      creator: Prisma.$UserPayload<ExtArgs>
      purchasedBy: Prisma.$CoursePurchasersPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      price: number
      discount: Prisma.JsonValue | null
      validity: string
      aboutThisCourse: Prisma.JsonValue
      testimonials: Prisma.JsonValue
      courseBenefits: Prisma.JsonValue
      faqs: Prisma.JsonValue
      gallery: Prisma.JsonValue
      coverImage: Prisma.JsonValue
      language: Prisma.JsonValue
      startDate: Date
      endDate: Date | null
      createdBy: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["course"]>
    composites: {}
  }

  type CourseGetPayload<S extends boolean | null | undefined | CourseDefaultArgs> = $Result.GetResult<Prisma.$CoursePayload, S>

  type CourseCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseCountAggregateInputType | true
    }

  export interface CourseDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Course'], meta: { name: 'Course' } }
    /**
     * Find zero or one Course that matches the filter.
     * @param {CourseFindUniqueArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseFindUniqueArgs>(args: SelectSubset<T, CourseFindUniqueArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Course that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseFindUniqueOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseFindFirstArgs>(args?: SelectSubset<T, CourseFindFirstArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Course that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindFirstOrThrowArgs} args - Arguments to find a Course
     * @example
     * // Get one Course
     * const course = await prisma.course.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Courses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Courses
     * const courses = await prisma.course.findMany()
     * 
     * // Get first 10 Courses
     * const courses = await prisma.course.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseWithIdOnly = await prisma.course.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseFindManyArgs>(args?: SelectSubset<T, CourseFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Course.
     * @param {CourseCreateArgs} args - Arguments to create a Course.
     * @example
     * // Create one Course
     * const Course = await prisma.course.create({
     *   data: {
     *     // ... data to create a Course
     *   }
     * })
     * 
     */
    create<T extends CourseCreateArgs>(args: SelectSubset<T, CourseCreateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Courses.
     * @param {CourseCreateManyArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseCreateManyArgs>(args?: SelectSubset<T, CourseCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Courses and returns the data saved in the database.
     * @param {CourseCreateManyAndReturnArgs} args - Arguments to create many Courses.
     * @example
     * // Create many Courses
     * const course = await prisma.course.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Course.
     * @param {CourseDeleteArgs} args - Arguments to delete one Course.
     * @example
     * // Delete one Course
     * const Course = await prisma.course.delete({
     *   where: {
     *     // ... filter to delete one Course
     *   }
     * })
     * 
     */
    delete<T extends CourseDeleteArgs>(args: SelectSubset<T, CourseDeleteArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Course.
     * @param {CourseUpdateArgs} args - Arguments to update one Course.
     * @example
     * // Update one Course
     * const course = await prisma.course.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseUpdateArgs>(args: SelectSubset<T, CourseUpdateArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Courses.
     * @param {CourseDeleteManyArgs} args - Arguments to filter Courses to delete.
     * @example
     * // Delete a few Courses
     * const { count } = await prisma.course.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseDeleteManyArgs>(args?: SelectSubset<T, CourseDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseUpdateManyArgs>(args: SelectSubset<T, CourseUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Courses and returns the data updated in the database.
     * @param {CourseUpdateManyAndReturnArgs} args - Arguments to update many Courses.
     * @example
     * // Update many Courses
     * const course = await prisma.course.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Courses and only return the `id`
     * const courseWithIdOnly = await prisma.course.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Course.
     * @param {CourseUpsertArgs} args - Arguments to update or create a Course.
     * @example
     * // Update or create a Course
     * const course = await prisma.course.upsert({
     *   create: {
     *     // ... data to create a Course
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Course we want to update
     *   }
     * })
     */
    upsert<T extends CourseUpsertArgs>(args: SelectSubset<T, CourseUpsertArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Courses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseCountArgs} args - Arguments to filter Courses to count.
     * @example
     * // Count the number of Courses
     * const count = await prisma.course.count({
     *   where: {
     *     // ... the filter for the Courses we want to count
     *   }
     * })
    **/
    count<T extends CourseCountArgs>(
      args?: Subset<T, CourseCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseAggregateArgs>(args: Subset<T, CourseAggregateArgs>): Prisma.PrismaPromise<GetCourseAggregateType<T>>

    /**
     * Group by Course.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseGroupByArgs['orderBy'] }
        : { orderBy?: CourseGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Course model
   */
  readonly fields: CourseFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Course.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends Course$productsArgs<ExtArgs> = {}>(args?: Subset<T, Course$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    lessons<T extends Course$lessonsArgs<ExtArgs> = {}>(args?: Subset<T, Course$lessonsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    purchasedBy<T extends Course$purchasedByArgs<ExtArgs> = {}>(args?: Subset<T, Course$purchasedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Course model
   */
  interface CourseFieldRefs {
    readonly id: FieldRef<"Course", 'String'>
    readonly title: FieldRef<"Course", 'String'>
    readonly price: FieldRef<"Course", 'Float'>
    readonly discount: FieldRef<"Course", 'Json'>
    readonly validity: FieldRef<"Course", 'String'>
    readonly aboutThisCourse: FieldRef<"Course", 'Json'>
    readonly testimonials: FieldRef<"Course", 'Json'>
    readonly courseBenefits: FieldRef<"Course", 'Json'>
    readonly faqs: FieldRef<"Course", 'Json'>
    readonly gallery: FieldRef<"Course", 'Json'>
    readonly coverImage: FieldRef<"Course", 'Json'>
    readonly language: FieldRef<"Course", 'Json'>
    readonly startDate: FieldRef<"Course", 'DateTime'>
    readonly endDate: FieldRef<"Course", 'DateTime'>
    readonly createdBy: FieldRef<"Course", 'String'>
    readonly createdAt: FieldRef<"Course", 'DateTime'>
    readonly updatedAt: FieldRef<"Course", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Course findUnique
   */
  export type CourseFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findUniqueOrThrow
   */
  export type CourseFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course findFirst
   */
  export type CourseFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findFirstOrThrow
   */
  export type CourseFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Course to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Courses.
     */
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course findMany
   */
  export type CourseFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter, which Courses to fetch.
     */
    where?: CourseWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Courses to fetch.
     */
    orderBy?: CourseOrderByWithRelationInput | CourseOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Courses.
     */
    cursor?: CourseWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Courses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Courses.
     */
    skip?: number
    distinct?: CourseScalarFieldEnum | CourseScalarFieldEnum[]
  }

  /**
   * Course create
   */
  export type CourseCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to create a Course.
     */
    data: XOR<CourseCreateInput, CourseUncheckedCreateInput>
  }

  /**
   * Course createMany
   */
  export type CourseCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Course createManyAndReturn
   */
  export type CourseCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to create many Courses.
     */
    data: CourseCreateManyInput | CourseCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course update
   */
  export type CourseUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The data needed to update a Course.
     */
    data: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
    /**
     * Choose, which Course to update.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course updateMany
   */
  export type CourseUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
  }

  /**
   * Course updateManyAndReturn
   */
  export type CourseUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * The data used to update Courses.
     */
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyInput>
    /**
     * Filter which Courses to update
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Course upsert
   */
  export type CourseUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * The filter to search for the Course to update in case it exists.
     */
    where: CourseWhereUniqueInput
    /**
     * In case the Course found by the `where` argument doesn't exist, create a new Course with this data.
     */
    create: XOR<CourseCreateInput, CourseUncheckedCreateInput>
    /**
     * In case the Course was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseUpdateInput, CourseUncheckedUpdateInput>
  }

  /**
   * Course delete
   */
  export type CourseDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
    /**
     * Filter which Course to delete.
     */
    where: CourseWhereUniqueInput
  }

  /**
   * Course deleteMany
   */
  export type CourseDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Courses to delete
     */
    where?: CourseWhereInput
    /**
     * Limit how many Courses to delete.
     */
    limit?: number
  }

  /**
   * Course.products
   */
  export type Course$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    where?: CourseProductWhereInput
    orderBy?: CourseProductOrderByWithRelationInput | CourseProductOrderByWithRelationInput[]
    cursor?: CourseProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CourseProductScalarFieldEnum | CourseProductScalarFieldEnum[]
  }

  /**
   * Course.lessons
   */
  export type Course$lessonsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    where?: LessonsWhereInput
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    cursor?: LessonsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Course.purchasedBy
   */
  export type Course$purchasedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    where?: CoursePurchasersWhereInput
    orderBy?: CoursePurchasersOrderByWithRelationInput | CoursePurchasersOrderByWithRelationInput[]
    cursor?: CoursePurchasersWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CoursePurchasersScalarFieldEnum | CoursePurchasersScalarFieldEnum[]
  }

  /**
   * Course without action
   */
  export type CourseDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Course
     */
    select?: CourseSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Course
     */
    omit?: CourseOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseInclude<ExtArgs> | null
  }


  /**
   * Model CourseProduct
   */

  export type AggregateCourseProduct = {
    _count: CourseProductCountAggregateOutputType | null
    _min: CourseProductMinAggregateOutputType | null
    _max: CourseProductMaxAggregateOutputType | null
  }

  export type CourseProductMinAggregateOutputType = {
    id: string | null
    title: string | null
    isActive: boolean | null
    courseId: string | null
  }

  export type CourseProductMaxAggregateOutputType = {
    id: string | null
    title: string | null
    isActive: boolean | null
    courseId: string | null
  }

  export type CourseProductCountAggregateOutputType = {
    id: number
    title: number
    isActive: number
    productMetaData: number
    courseId: number
    _all: number
  }


  export type CourseProductMinAggregateInputType = {
    id?: true
    title?: true
    isActive?: true
    courseId?: true
  }

  export type CourseProductMaxAggregateInputType = {
    id?: true
    title?: true
    isActive?: true
    courseId?: true
  }

  export type CourseProductCountAggregateInputType = {
    id?: true
    title?: true
    isActive?: true
    productMetaData?: true
    courseId?: true
    _all?: true
  }

  export type CourseProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseProduct to aggregate.
     */
    where?: CourseProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseProducts to fetch.
     */
    orderBy?: CourseProductOrderByWithRelationInput | CourseProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CourseProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CourseProducts
    **/
    _count?: true | CourseProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CourseProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CourseProductMaxAggregateInputType
  }

  export type GetCourseProductAggregateType<T extends CourseProductAggregateArgs> = {
        [P in keyof T & keyof AggregateCourseProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCourseProduct[P]>
      : GetScalarType<T[P], AggregateCourseProduct[P]>
  }




  export type CourseProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CourseProductWhereInput
    orderBy?: CourseProductOrderByWithAggregationInput | CourseProductOrderByWithAggregationInput[]
    by: CourseProductScalarFieldEnum[] | CourseProductScalarFieldEnum
    having?: CourseProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CourseProductCountAggregateInputType | true
    _min?: CourseProductMinAggregateInputType
    _max?: CourseProductMaxAggregateInputType
  }

  export type CourseProductGroupByOutputType = {
    id: string
    title: string
    isActive: boolean
    productMetaData: JsonValue
    courseId: string
    _count: CourseProductCountAggregateOutputType | null
    _min: CourseProductMinAggregateOutputType | null
    _max: CourseProductMaxAggregateOutputType | null
  }

  type GetCourseProductGroupByPayload<T extends CourseProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CourseProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CourseProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CourseProductGroupByOutputType[P]>
            : GetScalarType<T[P], CourseProductGroupByOutputType[P]>
        }
      >
    >


  export type CourseProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    isActive?: boolean
    productMetaData?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseProduct"]>

  export type CourseProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    isActive?: boolean
    productMetaData?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseProduct"]>

  export type CourseProductSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    isActive?: boolean
    productMetaData?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["courseProduct"]>

  export type CourseProductSelectScalar = {
    id?: boolean
    title?: boolean
    isActive?: boolean
    productMetaData?: boolean
    courseId?: boolean
  }

  export type CourseProductOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "isActive" | "productMetaData" | "courseId", ExtArgs["result"]["courseProduct"]>
  export type CourseProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CourseProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CourseProductIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $CourseProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CourseProduct"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      isActive: boolean
      productMetaData: Prisma.JsonValue
      courseId: string
    }, ExtArgs["result"]["courseProduct"]>
    composites: {}
  }

  type CourseProductGetPayload<S extends boolean | null | undefined | CourseProductDefaultArgs> = $Result.GetResult<Prisma.$CourseProductPayload, S>

  type CourseProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CourseProductFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CourseProductCountAggregateInputType | true
    }

  export interface CourseProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CourseProduct'], meta: { name: 'CourseProduct' } }
    /**
     * Find zero or one CourseProduct that matches the filter.
     * @param {CourseProductFindUniqueArgs} args - Arguments to find a CourseProduct
     * @example
     * // Get one CourseProduct
     * const courseProduct = await prisma.courseProduct.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CourseProductFindUniqueArgs>(args: SelectSubset<T, CourseProductFindUniqueArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CourseProduct that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CourseProductFindUniqueOrThrowArgs} args - Arguments to find a CourseProduct
     * @example
     * // Get one CourseProduct
     * const courseProduct = await prisma.courseProduct.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CourseProductFindUniqueOrThrowArgs>(args: SelectSubset<T, CourseProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseProduct that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseProductFindFirstArgs} args - Arguments to find a CourseProduct
     * @example
     * // Get one CourseProduct
     * const courseProduct = await prisma.courseProduct.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CourseProductFindFirstArgs>(args?: SelectSubset<T, CourseProductFindFirstArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CourseProduct that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseProductFindFirstOrThrowArgs} args - Arguments to find a CourseProduct
     * @example
     * // Get one CourseProduct
     * const courseProduct = await prisma.courseProduct.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CourseProductFindFirstOrThrowArgs>(args?: SelectSubset<T, CourseProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CourseProducts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CourseProducts
     * const courseProducts = await prisma.courseProduct.findMany()
     * 
     * // Get first 10 CourseProducts
     * const courseProducts = await prisma.courseProduct.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const courseProductWithIdOnly = await prisma.courseProduct.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CourseProductFindManyArgs>(args?: SelectSubset<T, CourseProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CourseProduct.
     * @param {CourseProductCreateArgs} args - Arguments to create a CourseProduct.
     * @example
     * // Create one CourseProduct
     * const CourseProduct = await prisma.courseProduct.create({
     *   data: {
     *     // ... data to create a CourseProduct
     *   }
     * })
     * 
     */
    create<T extends CourseProductCreateArgs>(args: SelectSubset<T, CourseProductCreateArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CourseProducts.
     * @param {CourseProductCreateManyArgs} args - Arguments to create many CourseProducts.
     * @example
     * // Create many CourseProducts
     * const courseProduct = await prisma.courseProduct.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CourseProductCreateManyArgs>(args?: SelectSubset<T, CourseProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CourseProducts and returns the data saved in the database.
     * @param {CourseProductCreateManyAndReturnArgs} args - Arguments to create many CourseProducts.
     * @example
     * // Create many CourseProducts
     * const courseProduct = await prisma.courseProduct.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CourseProducts and only return the `id`
     * const courseProductWithIdOnly = await prisma.courseProduct.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CourseProductCreateManyAndReturnArgs>(args?: SelectSubset<T, CourseProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CourseProduct.
     * @param {CourseProductDeleteArgs} args - Arguments to delete one CourseProduct.
     * @example
     * // Delete one CourseProduct
     * const CourseProduct = await prisma.courseProduct.delete({
     *   where: {
     *     // ... filter to delete one CourseProduct
     *   }
     * })
     * 
     */
    delete<T extends CourseProductDeleteArgs>(args: SelectSubset<T, CourseProductDeleteArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CourseProduct.
     * @param {CourseProductUpdateArgs} args - Arguments to update one CourseProduct.
     * @example
     * // Update one CourseProduct
     * const courseProduct = await prisma.courseProduct.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CourseProductUpdateArgs>(args: SelectSubset<T, CourseProductUpdateArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CourseProducts.
     * @param {CourseProductDeleteManyArgs} args - Arguments to filter CourseProducts to delete.
     * @example
     * // Delete a few CourseProducts
     * const { count } = await prisma.courseProduct.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CourseProductDeleteManyArgs>(args?: SelectSubset<T, CourseProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CourseProducts
     * const courseProduct = await prisma.courseProduct.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CourseProductUpdateManyArgs>(args: SelectSubset<T, CourseProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CourseProducts and returns the data updated in the database.
     * @param {CourseProductUpdateManyAndReturnArgs} args - Arguments to update many CourseProducts.
     * @example
     * // Update many CourseProducts
     * const courseProduct = await prisma.courseProduct.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CourseProducts and only return the `id`
     * const courseProductWithIdOnly = await prisma.courseProduct.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CourseProductUpdateManyAndReturnArgs>(args: SelectSubset<T, CourseProductUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CourseProduct.
     * @param {CourseProductUpsertArgs} args - Arguments to update or create a CourseProduct.
     * @example
     * // Update or create a CourseProduct
     * const courseProduct = await prisma.courseProduct.upsert({
     *   create: {
     *     // ... data to create a CourseProduct
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CourseProduct we want to update
     *   }
     * })
     */
    upsert<T extends CourseProductUpsertArgs>(args: SelectSubset<T, CourseProductUpsertArgs<ExtArgs>>): Prisma__CourseProductClient<$Result.GetResult<Prisma.$CourseProductPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CourseProducts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseProductCountArgs} args - Arguments to filter CourseProducts to count.
     * @example
     * // Count the number of CourseProducts
     * const count = await prisma.courseProduct.count({
     *   where: {
     *     // ... the filter for the CourseProducts we want to count
     *   }
     * })
    **/
    count<T extends CourseProductCountArgs>(
      args?: Subset<T, CourseProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CourseProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CourseProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CourseProductAggregateArgs>(args: Subset<T, CourseProductAggregateArgs>): Prisma.PrismaPromise<GetCourseProductAggregateType<T>>

    /**
     * Group by CourseProduct.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CourseProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CourseProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CourseProductGroupByArgs['orderBy'] }
        : { orderBy?: CourseProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CourseProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCourseProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CourseProduct model
   */
  readonly fields: CourseProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CourseProduct.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CourseProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CourseProduct model
   */
  interface CourseProductFieldRefs {
    readonly id: FieldRef<"CourseProduct", 'String'>
    readonly title: FieldRef<"CourseProduct", 'String'>
    readonly isActive: FieldRef<"CourseProduct", 'Boolean'>
    readonly productMetaData: FieldRef<"CourseProduct", 'Json'>
    readonly courseId: FieldRef<"CourseProduct", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CourseProduct findUnique
   */
  export type CourseProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * Filter, which CourseProduct to fetch.
     */
    where: CourseProductWhereUniqueInput
  }

  /**
   * CourseProduct findUniqueOrThrow
   */
  export type CourseProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * Filter, which CourseProduct to fetch.
     */
    where: CourseProductWhereUniqueInput
  }

  /**
   * CourseProduct findFirst
   */
  export type CourseProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * Filter, which CourseProduct to fetch.
     */
    where?: CourseProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseProducts to fetch.
     */
    orderBy?: CourseProductOrderByWithRelationInput | CourseProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseProducts.
     */
    cursor?: CourseProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseProducts.
     */
    distinct?: CourseProductScalarFieldEnum | CourseProductScalarFieldEnum[]
  }

  /**
   * CourseProduct findFirstOrThrow
   */
  export type CourseProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * Filter, which CourseProduct to fetch.
     */
    where?: CourseProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseProducts to fetch.
     */
    orderBy?: CourseProductOrderByWithRelationInput | CourseProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CourseProducts.
     */
    cursor?: CourseProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseProducts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CourseProducts.
     */
    distinct?: CourseProductScalarFieldEnum | CourseProductScalarFieldEnum[]
  }

  /**
   * CourseProduct findMany
   */
  export type CourseProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * Filter, which CourseProducts to fetch.
     */
    where?: CourseProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CourseProducts to fetch.
     */
    orderBy?: CourseProductOrderByWithRelationInput | CourseProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CourseProducts.
     */
    cursor?: CourseProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CourseProducts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CourseProducts.
     */
    skip?: number
    distinct?: CourseProductScalarFieldEnum | CourseProductScalarFieldEnum[]
  }

  /**
   * CourseProduct create
   */
  export type CourseProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * The data needed to create a CourseProduct.
     */
    data: XOR<CourseProductCreateInput, CourseProductUncheckedCreateInput>
  }

  /**
   * CourseProduct createMany
   */
  export type CourseProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CourseProducts.
     */
    data: CourseProductCreateManyInput | CourseProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CourseProduct createManyAndReturn
   */
  export type CourseProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * The data used to create many CourseProducts.
     */
    data: CourseProductCreateManyInput | CourseProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseProduct update
   */
  export type CourseProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * The data needed to update a CourseProduct.
     */
    data: XOR<CourseProductUpdateInput, CourseProductUncheckedUpdateInput>
    /**
     * Choose, which CourseProduct to update.
     */
    where: CourseProductWhereUniqueInput
  }

  /**
   * CourseProduct updateMany
   */
  export type CourseProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CourseProducts.
     */
    data: XOR<CourseProductUpdateManyMutationInput, CourseProductUncheckedUpdateManyInput>
    /**
     * Filter which CourseProducts to update
     */
    where?: CourseProductWhereInput
    /**
     * Limit how many CourseProducts to update.
     */
    limit?: number
  }

  /**
   * CourseProduct updateManyAndReturn
   */
  export type CourseProductUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * The data used to update CourseProducts.
     */
    data: XOR<CourseProductUpdateManyMutationInput, CourseProductUncheckedUpdateManyInput>
    /**
     * Filter which CourseProducts to update
     */
    where?: CourseProductWhereInput
    /**
     * Limit how many CourseProducts to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CourseProduct upsert
   */
  export type CourseProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * The filter to search for the CourseProduct to update in case it exists.
     */
    where: CourseProductWhereUniqueInput
    /**
     * In case the CourseProduct found by the `where` argument doesn't exist, create a new CourseProduct with this data.
     */
    create: XOR<CourseProductCreateInput, CourseProductUncheckedCreateInput>
    /**
     * In case the CourseProduct was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CourseProductUpdateInput, CourseProductUncheckedUpdateInput>
  }

  /**
   * CourseProduct delete
   */
  export type CourseProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
    /**
     * Filter which CourseProduct to delete.
     */
    where: CourseProductWhereUniqueInput
  }

  /**
   * CourseProduct deleteMany
   */
  export type CourseProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CourseProducts to delete
     */
    where?: CourseProductWhereInput
    /**
     * Limit how many CourseProducts to delete.
     */
    limit?: number
  }

  /**
   * CourseProduct without action
   */
  export type CourseProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CourseProduct
     */
    select?: CourseProductSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CourseProduct
     */
    omit?: CourseProductOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CourseProductInclude<ExtArgs> | null
  }


  /**
   * Model Lessons
   */

  export type AggregateLessons = {
    _count: LessonsCountAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  export type LessonsMinAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    courseId: string | null
  }

  export type LessonsMaxAggregateOutputType = {
    id: string | null
    isActive: boolean | null
    courseId: string | null
  }

  export type LessonsCountAggregateOutputType = {
    id: number
    isActive: number
    lessonData: number
    courseId: number
    _all: number
  }


  export type LessonsMinAggregateInputType = {
    id?: true
    isActive?: true
    courseId?: true
  }

  export type LessonsMaxAggregateInputType = {
    id?: true
    isActive?: true
    courseId?: true
  }

  export type LessonsCountAggregateInputType = {
    id?: true
    isActive?: true
    lessonData?: true
    courseId?: true
    _all?: true
  }

  export type LessonsAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to aggregate.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Lessons
    **/
    _count?: true | LessonsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LessonsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LessonsMaxAggregateInputType
  }

  export type GetLessonsAggregateType<T extends LessonsAggregateArgs> = {
        [P in keyof T & keyof AggregateLessons]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLessons[P]>
      : GetScalarType<T[P], AggregateLessons[P]>
  }




  export type LessonsGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LessonsWhereInput
    orderBy?: LessonsOrderByWithAggregationInput | LessonsOrderByWithAggregationInput[]
    by: LessonsScalarFieldEnum[] | LessonsScalarFieldEnum
    having?: LessonsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LessonsCountAggregateInputType | true
    _min?: LessonsMinAggregateInputType
    _max?: LessonsMaxAggregateInputType
  }

  export type LessonsGroupByOutputType = {
    id: string
    isActive: boolean
    lessonData: JsonValue
    courseId: string
    _count: LessonsCountAggregateOutputType | null
    _min: LessonsMinAggregateOutputType | null
    _max: LessonsMaxAggregateOutputType | null
  }

  type GetLessonsGroupByPayload<T extends LessonsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LessonsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LessonsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LessonsGroupByOutputType[P]>
            : GetScalarType<T[P], LessonsGroupByOutputType[P]>
        }
      >
    >


  export type LessonsSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    lessonData?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type LessonsSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    lessonData?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type LessonsSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    isActive?: boolean
    lessonData?: boolean
    courseId?: boolean
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["lessons"]>

  export type LessonsSelectScalar = {
    id?: boolean
    isActive?: boolean
    lessonData?: boolean
    courseId?: boolean
  }

  export type LessonsOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "isActive" | "lessonData" | "courseId", ExtArgs["result"]["lessons"]>
  export type LessonsInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type LessonsIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type LessonsIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $LessonsPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Lessons"
    objects: {
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      isActive: boolean
      lessonData: Prisma.JsonValue
      courseId: string
    }, ExtArgs["result"]["lessons"]>
    composites: {}
  }

  type LessonsGetPayload<S extends boolean | null | undefined | LessonsDefaultArgs> = $Result.GetResult<Prisma.$LessonsPayload, S>

  type LessonsCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LessonsFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LessonsCountAggregateInputType | true
    }

  export interface LessonsDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Lessons'], meta: { name: 'Lessons' } }
    /**
     * Find zero or one Lessons that matches the filter.
     * @param {LessonsFindUniqueArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LessonsFindUniqueArgs>(args: SelectSubset<T, LessonsFindUniqueArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Lessons that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LessonsFindUniqueOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LessonsFindUniqueOrThrowArgs>(args: SelectSubset<T, LessonsFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindFirstArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LessonsFindFirstArgs>(args?: SelectSubset<T, LessonsFindFirstArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Lessons that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindFirstOrThrowArgs} args - Arguments to find a Lessons
     * @example
     * // Get one Lessons
     * const lessons = await prisma.lessons.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LessonsFindFirstOrThrowArgs>(args?: SelectSubset<T, LessonsFindFirstOrThrowArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Lessons that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Lessons
     * const lessons = await prisma.lessons.findMany()
     * 
     * // Get first 10 Lessons
     * const lessons = await prisma.lessons.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const lessonsWithIdOnly = await prisma.lessons.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LessonsFindManyArgs>(args?: SelectSubset<T, LessonsFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Lessons.
     * @param {LessonsCreateArgs} args - Arguments to create a Lessons.
     * @example
     * // Create one Lessons
     * const Lessons = await prisma.lessons.create({
     *   data: {
     *     // ... data to create a Lessons
     *   }
     * })
     * 
     */
    create<T extends LessonsCreateArgs>(args: SelectSubset<T, LessonsCreateArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Lessons.
     * @param {LessonsCreateManyArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LessonsCreateManyArgs>(args?: SelectSubset<T, LessonsCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Lessons and returns the data saved in the database.
     * @param {LessonsCreateManyAndReturnArgs} args - Arguments to create many Lessons.
     * @example
     * // Create many Lessons
     * const lessons = await prisma.lessons.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Lessons and only return the `id`
     * const lessonsWithIdOnly = await prisma.lessons.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LessonsCreateManyAndReturnArgs>(args?: SelectSubset<T, LessonsCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Lessons.
     * @param {LessonsDeleteArgs} args - Arguments to delete one Lessons.
     * @example
     * // Delete one Lessons
     * const Lessons = await prisma.lessons.delete({
     *   where: {
     *     // ... filter to delete one Lessons
     *   }
     * })
     * 
     */
    delete<T extends LessonsDeleteArgs>(args: SelectSubset<T, LessonsDeleteArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Lessons.
     * @param {LessonsUpdateArgs} args - Arguments to update one Lessons.
     * @example
     * // Update one Lessons
     * const lessons = await prisma.lessons.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LessonsUpdateArgs>(args: SelectSubset<T, LessonsUpdateArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Lessons.
     * @param {LessonsDeleteManyArgs} args - Arguments to filter Lessons to delete.
     * @example
     * // Delete a few Lessons
     * const { count } = await prisma.lessons.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LessonsDeleteManyArgs>(args?: SelectSubset<T, LessonsDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Lessons
     * const lessons = await prisma.lessons.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LessonsUpdateManyArgs>(args: SelectSubset<T, LessonsUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Lessons and returns the data updated in the database.
     * @param {LessonsUpdateManyAndReturnArgs} args - Arguments to update many Lessons.
     * @example
     * // Update many Lessons
     * const lessons = await prisma.lessons.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Lessons and only return the `id`
     * const lessonsWithIdOnly = await prisma.lessons.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LessonsUpdateManyAndReturnArgs>(args: SelectSubset<T, LessonsUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Lessons.
     * @param {LessonsUpsertArgs} args - Arguments to update or create a Lessons.
     * @example
     * // Update or create a Lessons
     * const lessons = await prisma.lessons.upsert({
     *   create: {
     *     // ... data to create a Lessons
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Lessons we want to update
     *   }
     * })
     */
    upsert<T extends LessonsUpsertArgs>(args: SelectSubset<T, LessonsUpsertArgs<ExtArgs>>): Prisma__LessonsClient<$Result.GetResult<Prisma.$LessonsPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsCountArgs} args - Arguments to filter Lessons to count.
     * @example
     * // Count the number of Lessons
     * const count = await prisma.lessons.count({
     *   where: {
     *     // ... the filter for the Lessons we want to count
     *   }
     * })
    **/
    count<T extends LessonsCountArgs>(
      args?: Subset<T, LessonsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LessonsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LessonsAggregateArgs>(args: Subset<T, LessonsAggregateArgs>): Prisma.PrismaPromise<GetLessonsAggregateType<T>>

    /**
     * Group by Lessons.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LessonsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LessonsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LessonsGroupByArgs['orderBy'] }
        : { orderBy?: LessonsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LessonsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLessonsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Lessons model
   */
  readonly fields: LessonsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Lessons.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LessonsClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Lessons model
   */
  interface LessonsFieldRefs {
    readonly id: FieldRef<"Lessons", 'String'>
    readonly isActive: FieldRef<"Lessons", 'Boolean'>
    readonly lessonData: FieldRef<"Lessons", 'Json'>
    readonly courseId: FieldRef<"Lessons", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Lessons findUnique
   */
  export type LessonsFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons findUniqueOrThrow
   */
  export type LessonsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons findFirst
   */
  export type LessonsFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons findFirstOrThrow
   */
  export type LessonsFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Lessons.
     */
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons findMany
   */
  export type LessonsFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter, which Lessons to fetch.
     */
    where?: LessonsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Lessons to fetch.
     */
    orderBy?: LessonsOrderByWithRelationInput | LessonsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Lessons.
     */
    cursor?: LessonsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Lessons from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Lessons.
     */
    skip?: number
    distinct?: LessonsScalarFieldEnum | LessonsScalarFieldEnum[]
  }

  /**
   * Lessons create
   */
  export type LessonsCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The data needed to create a Lessons.
     */
    data: XOR<LessonsCreateInput, LessonsUncheckedCreateInput>
  }

  /**
   * Lessons createMany
   */
  export type LessonsCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Lessons.
     */
    data: LessonsCreateManyInput | LessonsCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Lessons createManyAndReturn
   */
  export type LessonsCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * The data used to create many Lessons.
     */
    data: LessonsCreateManyInput | LessonsCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lessons update
   */
  export type LessonsUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The data needed to update a Lessons.
     */
    data: XOR<LessonsUpdateInput, LessonsUncheckedUpdateInput>
    /**
     * Choose, which Lessons to update.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons updateMany
   */
  export type LessonsUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonsUpdateManyMutationInput, LessonsUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonsWhereInput
    /**
     * Limit how many Lessons to update.
     */
    limit?: number
  }

  /**
   * Lessons updateManyAndReturn
   */
  export type LessonsUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * The data used to update Lessons.
     */
    data: XOR<LessonsUpdateManyMutationInput, LessonsUncheckedUpdateManyInput>
    /**
     * Filter which Lessons to update
     */
    where?: LessonsWhereInput
    /**
     * Limit how many Lessons to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Lessons upsert
   */
  export type LessonsUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * The filter to search for the Lessons to update in case it exists.
     */
    where: LessonsWhereUniqueInput
    /**
     * In case the Lessons found by the `where` argument doesn't exist, create a new Lessons with this data.
     */
    create: XOR<LessonsCreateInput, LessonsUncheckedCreateInput>
    /**
     * In case the Lessons was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LessonsUpdateInput, LessonsUncheckedUpdateInput>
  }

  /**
   * Lessons delete
   */
  export type LessonsDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
    /**
     * Filter which Lessons to delete.
     */
    where: LessonsWhereUniqueInput
  }

  /**
   * Lessons deleteMany
   */
  export type LessonsDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Lessons to delete
     */
    where?: LessonsWhereInput
    /**
     * Limit how many Lessons to delete.
     */
    limit?: number
  }

  /**
   * Lessons without action
   */
  export type LessonsDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Lessons
     */
    select?: LessonsSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Lessons
     */
    omit?: LessonsOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LessonsInclude<ExtArgs> | null
  }


  /**
   * Model CoursePurchasers
   */

  export type AggregateCoursePurchasers = {
    _count: CoursePurchasersCountAggregateOutputType | null
    _min: CoursePurchasersMinAggregateOutputType | null
    _max: CoursePurchasersMaxAggregateOutputType | null
  }

  export type CoursePurchasersMinAggregateOutputType = {
    id: string | null
    courseId: string | null
    purchaserId: string | null
    paymentId: string | null
    orderId: string | null
    createdAt: Date | null
  }

  export type CoursePurchasersMaxAggregateOutputType = {
    id: string | null
    courseId: string | null
    purchaserId: string | null
    paymentId: string | null
    orderId: string | null
    createdAt: Date | null
  }

  export type CoursePurchasersCountAggregateOutputType = {
    id: number
    courseId: number
    purchaserId: number
    paymentId: number
    orderId: number
    createdAt: number
    _all: number
  }


  export type CoursePurchasersMinAggregateInputType = {
    id?: true
    courseId?: true
    purchaserId?: true
    paymentId?: true
    orderId?: true
    createdAt?: true
  }

  export type CoursePurchasersMaxAggregateInputType = {
    id?: true
    courseId?: true
    purchaserId?: true
    paymentId?: true
    orderId?: true
    createdAt?: true
  }

  export type CoursePurchasersCountAggregateInputType = {
    id?: true
    courseId?: true
    purchaserId?: true
    paymentId?: true
    orderId?: true
    createdAt?: true
    _all?: true
  }

  export type CoursePurchasersAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoursePurchasers to aggregate.
     */
    where?: CoursePurchasersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePurchasers to fetch.
     */
    orderBy?: CoursePurchasersOrderByWithRelationInput | CoursePurchasersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoursePurchasersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePurchasers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePurchasers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CoursePurchasers
    **/
    _count?: true | CoursePurchasersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoursePurchasersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoursePurchasersMaxAggregateInputType
  }

  export type GetCoursePurchasersAggregateType<T extends CoursePurchasersAggregateArgs> = {
        [P in keyof T & keyof AggregateCoursePurchasers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoursePurchasers[P]>
      : GetScalarType<T[P], AggregateCoursePurchasers[P]>
  }




  export type CoursePurchasersGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoursePurchasersWhereInput
    orderBy?: CoursePurchasersOrderByWithAggregationInput | CoursePurchasersOrderByWithAggregationInput[]
    by: CoursePurchasersScalarFieldEnum[] | CoursePurchasersScalarFieldEnum
    having?: CoursePurchasersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoursePurchasersCountAggregateInputType | true
    _min?: CoursePurchasersMinAggregateInputType
    _max?: CoursePurchasersMaxAggregateInputType
  }

  export type CoursePurchasersGroupByOutputType = {
    id: string
    courseId: string
    purchaserId: string
    paymentId: string
    orderId: string
    createdAt: Date
    _count: CoursePurchasersCountAggregateOutputType | null
    _min: CoursePurchasersMinAggregateOutputType | null
    _max: CoursePurchasersMaxAggregateOutputType | null
  }

  type GetCoursePurchasersGroupByPayload<T extends CoursePurchasersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoursePurchasersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoursePurchasersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoursePurchasersGroupByOutputType[P]>
            : GetScalarType<T[P], CoursePurchasersGroupByOutputType[P]>
        }
      >
    >


  export type CoursePurchasersSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    purchaserId?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
    purchaser?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coursePurchasers"]>

  export type CoursePurchasersSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    purchaserId?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
    purchaser?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coursePurchasers"]>

  export type CoursePurchasersSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    courseId?: boolean
    purchaserId?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
    purchaser?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coursePurchasers"]>

  export type CoursePurchasersSelectScalar = {
    id?: boolean
    courseId?: boolean
    purchaserId?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
  }

  export type CoursePurchasersOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "courseId" | "purchaserId" | "paymentId" | "orderId" | "createdAt", ExtArgs["result"]["coursePurchasers"]>
  export type CoursePurchasersInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaser?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CoursePurchasersIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaser?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }
  export type CoursePurchasersIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    purchaser?: boolean | UserDefaultArgs<ExtArgs>
    course?: boolean | CourseDefaultArgs<ExtArgs>
  }

  export type $CoursePurchasersPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CoursePurchasers"
    objects: {
      purchaser: Prisma.$UserPayload<ExtArgs>
      course: Prisma.$CoursePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      courseId: string
      purchaserId: string
      paymentId: string
      orderId: string
      createdAt: Date
    }, ExtArgs["result"]["coursePurchasers"]>
    composites: {}
  }

  type CoursePurchasersGetPayload<S extends boolean | null | undefined | CoursePurchasersDefaultArgs> = $Result.GetResult<Prisma.$CoursePurchasersPayload, S>

  type CoursePurchasersCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CoursePurchasersFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CoursePurchasersCountAggregateInputType | true
    }

  export interface CoursePurchasersDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CoursePurchasers'], meta: { name: 'CoursePurchasers' } }
    /**
     * Find zero or one CoursePurchasers that matches the filter.
     * @param {CoursePurchasersFindUniqueArgs} args - Arguments to find a CoursePurchasers
     * @example
     * // Get one CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CoursePurchasersFindUniqueArgs>(args: SelectSubset<T, CoursePurchasersFindUniqueArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CoursePurchasers that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CoursePurchasersFindUniqueOrThrowArgs} args - Arguments to find a CoursePurchasers
     * @example
     * // Get one CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CoursePurchasersFindUniqueOrThrowArgs>(args: SelectSubset<T, CoursePurchasersFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoursePurchasers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePurchasersFindFirstArgs} args - Arguments to find a CoursePurchasers
     * @example
     * // Get one CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CoursePurchasersFindFirstArgs>(args?: SelectSubset<T, CoursePurchasersFindFirstArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CoursePurchasers that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePurchasersFindFirstOrThrowArgs} args - Arguments to find a CoursePurchasers
     * @example
     * // Get one CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CoursePurchasersFindFirstOrThrowArgs>(args?: SelectSubset<T, CoursePurchasersFindFirstOrThrowArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CoursePurchasers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePurchasersFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.findMany()
     * 
     * // Get first 10 CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coursePurchasersWithIdOnly = await prisma.coursePurchasers.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CoursePurchasersFindManyArgs>(args?: SelectSubset<T, CoursePurchasersFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CoursePurchasers.
     * @param {CoursePurchasersCreateArgs} args - Arguments to create a CoursePurchasers.
     * @example
     * // Create one CoursePurchasers
     * const CoursePurchasers = await prisma.coursePurchasers.create({
     *   data: {
     *     // ... data to create a CoursePurchasers
     *   }
     * })
     * 
     */
    create<T extends CoursePurchasersCreateArgs>(args: SelectSubset<T, CoursePurchasersCreateArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CoursePurchasers.
     * @param {CoursePurchasersCreateManyArgs} args - Arguments to create many CoursePurchasers.
     * @example
     * // Create many CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CoursePurchasersCreateManyArgs>(args?: SelectSubset<T, CoursePurchasersCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CoursePurchasers and returns the data saved in the database.
     * @param {CoursePurchasersCreateManyAndReturnArgs} args - Arguments to create many CoursePurchasers.
     * @example
     * // Create many CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CoursePurchasers and only return the `id`
     * const coursePurchasersWithIdOnly = await prisma.coursePurchasers.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CoursePurchasersCreateManyAndReturnArgs>(args?: SelectSubset<T, CoursePurchasersCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CoursePurchasers.
     * @param {CoursePurchasersDeleteArgs} args - Arguments to delete one CoursePurchasers.
     * @example
     * // Delete one CoursePurchasers
     * const CoursePurchasers = await prisma.coursePurchasers.delete({
     *   where: {
     *     // ... filter to delete one CoursePurchasers
     *   }
     * })
     * 
     */
    delete<T extends CoursePurchasersDeleteArgs>(args: SelectSubset<T, CoursePurchasersDeleteArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CoursePurchasers.
     * @param {CoursePurchasersUpdateArgs} args - Arguments to update one CoursePurchasers.
     * @example
     * // Update one CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CoursePurchasersUpdateArgs>(args: SelectSubset<T, CoursePurchasersUpdateArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CoursePurchasers.
     * @param {CoursePurchasersDeleteManyArgs} args - Arguments to filter CoursePurchasers to delete.
     * @example
     * // Delete a few CoursePurchasers
     * const { count } = await prisma.coursePurchasers.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CoursePurchasersDeleteManyArgs>(args?: SelectSubset<T, CoursePurchasersDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoursePurchasers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePurchasersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CoursePurchasersUpdateManyArgs>(args: SelectSubset<T, CoursePurchasersUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CoursePurchasers and returns the data updated in the database.
     * @param {CoursePurchasersUpdateManyAndReturnArgs} args - Arguments to update many CoursePurchasers.
     * @example
     * // Update many CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CoursePurchasers and only return the `id`
     * const coursePurchasersWithIdOnly = await prisma.coursePurchasers.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CoursePurchasersUpdateManyAndReturnArgs>(args: SelectSubset<T, CoursePurchasersUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CoursePurchasers.
     * @param {CoursePurchasersUpsertArgs} args - Arguments to update or create a CoursePurchasers.
     * @example
     * // Update or create a CoursePurchasers
     * const coursePurchasers = await prisma.coursePurchasers.upsert({
     *   create: {
     *     // ... data to create a CoursePurchasers
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CoursePurchasers we want to update
     *   }
     * })
     */
    upsert<T extends CoursePurchasersUpsertArgs>(args: SelectSubset<T, CoursePurchasersUpsertArgs<ExtArgs>>): Prisma__CoursePurchasersClient<$Result.GetResult<Prisma.$CoursePurchasersPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CoursePurchasers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePurchasersCountArgs} args - Arguments to filter CoursePurchasers to count.
     * @example
     * // Count the number of CoursePurchasers
     * const count = await prisma.coursePurchasers.count({
     *   where: {
     *     // ... the filter for the CoursePurchasers we want to count
     *   }
     * })
    **/
    count<T extends CoursePurchasersCountArgs>(
      args?: Subset<T, CoursePurchasersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoursePurchasersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CoursePurchasers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePurchasersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoursePurchasersAggregateArgs>(args: Subset<T, CoursePurchasersAggregateArgs>): Prisma.PrismaPromise<GetCoursePurchasersAggregateType<T>>

    /**
     * Group by CoursePurchasers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoursePurchasersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoursePurchasersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoursePurchasersGroupByArgs['orderBy'] }
        : { orderBy?: CoursePurchasersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoursePurchasersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoursePurchasersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CoursePurchasers model
   */
  readonly fields: CoursePurchasersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CoursePurchasers.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoursePurchasersClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    purchaser<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    course<T extends CourseDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CourseDefaultArgs<ExtArgs>>): Prisma__CourseClient<$Result.GetResult<Prisma.$CoursePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CoursePurchasers model
   */
  interface CoursePurchasersFieldRefs {
    readonly id: FieldRef<"CoursePurchasers", 'String'>
    readonly courseId: FieldRef<"CoursePurchasers", 'String'>
    readonly purchaserId: FieldRef<"CoursePurchasers", 'String'>
    readonly paymentId: FieldRef<"CoursePurchasers", 'String'>
    readonly orderId: FieldRef<"CoursePurchasers", 'String'>
    readonly createdAt: FieldRef<"CoursePurchasers", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CoursePurchasers findUnique
   */
  export type CoursePurchasersFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * Filter, which CoursePurchasers to fetch.
     */
    where: CoursePurchasersWhereUniqueInput
  }

  /**
   * CoursePurchasers findUniqueOrThrow
   */
  export type CoursePurchasersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * Filter, which CoursePurchasers to fetch.
     */
    where: CoursePurchasersWhereUniqueInput
  }

  /**
   * CoursePurchasers findFirst
   */
  export type CoursePurchasersFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * Filter, which CoursePurchasers to fetch.
     */
    where?: CoursePurchasersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePurchasers to fetch.
     */
    orderBy?: CoursePurchasersOrderByWithRelationInput | CoursePurchasersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoursePurchasers.
     */
    cursor?: CoursePurchasersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePurchasers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePurchasers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoursePurchasers.
     */
    distinct?: CoursePurchasersScalarFieldEnum | CoursePurchasersScalarFieldEnum[]
  }

  /**
   * CoursePurchasers findFirstOrThrow
   */
  export type CoursePurchasersFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * Filter, which CoursePurchasers to fetch.
     */
    where?: CoursePurchasersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePurchasers to fetch.
     */
    orderBy?: CoursePurchasersOrderByWithRelationInput | CoursePurchasersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CoursePurchasers.
     */
    cursor?: CoursePurchasersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePurchasers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePurchasers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CoursePurchasers.
     */
    distinct?: CoursePurchasersScalarFieldEnum | CoursePurchasersScalarFieldEnum[]
  }

  /**
   * CoursePurchasers findMany
   */
  export type CoursePurchasersFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * Filter, which CoursePurchasers to fetch.
     */
    where?: CoursePurchasersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CoursePurchasers to fetch.
     */
    orderBy?: CoursePurchasersOrderByWithRelationInput | CoursePurchasersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CoursePurchasers.
     */
    cursor?: CoursePurchasersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CoursePurchasers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CoursePurchasers.
     */
    skip?: number
    distinct?: CoursePurchasersScalarFieldEnum | CoursePurchasersScalarFieldEnum[]
  }

  /**
   * CoursePurchasers create
   */
  export type CoursePurchasersCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * The data needed to create a CoursePurchasers.
     */
    data: XOR<CoursePurchasersCreateInput, CoursePurchasersUncheckedCreateInput>
  }

  /**
   * CoursePurchasers createMany
   */
  export type CoursePurchasersCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CoursePurchasers.
     */
    data: CoursePurchasersCreateManyInput | CoursePurchasersCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CoursePurchasers createManyAndReturn
   */
  export type CoursePurchasersCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * The data used to create many CoursePurchasers.
     */
    data: CoursePurchasersCreateManyInput | CoursePurchasersCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoursePurchasers update
   */
  export type CoursePurchasersUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * The data needed to update a CoursePurchasers.
     */
    data: XOR<CoursePurchasersUpdateInput, CoursePurchasersUncheckedUpdateInput>
    /**
     * Choose, which CoursePurchasers to update.
     */
    where: CoursePurchasersWhereUniqueInput
  }

  /**
   * CoursePurchasers updateMany
   */
  export type CoursePurchasersUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CoursePurchasers.
     */
    data: XOR<CoursePurchasersUpdateManyMutationInput, CoursePurchasersUncheckedUpdateManyInput>
    /**
     * Filter which CoursePurchasers to update
     */
    where?: CoursePurchasersWhereInput
    /**
     * Limit how many CoursePurchasers to update.
     */
    limit?: number
  }

  /**
   * CoursePurchasers updateManyAndReturn
   */
  export type CoursePurchasersUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * The data used to update CoursePurchasers.
     */
    data: XOR<CoursePurchasersUpdateManyMutationInput, CoursePurchasersUncheckedUpdateManyInput>
    /**
     * Filter which CoursePurchasers to update
     */
    where?: CoursePurchasersWhereInput
    /**
     * Limit how many CoursePurchasers to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CoursePurchasers upsert
   */
  export type CoursePurchasersUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * The filter to search for the CoursePurchasers to update in case it exists.
     */
    where: CoursePurchasersWhereUniqueInput
    /**
     * In case the CoursePurchasers found by the `where` argument doesn't exist, create a new CoursePurchasers with this data.
     */
    create: XOR<CoursePurchasersCreateInput, CoursePurchasersUncheckedCreateInput>
    /**
     * In case the CoursePurchasers was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoursePurchasersUpdateInput, CoursePurchasersUncheckedUpdateInput>
  }

  /**
   * CoursePurchasers delete
   */
  export type CoursePurchasersDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
    /**
     * Filter which CoursePurchasers to delete.
     */
    where: CoursePurchasersWhereUniqueInput
  }

  /**
   * CoursePurchasers deleteMany
   */
  export type CoursePurchasersDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CoursePurchasers to delete
     */
    where?: CoursePurchasersWhereInput
    /**
     * Limit how many CoursePurchasers to delete.
     */
    limit?: number
  }

  /**
   * CoursePurchasers without action
   */
  export type CoursePurchasersDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoursePurchasers
     */
    select?: CoursePurchasersSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CoursePurchasers
     */
    omit?: CoursePurchasersOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CoursePurchasersInclude<ExtArgs> | null
  }


  /**
   * Model PayingUp
   */

  export type AggregatePayingUp = {
    _count: PayingUpCountAggregateOutputType | null
    _min: PayingUpMinAggregateOutputType | null
    _max: PayingUpMaxAggregateOutputType | null
  }

  export type PayingUpMinAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PayingUpMaxAggregateOutputType = {
    id: string | null
    title: string | null
    description: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PayingUpCountAggregateOutputType = {
    id: number
    title: number
    description: number
    discount: number
    paymentDetails: number
    category: number
    testimonials: number
    faqs: number
    refundPolicies: number
    tacs: number
    coverImage: number
    files: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PayingUpMinAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PayingUpMaxAggregateInputType = {
    id?: true
    title?: true
    description?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PayingUpCountAggregateInputType = {
    id?: true
    title?: true
    description?: true
    discount?: true
    paymentDetails?: true
    category?: true
    testimonials?: true
    faqs?: true
    refundPolicies?: true
    tacs?: true
    coverImage?: true
    files?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PayingUpAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayingUp to aggregate.
     */
    where?: PayingUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUps to fetch.
     */
    orderBy?: PayingUpOrderByWithRelationInput | PayingUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayingUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayingUps
    **/
    _count?: true | PayingUpCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayingUpMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayingUpMaxAggregateInputType
  }

  export type GetPayingUpAggregateType<T extends PayingUpAggregateArgs> = {
        [P in keyof T & keyof AggregatePayingUp]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayingUp[P]>
      : GetScalarType<T[P], AggregatePayingUp[P]>
  }




  export type PayingUpGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayingUpWhereInput
    orderBy?: PayingUpOrderByWithAggregationInput | PayingUpOrderByWithAggregationInput[]
    by: PayingUpScalarFieldEnum[] | PayingUpScalarFieldEnum
    having?: PayingUpScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayingUpCountAggregateInputType | true
    _min?: PayingUpMinAggregateInputType
    _max?: PayingUpMaxAggregateInputType
  }

  export type PayingUpGroupByOutputType = {
    id: string
    title: string
    description: string
    discount: JsonValue | null
    paymentDetails: JsonValue
    category: JsonValue
    testimonials: JsonValue
    faqs: JsonValue
    refundPolicies: JsonValue
    tacs: JsonValue
    coverImage: JsonValue
    files: JsonValue
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: PayingUpCountAggregateOutputType | null
    _min: PayingUpMinAggregateOutputType | null
    _max: PayingUpMaxAggregateOutputType | null
  }

  type GetPayingUpGroupByPayload<T extends PayingUpGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayingUpGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayingUpGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayingUpGroupByOutputType[P]>
            : GetScalarType<T[P], PayingUpGroupByOutputType[P]>
        }
      >
    >


  export type PayingUpSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    discount?: boolean
    paymentDetails?: boolean
    category?: boolean
    testimonials?: boolean
    faqs?: boolean
    refundPolicies?: boolean
    tacs?: boolean
    coverImage?: boolean
    files?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    payingUpTickets?: boolean | PayingUp$payingUpTicketsArgs<ExtArgs>
    _count?: boolean | PayingUpCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payingUp"]>

  export type PayingUpSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    discount?: boolean
    paymentDetails?: boolean
    category?: boolean
    testimonials?: boolean
    faqs?: boolean
    refundPolicies?: boolean
    tacs?: boolean
    coverImage?: boolean
    files?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payingUp"]>

  export type PayingUpSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    description?: boolean
    discount?: boolean
    paymentDetails?: boolean
    category?: boolean
    testimonials?: boolean
    faqs?: boolean
    refundPolicies?: boolean
    tacs?: boolean
    coverImage?: boolean
    files?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payingUp"]>

  export type PayingUpSelectScalar = {
    id?: boolean
    title?: boolean
    description?: boolean
    discount?: boolean
    paymentDetails?: boolean
    category?: boolean
    testimonials?: boolean
    faqs?: boolean
    refundPolicies?: boolean
    tacs?: boolean
    coverImage?: boolean
    files?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PayingUpOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "description" | "discount" | "paymentDetails" | "category" | "testimonials" | "faqs" | "refundPolicies" | "tacs" | "coverImage" | "files" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["payingUp"]>
  export type PayingUpInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    payingUpTickets?: boolean | PayingUp$payingUpTicketsArgs<ExtArgs>
    _count?: boolean | PayingUpCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PayingUpIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PayingUpIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PayingUpPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayingUp"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      payingUpTickets: Prisma.$PayingUpTicketPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      description: string
      discount: Prisma.JsonValue | null
      paymentDetails: Prisma.JsonValue
      category: Prisma.JsonValue
      testimonials: Prisma.JsonValue
      faqs: Prisma.JsonValue
      refundPolicies: Prisma.JsonValue
      tacs: Prisma.JsonValue
      coverImage: Prisma.JsonValue
      files: Prisma.JsonValue
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["payingUp"]>
    composites: {}
  }

  type PayingUpGetPayload<S extends boolean | null | undefined | PayingUpDefaultArgs> = $Result.GetResult<Prisma.$PayingUpPayload, S>

  type PayingUpCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayingUpFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayingUpCountAggregateInputType | true
    }

  export interface PayingUpDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayingUp'], meta: { name: 'PayingUp' } }
    /**
     * Find zero or one PayingUp that matches the filter.
     * @param {PayingUpFindUniqueArgs} args - Arguments to find a PayingUp
     * @example
     * // Get one PayingUp
     * const payingUp = await prisma.payingUp.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayingUpFindUniqueArgs>(args: SelectSubset<T, PayingUpFindUniqueArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayingUp that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayingUpFindUniqueOrThrowArgs} args - Arguments to find a PayingUp
     * @example
     * // Get one PayingUp
     * const payingUp = await prisma.payingUp.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayingUpFindUniqueOrThrowArgs>(args: SelectSubset<T, PayingUpFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayingUp that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpFindFirstArgs} args - Arguments to find a PayingUp
     * @example
     * // Get one PayingUp
     * const payingUp = await prisma.payingUp.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayingUpFindFirstArgs>(args?: SelectSubset<T, PayingUpFindFirstArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayingUp that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpFindFirstOrThrowArgs} args - Arguments to find a PayingUp
     * @example
     * // Get one PayingUp
     * const payingUp = await prisma.payingUp.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayingUpFindFirstOrThrowArgs>(args?: SelectSubset<T, PayingUpFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayingUps that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayingUps
     * const payingUps = await prisma.payingUp.findMany()
     * 
     * // Get first 10 PayingUps
     * const payingUps = await prisma.payingUp.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payingUpWithIdOnly = await prisma.payingUp.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayingUpFindManyArgs>(args?: SelectSubset<T, PayingUpFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayingUp.
     * @param {PayingUpCreateArgs} args - Arguments to create a PayingUp.
     * @example
     * // Create one PayingUp
     * const PayingUp = await prisma.payingUp.create({
     *   data: {
     *     // ... data to create a PayingUp
     *   }
     * })
     * 
     */
    create<T extends PayingUpCreateArgs>(args: SelectSubset<T, PayingUpCreateArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayingUps.
     * @param {PayingUpCreateManyArgs} args - Arguments to create many PayingUps.
     * @example
     * // Create many PayingUps
     * const payingUp = await prisma.payingUp.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayingUpCreateManyArgs>(args?: SelectSubset<T, PayingUpCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayingUps and returns the data saved in the database.
     * @param {PayingUpCreateManyAndReturnArgs} args - Arguments to create many PayingUps.
     * @example
     * // Create many PayingUps
     * const payingUp = await prisma.payingUp.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayingUps and only return the `id`
     * const payingUpWithIdOnly = await prisma.payingUp.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayingUpCreateManyAndReturnArgs>(args?: SelectSubset<T, PayingUpCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayingUp.
     * @param {PayingUpDeleteArgs} args - Arguments to delete one PayingUp.
     * @example
     * // Delete one PayingUp
     * const PayingUp = await prisma.payingUp.delete({
     *   where: {
     *     // ... filter to delete one PayingUp
     *   }
     * })
     * 
     */
    delete<T extends PayingUpDeleteArgs>(args: SelectSubset<T, PayingUpDeleteArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayingUp.
     * @param {PayingUpUpdateArgs} args - Arguments to update one PayingUp.
     * @example
     * // Update one PayingUp
     * const payingUp = await prisma.payingUp.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayingUpUpdateArgs>(args: SelectSubset<T, PayingUpUpdateArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayingUps.
     * @param {PayingUpDeleteManyArgs} args - Arguments to filter PayingUps to delete.
     * @example
     * // Delete a few PayingUps
     * const { count } = await prisma.payingUp.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayingUpDeleteManyArgs>(args?: SelectSubset<T, PayingUpDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayingUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayingUps
     * const payingUp = await prisma.payingUp.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayingUpUpdateManyArgs>(args: SelectSubset<T, PayingUpUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayingUps and returns the data updated in the database.
     * @param {PayingUpUpdateManyAndReturnArgs} args - Arguments to update many PayingUps.
     * @example
     * // Update many PayingUps
     * const payingUp = await prisma.payingUp.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayingUps and only return the `id`
     * const payingUpWithIdOnly = await prisma.payingUp.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayingUpUpdateManyAndReturnArgs>(args: SelectSubset<T, PayingUpUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayingUp.
     * @param {PayingUpUpsertArgs} args - Arguments to update or create a PayingUp.
     * @example
     * // Update or create a PayingUp
     * const payingUp = await prisma.payingUp.upsert({
     *   create: {
     *     // ... data to create a PayingUp
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayingUp we want to update
     *   }
     * })
     */
    upsert<T extends PayingUpUpsertArgs>(args: SelectSubset<T, PayingUpUpsertArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayingUps.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpCountArgs} args - Arguments to filter PayingUps to count.
     * @example
     * // Count the number of PayingUps
     * const count = await prisma.payingUp.count({
     *   where: {
     *     // ... the filter for the PayingUps we want to count
     *   }
     * })
    **/
    count<T extends PayingUpCountArgs>(
      args?: Subset<T, PayingUpCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayingUpCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayingUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayingUpAggregateArgs>(args: Subset<T, PayingUpAggregateArgs>): Prisma.PrismaPromise<GetPayingUpAggregateType<T>>

    /**
     * Group by PayingUp.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayingUpGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayingUpGroupByArgs['orderBy'] }
        : { orderBy?: PayingUpGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayingUpGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayingUpGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayingUp model
   */
  readonly fields: PayingUpFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayingUp.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayingUpClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    payingUpTickets<T extends PayingUp$payingUpTicketsArgs<ExtArgs> = {}>(args?: Subset<T, PayingUp$payingUpTicketsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayingUp model
   */
  interface PayingUpFieldRefs {
    readonly id: FieldRef<"PayingUp", 'String'>
    readonly title: FieldRef<"PayingUp", 'String'>
    readonly description: FieldRef<"PayingUp", 'String'>
    readonly discount: FieldRef<"PayingUp", 'Json'>
    readonly paymentDetails: FieldRef<"PayingUp", 'Json'>
    readonly category: FieldRef<"PayingUp", 'Json'>
    readonly testimonials: FieldRef<"PayingUp", 'Json'>
    readonly faqs: FieldRef<"PayingUp", 'Json'>
    readonly refundPolicies: FieldRef<"PayingUp", 'Json'>
    readonly tacs: FieldRef<"PayingUp", 'Json'>
    readonly coverImage: FieldRef<"PayingUp", 'Json'>
    readonly files: FieldRef<"PayingUp", 'Json'>
    readonly createdById: FieldRef<"PayingUp", 'String'>
    readonly createdAt: FieldRef<"PayingUp", 'DateTime'>
    readonly updatedAt: FieldRef<"PayingUp", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PayingUp findUnique
   */
  export type PayingUpFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * Filter, which PayingUp to fetch.
     */
    where: PayingUpWhereUniqueInput
  }

  /**
   * PayingUp findUniqueOrThrow
   */
  export type PayingUpFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * Filter, which PayingUp to fetch.
     */
    where: PayingUpWhereUniqueInput
  }

  /**
   * PayingUp findFirst
   */
  export type PayingUpFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * Filter, which PayingUp to fetch.
     */
    where?: PayingUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUps to fetch.
     */
    orderBy?: PayingUpOrderByWithRelationInput | PayingUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayingUps.
     */
    cursor?: PayingUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayingUps.
     */
    distinct?: PayingUpScalarFieldEnum | PayingUpScalarFieldEnum[]
  }

  /**
   * PayingUp findFirstOrThrow
   */
  export type PayingUpFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * Filter, which PayingUp to fetch.
     */
    where?: PayingUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUps to fetch.
     */
    orderBy?: PayingUpOrderByWithRelationInput | PayingUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayingUps.
     */
    cursor?: PayingUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUps.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayingUps.
     */
    distinct?: PayingUpScalarFieldEnum | PayingUpScalarFieldEnum[]
  }

  /**
   * PayingUp findMany
   */
  export type PayingUpFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * Filter, which PayingUps to fetch.
     */
    where?: PayingUpWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUps to fetch.
     */
    orderBy?: PayingUpOrderByWithRelationInput | PayingUpOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayingUps.
     */
    cursor?: PayingUpWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUps from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUps.
     */
    skip?: number
    distinct?: PayingUpScalarFieldEnum | PayingUpScalarFieldEnum[]
  }

  /**
   * PayingUp create
   */
  export type PayingUpCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * The data needed to create a PayingUp.
     */
    data: XOR<PayingUpCreateInput, PayingUpUncheckedCreateInput>
  }

  /**
   * PayingUp createMany
   */
  export type PayingUpCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayingUps.
     */
    data: PayingUpCreateManyInput | PayingUpCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayingUp createManyAndReturn
   */
  export type PayingUpCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * The data used to create many PayingUps.
     */
    data: PayingUpCreateManyInput | PayingUpCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayingUp update
   */
  export type PayingUpUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * The data needed to update a PayingUp.
     */
    data: XOR<PayingUpUpdateInput, PayingUpUncheckedUpdateInput>
    /**
     * Choose, which PayingUp to update.
     */
    where: PayingUpWhereUniqueInput
  }

  /**
   * PayingUp updateMany
   */
  export type PayingUpUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayingUps.
     */
    data: XOR<PayingUpUpdateManyMutationInput, PayingUpUncheckedUpdateManyInput>
    /**
     * Filter which PayingUps to update
     */
    where?: PayingUpWhereInput
    /**
     * Limit how many PayingUps to update.
     */
    limit?: number
  }

  /**
   * PayingUp updateManyAndReturn
   */
  export type PayingUpUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * The data used to update PayingUps.
     */
    data: XOR<PayingUpUpdateManyMutationInput, PayingUpUncheckedUpdateManyInput>
    /**
     * Filter which PayingUps to update
     */
    where?: PayingUpWhereInput
    /**
     * Limit how many PayingUps to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayingUp upsert
   */
  export type PayingUpUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * The filter to search for the PayingUp to update in case it exists.
     */
    where: PayingUpWhereUniqueInput
    /**
     * In case the PayingUp found by the `where` argument doesn't exist, create a new PayingUp with this data.
     */
    create: XOR<PayingUpCreateInput, PayingUpUncheckedCreateInput>
    /**
     * In case the PayingUp was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayingUpUpdateInput, PayingUpUncheckedUpdateInput>
  }

  /**
   * PayingUp delete
   */
  export type PayingUpDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
    /**
     * Filter which PayingUp to delete.
     */
    where: PayingUpWhereUniqueInput
  }

  /**
   * PayingUp deleteMany
   */
  export type PayingUpDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayingUps to delete
     */
    where?: PayingUpWhereInput
    /**
     * Limit how many PayingUps to delete.
     */
    limit?: number
  }

  /**
   * PayingUp.payingUpTickets
   */
  export type PayingUp$payingUpTicketsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    where?: PayingUpTicketWhereInput
    orderBy?: PayingUpTicketOrderByWithRelationInput | PayingUpTicketOrderByWithRelationInput[]
    cursor?: PayingUpTicketWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PayingUpTicketScalarFieldEnum | PayingUpTicketScalarFieldEnum[]
  }

  /**
   * PayingUp without action
   */
  export type PayingUpDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUp
     */
    select?: PayingUpSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUp
     */
    omit?: PayingUpOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpInclude<ExtArgs> | null
  }


  /**
   * Model PayingUpTicket
   */

  export type AggregatePayingUpTicket = {
    _count: PayingUpTicketCountAggregateOutputType | null
    _min: PayingUpTicketMinAggregateOutputType | null
    _max: PayingUpTicketMaxAggregateOutputType | null
  }

  export type PayingUpTicketMinAggregateOutputType = {
    id: string | null
    payingUpId: string | null
    boughtById: string | null
    paymentId: string | null
    orderId: string | null
  }

  export type PayingUpTicketMaxAggregateOutputType = {
    id: string | null
    payingUpId: string | null
    boughtById: string | null
    paymentId: string | null
    orderId: string | null
  }

  export type PayingUpTicketCountAggregateOutputType = {
    id: number
    payingUpId: number
    boughtById: number
    paymentId: number
    orderId: number
    _all: number
  }


  export type PayingUpTicketMinAggregateInputType = {
    id?: true
    payingUpId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
  }

  export type PayingUpTicketMaxAggregateInputType = {
    id?: true
    payingUpId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
  }

  export type PayingUpTicketCountAggregateInputType = {
    id?: true
    payingUpId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
    _all?: true
  }

  export type PayingUpTicketAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayingUpTicket to aggregate.
     */
    where?: PayingUpTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUpTickets to fetch.
     */
    orderBy?: PayingUpTicketOrderByWithRelationInput | PayingUpTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PayingUpTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUpTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUpTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PayingUpTickets
    **/
    _count?: true | PayingUpTicketCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PayingUpTicketMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PayingUpTicketMaxAggregateInputType
  }

  export type GetPayingUpTicketAggregateType<T extends PayingUpTicketAggregateArgs> = {
        [P in keyof T & keyof AggregatePayingUpTicket]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePayingUpTicket[P]>
      : GetScalarType<T[P], AggregatePayingUpTicket[P]>
  }




  export type PayingUpTicketGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PayingUpTicketWhereInput
    orderBy?: PayingUpTicketOrderByWithAggregationInput | PayingUpTicketOrderByWithAggregationInput[]
    by: PayingUpTicketScalarFieldEnum[] | PayingUpTicketScalarFieldEnum
    having?: PayingUpTicketScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PayingUpTicketCountAggregateInputType | true
    _min?: PayingUpTicketMinAggregateInputType
    _max?: PayingUpTicketMaxAggregateInputType
  }

  export type PayingUpTicketGroupByOutputType = {
    id: string
    payingUpId: string
    boughtById: string
    paymentId: string | null
    orderId: string | null
    _count: PayingUpTicketCountAggregateOutputType | null
    _min: PayingUpTicketMinAggregateOutputType | null
    _max: PayingUpTicketMaxAggregateOutputType | null
  }

  type GetPayingUpTicketGroupByPayload<T extends PayingUpTicketGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PayingUpTicketGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PayingUpTicketGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PayingUpTicketGroupByOutputType[P]>
            : GetScalarType<T[P], PayingUpTicketGroupByOutputType[P]>
        }
      >
    >


  export type PayingUpTicketSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payingUpId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    payingUp?: boolean | PayingUpDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payingUpTicket"]>

  export type PayingUpTicketSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payingUpId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    payingUp?: boolean | PayingUpDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payingUpTicket"]>

  export type PayingUpTicketSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    payingUpId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    payingUp?: boolean | PayingUpDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["payingUpTicket"]>

  export type PayingUpTicketSelectScalar = {
    id?: boolean
    payingUpId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
  }

  export type PayingUpTicketOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "payingUpId" | "boughtById" | "paymentId" | "orderId", ExtArgs["result"]["payingUpTicket"]>
  export type PayingUpTicketInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payingUp?: boolean | PayingUpDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PayingUpTicketIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payingUp?: boolean | PayingUpDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PayingUpTicketIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    payingUp?: boolean | PayingUpDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PayingUpTicketPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PayingUpTicket"
    objects: {
      payingUp: Prisma.$PayingUpPayload<ExtArgs>
      boughtBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      payingUpId: string
      boughtById: string
      paymentId: string | null
      orderId: string | null
    }, ExtArgs["result"]["payingUpTicket"]>
    composites: {}
  }

  type PayingUpTicketGetPayload<S extends boolean | null | undefined | PayingUpTicketDefaultArgs> = $Result.GetResult<Prisma.$PayingUpTicketPayload, S>

  type PayingUpTicketCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PayingUpTicketFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PayingUpTicketCountAggregateInputType | true
    }

  export interface PayingUpTicketDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PayingUpTicket'], meta: { name: 'PayingUpTicket' } }
    /**
     * Find zero or one PayingUpTicket that matches the filter.
     * @param {PayingUpTicketFindUniqueArgs} args - Arguments to find a PayingUpTicket
     * @example
     * // Get one PayingUpTicket
     * const payingUpTicket = await prisma.payingUpTicket.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PayingUpTicketFindUniqueArgs>(args: SelectSubset<T, PayingUpTicketFindUniqueArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PayingUpTicket that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PayingUpTicketFindUniqueOrThrowArgs} args - Arguments to find a PayingUpTicket
     * @example
     * // Get one PayingUpTicket
     * const payingUpTicket = await prisma.payingUpTicket.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PayingUpTicketFindUniqueOrThrowArgs>(args: SelectSubset<T, PayingUpTicketFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayingUpTicket that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpTicketFindFirstArgs} args - Arguments to find a PayingUpTicket
     * @example
     * // Get one PayingUpTicket
     * const payingUpTicket = await prisma.payingUpTicket.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PayingUpTicketFindFirstArgs>(args?: SelectSubset<T, PayingUpTicketFindFirstArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PayingUpTicket that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpTicketFindFirstOrThrowArgs} args - Arguments to find a PayingUpTicket
     * @example
     * // Get one PayingUpTicket
     * const payingUpTicket = await prisma.payingUpTicket.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PayingUpTicketFindFirstOrThrowArgs>(args?: SelectSubset<T, PayingUpTicketFindFirstOrThrowArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PayingUpTickets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpTicketFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PayingUpTickets
     * const payingUpTickets = await prisma.payingUpTicket.findMany()
     * 
     * // Get first 10 PayingUpTickets
     * const payingUpTickets = await prisma.payingUpTicket.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const payingUpTicketWithIdOnly = await prisma.payingUpTicket.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PayingUpTicketFindManyArgs>(args?: SelectSubset<T, PayingUpTicketFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PayingUpTicket.
     * @param {PayingUpTicketCreateArgs} args - Arguments to create a PayingUpTicket.
     * @example
     * // Create one PayingUpTicket
     * const PayingUpTicket = await prisma.payingUpTicket.create({
     *   data: {
     *     // ... data to create a PayingUpTicket
     *   }
     * })
     * 
     */
    create<T extends PayingUpTicketCreateArgs>(args: SelectSubset<T, PayingUpTicketCreateArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PayingUpTickets.
     * @param {PayingUpTicketCreateManyArgs} args - Arguments to create many PayingUpTickets.
     * @example
     * // Create many PayingUpTickets
     * const payingUpTicket = await prisma.payingUpTicket.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PayingUpTicketCreateManyArgs>(args?: SelectSubset<T, PayingUpTicketCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PayingUpTickets and returns the data saved in the database.
     * @param {PayingUpTicketCreateManyAndReturnArgs} args - Arguments to create many PayingUpTickets.
     * @example
     * // Create many PayingUpTickets
     * const payingUpTicket = await prisma.payingUpTicket.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PayingUpTickets and only return the `id`
     * const payingUpTicketWithIdOnly = await prisma.payingUpTicket.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PayingUpTicketCreateManyAndReturnArgs>(args?: SelectSubset<T, PayingUpTicketCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PayingUpTicket.
     * @param {PayingUpTicketDeleteArgs} args - Arguments to delete one PayingUpTicket.
     * @example
     * // Delete one PayingUpTicket
     * const PayingUpTicket = await prisma.payingUpTicket.delete({
     *   where: {
     *     // ... filter to delete one PayingUpTicket
     *   }
     * })
     * 
     */
    delete<T extends PayingUpTicketDeleteArgs>(args: SelectSubset<T, PayingUpTicketDeleteArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PayingUpTicket.
     * @param {PayingUpTicketUpdateArgs} args - Arguments to update one PayingUpTicket.
     * @example
     * // Update one PayingUpTicket
     * const payingUpTicket = await prisma.payingUpTicket.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PayingUpTicketUpdateArgs>(args: SelectSubset<T, PayingUpTicketUpdateArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PayingUpTickets.
     * @param {PayingUpTicketDeleteManyArgs} args - Arguments to filter PayingUpTickets to delete.
     * @example
     * // Delete a few PayingUpTickets
     * const { count } = await prisma.payingUpTicket.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PayingUpTicketDeleteManyArgs>(args?: SelectSubset<T, PayingUpTicketDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayingUpTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpTicketUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PayingUpTickets
     * const payingUpTicket = await prisma.payingUpTicket.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PayingUpTicketUpdateManyArgs>(args: SelectSubset<T, PayingUpTicketUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PayingUpTickets and returns the data updated in the database.
     * @param {PayingUpTicketUpdateManyAndReturnArgs} args - Arguments to update many PayingUpTickets.
     * @example
     * // Update many PayingUpTickets
     * const payingUpTicket = await prisma.payingUpTicket.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PayingUpTickets and only return the `id`
     * const payingUpTicketWithIdOnly = await prisma.payingUpTicket.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PayingUpTicketUpdateManyAndReturnArgs>(args: SelectSubset<T, PayingUpTicketUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PayingUpTicket.
     * @param {PayingUpTicketUpsertArgs} args - Arguments to update or create a PayingUpTicket.
     * @example
     * // Update or create a PayingUpTicket
     * const payingUpTicket = await prisma.payingUpTicket.upsert({
     *   create: {
     *     // ... data to create a PayingUpTicket
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PayingUpTicket we want to update
     *   }
     * })
     */
    upsert<T extends PayingUpTicketUpsertArgs>(args: SelectSubset<T, PayingUpTicketUpsertArgs<ExtArgs>>): Prisma__PayingUpTicketClient<$Result.GetResult<Prisma.$PayingUpTicketPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PayingUpTickets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpTicketCountArgs} args - Arguments to filter PayingUpTickets to count.
     * @example
     * // Count the number of PayingUpTickets
     * const count = await prisma.payingUpTicket.count({
     *   where: {
     *     // ... the filter for the PayingUpTickets we want to count
     *   }
     * })
    **/
    count<T extends PayingUpTicketCountArgs>(
      args?: Subset<T, PayingUpTicketCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PayingUpTicketCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PayingUpTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpTicketAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PayingUpTicketAggregateArgs>(args: Subset<T, PayingUpTicketAggregateArgs>): Prisma.PrismaPromise<GetPayingUpTicketAggregateType<T>>

    /**
     * Group by PayingUpTicket.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PayingUpTicketGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PayingUpTicketGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PayingUpTicketGroupByArgs['orderBy'] }
        : { orderBy?: PayingUpTicketGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PayingUpTicketGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPayingUpTicketGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PayingUpTicket model
   */
  readonly fields: PayingUpTicketFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PayingUpTicket.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PayingUpTicketClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    payingUp<T extends PayingUpDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PayingUpDefaultArgs<ExtArgs>>): Prisma__PayingUpClient<$Result.GetResult<Prisma.$PayingUpPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    boughtBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PayingUpTicket model
   */
  interface PayingUpTicketFieldRefs {
    readonly id: FieldRef<"PayingUpTicket", 'String'>
    readonly payingUpId: FieldRef<"PayingUpTicket", 'String'>
    readonly boughtById: FieldRef<"PayingUpTicket", 'String'>
    readonly paymentId: FieldRef<"PayingUpTicket", 'String'>
    readonly orderId: FieldRef<"PayingUpTicket", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PayingUpTicket findUnique
   */
  export type PayingUpTicketFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * Filter, which PayingUpTicket to fetch.
     */
    where: PayingUpTicketWhereUniqueInput
  }

  /**
   * PayingUpTicket findUniqueOrThrow
   */
  export type PayingUpTicketFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * Filter, which PayingUpTicket to fetch.
     */
    where: PayingUpTicketWhereUniqueInput
  }

  /**
   * PayingUpTicket findFirst
   */
  export type PayingUpTicketFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * Filter, which PayingUpTicket to fetch.
     */
    where?: PayingUpTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUpTickets to fetch.
     */
    orderBy?: PayingUpTicketOrderByWithRelationInput | PayingUpTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayingUpTickets.
     */
    cursor?: PayingUpTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUpTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUpTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayingUpTickets.
     */
    distinct?: PayingUpTicketScalarFieldEnum | PayingUpTicketScalarFieldEnum[]
  }

  /**
   * PayingUpTicket findFirstOrThrow
   */
  export type PayingUpTicketFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * Filter, which PayingUpTicket to fetch.
     */
    where?: PayingUpTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUpTickets to fetch.
     */
    orderBy?: PayingUpTicketOrderByWithRelationInput | PayingUpTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PayingUpTickets.
     */
    cursor?: PayingUpTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUpTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUpTickets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PayingUpTickets.
     */
    distinct?: PayingUpTicketScalarFieldEnum | PayingUpTicketScalarFieldEnum[]
  }

  /**
   * PayingUpTicket findMany
   */
  export type PayingUpTicketFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * Filter, which PayingUpTickets to fetch.
     */
    where?: PayingUpTicketWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PayingUpTickets to fetch.
     */
    orderBy?: PayingUpTicketOrderByWithRelationInput | PayingUpTicketOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PayingUpTickets.
     */
    cursor?: PayingUpTicketWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PayingUpTickets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PayingUpTickets.
     */
    skip?: number
    distinct?: PayingUpTicketScalarFieldEnum | PayingUpTicketScalarFieldEnum[]
  }

  /**
   * PayingUpTicket create
   */
  export type PayingUpTicketCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * The data needed to create a PayingUpTicket.
     */
    data: XOR<PayingUpTicketCreateInput, PayingUpTicketUncheckedCreateInput>
  }

  /**
   * PayingUpTicket createMany
   */
  export type PayingUpTicketCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PayingUpTickets.
     */
    data: PayingUpTicketCreateManyInput | PayingUpTicketCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PayingUpTicket createManyAndReturn
   */
  export type PayingUpTicketCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * The data used to create many PayingUpTickets.
     */
    data: PayingUpTicketCreateManyInput | PayingUpTicketCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayingUpTicket update
   */
  export type PayingUpTicketUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * The data needed to update a PayingUpTicket.
     */
    data: XOR<PayingUpTicketUpdateInput, PayingUpTicketUncheckedUpdateInput>
    /**
     * Choose, which PayingUpTicket to update.
     */
    where: PayingUpTicketWhereUniqueInput
  }

  /**
   * PayingUpTicket updateMany
   */
  export type PayingUpTicketUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PayingUpTickets.
     */
    data: XOR<PayingUpTicketUpdateManyMutationInput, PayingUpTicketUncheckedUpdateManyInput>
    /**
     * Filter which PayingUpTickets to update
     */
    where?: PayingUpTicketWhereInput
    /**
     * Limit how many PayingUpTickets to update.
     */
    limit?: number
  }

  /**
   * PayingUpTicket updateManyAndReturn
   */
  export type PayingUpTicketUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * The data used to update PayingUpTickets.
     */
    data: XOR<PayingUpTicketUpdateManyMutationInput, PayingUpTicketUncheckedUpdateManyInput>
    /**
     * Filter which PayingUpTickets to update
     */
    where?: PayingUpTicketWhereInput
    /**
     * Limit how many PayingUpTickets to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PayingUpTicket upsert
   */
  export type PayingUpTicketUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * The filter to search for the PayingUpTicket to update in case it exists.
     */
    where: PayingUpTicketWhereUniqueInput
    /**
     * In case the PayingUpTicket found by the `where` argument doesn't exist, create a new PayingUpTicket with this data.
     */
    create: XOR<PayingUpTicketCreateInput, PayingUpTicketUncheckedCreateInput>
    /**
     * In case the PayingUpTicket was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PayingUpTicketUpdateInput, PayingUpTicketUncheckedUpdateInput>
  }

  /**
   * PayingUpTicket delete
   */
  export type PayingUpTicketDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
    /**
     * Filter which PayingUpTicket to delete.
     */
    where: PayingUpTicketWhereUniqueInput
  }

  /**
   * PayingUpTicket deleteMany
   */
  export type PayingUpTicketDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PayingUpTickets to delete
     */
    where?: PayingUpTicketWhereInput
    /**
     * Limit how many PayingUpTickets to delete.
     */
    limit?: number
  }

  /**
   * PayingUpTicket without action
   */
  export type PayingUpTicketDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PayingUpTicket
     */
    select?: PayingUpTicketSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PayingUpTicket
     */
    omit?: PayingUpTicketOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PayingUpTicketInclude<ExtArgs> | null
  }


  /**
   * Model Telegram
   */

  export type AggregateTelegram = {
    _count: TelegramCountAggregateOutputType | null
    _min: TelegramMinAggregateOutputType | null
    _max: TelegramMaxAggregateOutputType | null
  }

  export type TelegramMinAggregateOutputType = {
    id: string | null
    coverImage: string | null
    channelLink: string | null
    title: string | null
    description: string | null
    genre: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TelegramMaxAggregateOutputType = {
    id: string | null
    coverImage: string | null
    channelLink: string | null
    title: string | null
    description: string | null
    genre: string | null
    createdById: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TelegramCountAggregateOutputType = {
    id: number
    coverImage: number
    channelLink: number
    title: number
    description: number
    genre: number
    discount: number
    subscription: number
    createdById: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TelegramMinAggregateInputType = {
    id?: true
    coverImage?: true
    channelLink?: true
    title?: true
    description?: true
    genre?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TelegramMaxAggregateInputType = {
    id?: true
    coverImage?: true
    channelLink?: true
    title?: true
    description?: true
    genre?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TelegramCountAggregateInputType = {
    id?: true
    coverImage?: true
    channelLink?: true
    title?: true
    description?: true
    genre?: true
    discount?: true
    subscription?: true
    createdById?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TelegramAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Telegram to aggregate.
     */
    where?: TelegramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telegrams to fetch.
     */
    orderBy?: TelegramOrderByWithRelationInput | TelegramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TelegramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telegrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telegrams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Telegrams
    **/
    _count?: true | TelegramCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TelegramMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TelegramMaxAggregateInputType
  }

  export type GetTelegramAggregateType<T extends TelegramAggregateArgs> = {
        [P in keyof T & keyof AggregateTelegram]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTelegram[P]>
      : GetScalarType<T[P], AggregateTelegram[P]>
  }




  export type TelegramGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelegramWhereInput
    orderBy?: TelegramOrderByWithAggregationInput | TelegramOrderByWithAggregationInput[]
    by: TelegramScalarFieldEnum[] | TelegramScalarFieldEnum
    having?: TelegramScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TelegramCountAggregateInputType | true
    _min?: TelegramMinAggregateInputType
    _max?: TelegramMaxAggregateInputType
  }

  export type TelegramGroupByOutputType = {
    id: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonValue
    subscription: JsonValue
    createdById: string
    createdAt: Date
    updatedAt: Date
    _count: TelegramCountAggregateOutputType | null
    _min: TelegramMinAggregateOutputType | null
    _max: TelegramMaxAggregateOutputType | null
  }

  type GetTelegramGroupByPayload<T extends TelegramGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TelegramGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TelegramGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TelegramGroupByOutputType[P]>
            : GetScalarType<T[P], TelegramGroupByOutputType[P]>
        }
      >
    >


  export type TelegramSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coverImage?: boolean
    channelLink?: boolean
    title?: boolean
    description?: boolean
    genre?: boolean
    discount?: boolean
    subscription?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    telegramSubscriptions?: boolean | Telegram$telegramSubscriptionsArgs<ExtArgs>
    _count?: boolean | TelegramCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["telegram"]>

  export type TelegramSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coverImage?: boolean
    channelLink?: boolean
    title?: boolean
    description?: boolean
    genre?: boolean
    discount?: boolean
    subscription?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["telegram"]>

  export type TelegramSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    coverImage?: boolean
    channelLink?: boolean
    title?: boolean
    description?: boolean
    genre?: boolean
    discount?: boolean
    subscription?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["telegram"]>

  export type TelegramSelectScalar = {
    id?: boolean
    coverImage?: boolean
    channelLink?: boolean
    title?: boolean
    description?: boolean
    genre?: boolean
    discount?: boolean
    subscription?: boolean
    createdById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TelegramOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "coverImage" | "channelLink" | "title" | "description" | "genre" | "discount" | "subscription" | "createdById" | "createdAt" | "updatedAt", ExtArgs["result"]["telegram"]>
  export type TelegramInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    telegramSubscriptions?: boolean | Telegram$telegramSubscriptionsArgs<ExtArgs>
    _count?: boolean | TelegramCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TelegramIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TelegramIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TelegramPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Telegram"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      telegramSubscriptions: Prisma.$TelegramSubscriptionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      coverImage: string
      channelLink: string
      title: string
      description: string
      genre: string
      discount: Prisma.JsonValue
      subscription: Prisma.JsonValue
      createdById: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["telegram"]>
    composites: {}
  }

  type TelegramGetPayload<S extends boolean | null | undefined | TelegramDefaultArgs> = $Result.GetResult<Prisma.$TelegramPayload, S>

  type TelegramCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TelegramFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TelegramCountAggregateInputType | true
    }

  export interface TelegramDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Telegram'], meta: { name: 'Telegram' } }
    /**
     * Find zero or one Telegram that matches the filter.
     * @param {TelegramFindUniqueArgs} args - Arguments to find a Telegram
     * @example
     * // Get one Telegram
     * const telegram = await prisma.telegram.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TelegramFindUniqueArgs>(args: SelectSubset<T, TelegramFindUniqueArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Telegram that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TelegramFindUniqueOrThrowArgs} args - Arguments to find a Telegram
     * @example
     * // Get one Telegram
     * const telegram = await prisma.telegram.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TelegramFindUniqueOrThrowArgs>(args: SelectSubset<T, TelegramFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Telegram that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramFindFirstArgs} args - Arguments to find a Telegram
     * @example
     * // Get one Telegram
     * const telegram = await prisma.telegram.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TelegramFindFirstArgs>(args?: SelectSubset<T, TelegramFindFirstArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Telegram that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramFindFirstOrThrowArgs} args - Arguments to find a Telegram
     * @example
     * // Get one Telegram
     * const telegram = await prisma.telegram.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TelegramFindFirstOrThrowArgs>(args?: SelectSubset<T, TelegramFindFirstOrThrowArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Telegrams that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Telegrams
     * const telegrams = await prisma.telegram.findMany()
     * 
     * // Get first 10 Telegrams
     * const telegrams = await prisma.telegram.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const telegramWithIdOnly = await prisma.telegram.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TelegramFindManyArgs>(args?: SelectSubset<T, TelegramFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Telegram.
     * @param {TelegramCreateArgs} args - Arguments to create a Telegram.
     * @example
     * // Create one Telegram
     * const Telegram = await prisma.telegram.create({
     *   data: {
     *     // ... data to create a Telegram
     *   }
     * })
     * 
     */
    create<T extends TelegramCreateArgs>(args: SelectSubset<T, TelegramCreateArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Telegrams.
     * @param {TelegramCreateManyArgs} args - Arguments to create many Telegrams.
     * @example
     * // Create many Telegrams
     * const telegram = await prisma.telegram.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TelegramCreateManyArgs>(args?: SelectSubset<T, TelegramCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Telegrams and returns the data saved in the database.
     * @param {TelegramCreateManyAndReturnArgs} args - Arguments to create many Telegrams.
     * @example
     * // Create many Telegrams
     * const telegram = await prisma.telegram.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Telegrams and only return the `id`
     * const telegramWithIdOnly = await prisma.telegram.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TelegramCreateManyAndReturnArgs>(args?: SelectSubset<T, TelegramCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Telegram.
     * @param {TelegramDeleteArgs} args - Arguments to delete one Telegram.
     * @example
     * // Delete one Telegram
     * const Telegram = await prisma.telegram.delete({
     *   where: {
     *     // ... filter to delete one Telegram
     *   }
     * })
     * 
     */
    delete<T extends TelegramDeleteArgs>(args: SelectSubset<T, TelegramDeleteArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Telegram.
     * @param {TelegramUpdateArgs} args - Arguments to update one Telegram.
     * @example
     * // Update one Telegram
     * const telegram = await prisma.telegram.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TelegramUpdateArgs>(args: SelectSubset<T, TelegramUpdateArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Telegrams.
     * @param {TelegramDeleteManyArgs} args - Arguments to filter Telegrams to delete.
     * @example
     * // Delete a few Telegrams
     * const { count } = await prisma.telegram.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TelegramDeleteManyArgs>(args?: SelectSubset<T, TelegramDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Telegrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Telegrams
     * const telegram = await prisma.telegram.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TelegramUpdateManyArgs>(args: SelectSubset<T, TelegramUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Telegrams and returns the data updated in the database.
     * @param {TelegramUpdateManyAndReturnArgs} args - Arguments to update many Telegrams.
     * @example
     * // Update many Telegrams
     * const telegram = await prisma.telegram.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Telegrams and only return the `id`
     * const telegramWithIdOnly = await prisma.telegram.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TelegramUpdateManyAndReturnArgs>(args: SelectSubset<T, TelegramUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Telegram.
     * @param {TelegramUpsertArgs} args - Arguments to update or create a Telegram.
     * @example
     * // Update or create a Telegram
     * const telegram = await prisma.telegram.upsert({
     *   create: {
     *     // ... data to create a Telegram
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Telegram we want to update
     *   }
     * })
     */
    upsert<T extends TelegramUpsertArgs>(args: SelectSubset<T, TelegramUpsertArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Telegrams.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramCountArgs} args - Arguments to filter Telegrams to count.
     * @example
     * // Count the number of Telegrams
     * const count = await prisma.telegram.count({
     *   where: {
     *     // ... the filter for the Telegrams we want to count
     *   }
     * })
    **/
    count<T extends TelegramCountArgs>(
      args?: Subset<T, TelegramCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TelegramCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Telegram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TelegramAggregateArgs>(args: Subset<T, TelegramAggregateArgs>): Prisma.PrismaPromise<GetTelegramAggregateType<T>>

    /**
     * Group by Telegram.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TelegramGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TelegramGroupByArgs['orderBy'] }
        : { orderBy?: TelegramGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TelegramGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTelegramGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Telegram model
   */
  readonly fields: TelegramFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Telegram.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TelegramClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    telegramSubscriptions<T extends Telegram$telegramSubscriptionsArgs<ExtArgs> = {}>(args?: Subset<T, Telegram$telegramSubscriptionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Telegram model
   */
  interface TelegramFieldRefs {
    readonly id: FieldRef<"Telegram", 'String'>
    readonly coverImage: FieldRef<"Telegram", 'String'>
    readonly channelLink: FieldRef<"Telegram", 'String'>
    readonly title: FieldRef<"Telegram", 'String'>
    readonly description: FieldRef<"Telegram", 'String'>
    readonly genre: FieldRef<"Telegram", 'String'>
    readonly discount: FieldRef<"Telegram", 'Json'>
    readonly subscription: FieldRef<"Telegram", 'Json'>
    readonly createdById: FieldRef<"Telegram", 'String'>
    readonly createdAt: FieldRef<"Telegram", 'DateTime'>
    readonly updatedAt: FieldRef<"Telegram", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Telegram findUnique
   */
  export type TelegramFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * Filter, which Telegram to fetch.
     */
    where: TelegramWhereUniqueInput
  }

  /**
   * Telegram findUniqueOrThrow
   */
  export type TelegramFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * Filter, which Telegram to fetch.
     */
    where: TelegramWhereUniqueInput
  }

  /**
   * Telegram findFirst
   */
  export type TelegramFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * Filter, which Telegram to fetch.
     */
    where?: TelegramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telegrams to fetch.
     */
    orderBy?: TelegramOrderByWithRelationInput | TelegramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Telegrams.
     */
    cursor?: TelegramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telegrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telegrams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Telegrams.
     */
    distinct?: TelegramScalarFieldEnum | TelegramScalarFieldEnum[]
  }

  /**
   * Telegram findFirstOrThrow
   */
  export type TelegramFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * Filter, which Telegram to fetch.
     */
    where?: TelegramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telegrams to fetch.
     */
    orderBy?: TelegramOrderByWithRelationInput | TelegramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Telegrams.
     */
    cursor?: TelegramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telegrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telegrams.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Telegrams.
     */
    distinct?: TelegramScalarFieldEnum | TelegramScalarFieldEnum[]
  }

  /**
   * Telegram findMany
   */
  export type TelegramFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * Filter, which Telegrams to fetch.
     */
    where?: TelegramWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telegrams to fetch.
     */
    orderBy?: TelegramOrderByWithRelationInput | TelegramOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Telegrams.
     */
    cursor?: TelegramWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telegrams from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telegrams.
     */
    skip?: number
    distinct?: TelegramScalarFieldEnum | TelegramScalarFieldEnum[]
  }

  /**
   * Telegram create
   */
  export type TelegramCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * The data needed to create a Telegram.
     */
    data: XOR<TelegramCreateInput, TelegramUncheckedCreateInput>
  }

  /**
   * Telegram createMany
   */
  export type TelegramCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Telegrams.
     */
    data: TelegramCreateManyInput | TelegramCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Telegram createManyAndReturn
   */
  export type TelegramCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * The data used to create many Telegrams.
     */
    data: TelegramCreateManyInput | TelegramCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Telegram update
   */
  export type TelegramUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * The data needed to update a Telegram.
     */
    data: XOR<TelegramUpdateInput, TelegramUncheckedUpdateInput>
    /**
     * Choose, which Telegram to update.
     */
    where: TelegramWhereUniqueInput
  }

  /**
   * Telegram updateMany
   */
  export type TelegramUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Telegrams.
     */
    data: XOR<TelegramUpdateManyMutationInput, TelegramUncheckedUpdateManyInput>
    /**
     * Filter which Telegrams to update
     */
    where?: TelegramWhereInput
    /**
     * Limit how many Telegrams to update.
     */
    limit?: number
  }

  /**
   * Telegram updateManyAndReturn
   */
  export type TelegramUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * The data used to update Telegrams.
     */
    data: XOR<TelegramUpdateManyMutationInput, TelegramUncheckedUpdateManyInput>
    /**
     * Filter which Telegrams to update
     */
    where?: TelegramWhereInput
    /**
     * Limit how many Telegrams to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Telegram upsert
   */
  export type TelegramUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * The filter to search for the Telegram to update in case it exists.
     */
    where: TelegramWhereUniqueInput
    /**
     * In case the Telegram found by the `where` argument doesn't exist, create a new Telegram with this data.
     */
    create: XOR<TelegramCreateInput, TelegramUncheckedCreateInput>
    /**
     * In case the Telegram was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TelegramUpdateInput, TelegramUncheckedUpdateInput>
  }

  /**
   * Telegram delete
   */
  export type TelegramDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
    /**
     * Filter which Telegram to delete.
     */
    where: TelegramWhereUniqueInput
  }

  /**
   * Telegram deleteMany
   */
  export type TelegramDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Telegrams to delete
     */
    where?: TelegramWhereInput
    /**
     * Limit how many Telegrams to delete.
     */
    limit?: number
  }

  /**
   * Telegram.telegramSubscriptions
   */
  export type Telegram$telegramSubscriptionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    where?: TelegramSubscriptionWhereInput
    orderBy?: TelegramSubscriptionOrderByWithRelationInput | TelegramSubscriptionOrderByWithRelationInput[]
    cursor?: TelegramSubscriptionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelegramSubscriptionScalarFieldEnum | TelegramSubscriptionScalarFieldEnum[]
  }

  /**
   * Telegram without action
   */
  export type TelegramDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telegram
     */
    select?: TelegramSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Telegram
     */
    omit?: TelegramOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramInclude<ExtArgs> | null
  }


  /**
   * Model TelegramSubscription
   */

  export type AggregateTelegramSubscription = {
    _count: TelegramSubscriptionCountAggregateOutputType | null
    _avg: TelegramSubscriptionAvgAggregateOutputType | null
    _sum: TelegramSubscriptionSumAggregateOutputType | null
    _min: TelegramSubscriptionMinAggregateOutputType | null
    _max: TelegramSubscriptionMaxAggregateOutputType | null
  }

  export type TelegramSubscriptionAvgAggregateOutputType = {
    validDays: number | null
  }

  export type TelegramSubscriptionSumAggregateOutputType = {
    validDays: number | null
  }

  export type TelegramSubscriptionMinAggregateOutputType = {
    id: string | null
    validDays: number | null
    telegramId: string | null
    chatId: string | null
    boughtById: string | null
    paymentId: string | null
    orderId: string | null
    createdAt: Date | null
  }

  export type TelegramSubscriptionMaxAggregateOutputType = {
    id: string | null
    validDays: number | null
    telegramId: string | null
    chatId: string | null
    boughtById: string | null
    paymentId: string | null
    orderId: string | null
    createdAt: Date | null
  }

  export type TelegramSubscriptionCountAggregateOutputType = {
    id: number
    validDays: number
    telegramId: number
    chatId: number
    boughtById: number
    paymentId: number
    orderId: number
    createdAt: number
    _all: number
  }


  export type TelegramSubscriptionAvgAggregateInputType = {
    validDays?: true
  }

  export type TelegramSubscriptionSumAggregateInputType = {
    validDays?: true
  }

  export type TelegramSubscriptionMinAggregateInputType = {
    id?: true
    validDays?: true
    telegramId?: true
    chatId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
    createdAt?: true
  }

  export type TelegramSubscriptionMaxAggregateInputType = {
    id?: true
    validDays?: true
    telegramId?: true
    chatId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
    createdAt?: true
  }

  export type TelegramSubscriptionCountAggregateInputType = {
    id?: true
    validDays?: true
    telegramId?: true
    chatId?: true
    boughtById?: true
    paymentId?: true
    orderId?: true
    createdAt?: true
    _all?: true
  }

  export type TelegramSubscriptionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TelegramSubscription to aggregate.
     */
    where?: TelegramSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TelegramSubscriptions to fetch.
     */
    orderBy?: TelegramSubscriptionOrderByWithRelationInput | TelegramSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TelegramSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TelegramSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TelegramSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TelegramSubscriptions
    **/
    _count?: true | TelegramSubscriptionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TelegramSubscriptionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TelegramSubscriptionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TelegramSubscriptionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TelegramSubscriptionMaxAggregateInputType
  }

  export type GetTelegramSubscriptionAggregateType<T extends TelegramSubscriptionAggregateArgs> = {
        [P in keyof T & keyof AggregateTelegramSubscription]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTelegramSubscription[P]>
      : GetScalarType<T[P], AggregateTelegramSubscription[P]>
  }




  export type TelegramSubscriptionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelegramSubscriptionWhereInput
    orderBy?: TelegramSubscriptionOrderByWithAggregationInput | TelegramSubscriptionOrderByWithAggregationInput[]
    by: TelegramSubscriptionScalarFieldEnum[] | TelegramSubscriptionScalarFieldEnum
    having?: TelegramSubscriptionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TelegramSubscriptionCountAggregateInputType | true
    _avg?: TelegramSubscriptionAvgAggregateInputType
    _sum?: TelegramSubscriptionSumAggregateInputType
    _min?: TelegramSubscriptionMinAggregateInputType
    _max?: TelegramSubscriptionMaxAggregateInputType
  }

  export type TelegramSubscriptionGroupByOutputType = {
    id: string
    validDays: number
    telegramId: string
    chatId: string | null
    boughtById: string
    paymentId: string | null
    orderId: string | null
    createdAt: Date
    _count: TelegramSubscriptionCountAggregateOutputType | null
    _avg: TelegramSubscriptionAvgAggregateOutputType | null
    _sum: TelegramSubscriptionSumAggregateOutputType | null
    _min: TelegramSubscriptionMinAggregateOutputType | null
    _max: TelegramSubscriptionMaxAggregateOutputType | null
  }

  type GetTelegramSubscriptionGroupByPayload<T extends TelegramSubscriptionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TelegramSubscriptionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TelegramSubscriptionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TelegramSubscriptionGroupByOutputType[P]>
            : GetScalarType<T[P], TelegramSubscriptionGroupByOutputType[P]>
        }
      >
    >


  export type TelegramSubscriptionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    validDays?: boolean
    telegramId?: boolean
    chatId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
    telegram?: boolean | TelegramDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["telegramSubscription"]>

  export type TelegramSubscriptionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    validDays?: boolean
    telegramId?: boolean
    chatId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
    telegram?: boolean | TelegramDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["telegramSubscription"]>

  export type TelegramSubscriptionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    validDays?: boolean
    telegramId?: boolean
    chatId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
    telegram?: boolean | TelegramDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["telegramSubscription"]>

  export type TelegramSubscriptionSelectScalar = {
    id?: boolean
    validDays?: boolean
    telegramId?: boolean
    chatId?: boolean
    boughtById?: boolean
    paymentId?: boolean
    orderId?: boolean
    createdAt?: boolean
  }

  export type TelegramSubscriptionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "validDays" | "telegramId" | "chatId" | "boughtById" | "paymentId" | "orderId" | "createdAt", ExtArgs["result"]["telegramSubscription"]>
  export type TelegramSubscriptionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telegram?: boolean | TelegramDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TelegramSubscriptionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telegram?: boolean | TelegramDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type TelegramSubscriptionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telegram?: boolean | TelegramDefaultArgs<ExtArgs>
    boughtBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $TelegramSubscriptionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TelegramSubscription"
    objects: {
      telegram: Prisma.$TelegramPayload<ExtArgs>
      boughtBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      validDays: number
      telegramId: string
      chatId: string | null
      boughtById: string
      paymentId: string | null
      orderId: string | null
      createdAt: Date
    }, ExtArgs["result"]["telegramSubscription"]>
    composites: {}
  }

  type TelegramSubscriptionGetPayload<S extends boolean | null | undefined | TelegramSubscriptionDefaultArgs> = $Result.GetResult<Prisma.$TelegramSubscriptionPayload, S>

  type TelegramSubscriptionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TelegramSubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TelegramSubscriptionCountAggregateInputType | true
    }

  export interface TelegramSubscriptionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TelegramSubscription'], meta: { name: 'TelegramSubscription' } }
    /**
     * Find zero or one TelegramSubscription that matches the filter.
     * @param {TelegramSubscriptionFindUniqueArgs} args - Arguments to find a TelegramSubscription
     * @example
     * // Get one TelegramSubscription
     * const telegramSubscription = await prisma.telegramSubscription.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TelegramSubscriptionFindUniqueArgs>(args: SelectSubset<T, TelegramSubscriptionFindUniqueArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TelegramSubscription that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TelegramSubscriptionFindUniqueOrThrowArgs} args - Arguments to find a TelegramSubscription
     * @example
     * // Get one TelegramSubscription
     * const telegramSubscription = await prisma.telegramSubscription.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TelegramSubscriptionFindUniqueOrThrowArgs>(args: SelectSubset<T, TelegramSubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TelegramSubscription that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramSubscriptionFindFirstArgs} args - Arguments to find a TelegramSubscription
     * @example
     * // Get one TelegramSubscription
     * const telegramSubscription = await prisma.telegramSubscription.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TelegramSubscriptionFindFirstArgs>(args?: SelectSubset<T, TelegramSubscriptionFindFirstArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TelegramSubscription that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramSubscriptionFindFirstOrThrowArgs} args - Arguments to find a TelegramSubscription
     * @example
     * // Get one TelegramSubscription
     * const telegramSubscription = await prisma.telegramSubscription.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TelegramSubscriptionFindFirstOrThrowArgs>(args?: SelectSubset<T, TelegramSubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TelegramSubscriptions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramSubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TelegramSubscriptions
     * const telegramSubscriptions = await prisma.telegramSubscription.findMany()
     * 
     * // Get first 10 TelegramSubscriptions
     * const telegramSubscriptions = await prisma.telegramSubscription.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const telegramSubscriptionWithIdOnly = await prisma.telegramSubscription.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TelegramSubscriptionFindManyArgs>(args?: SelectSubset<T, TelegramSubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TelegramSubscription.
     * @param {TelegramSubscriptionCreateArgs} args - Arguments to create a TelegramSubscription.
     * @example
     * // Create one TelegramSubscription
     * const TelegramSubscription = await prisma.telegramSubscription.create({
     *   data: {
     *     // ... data to create a TelegramSubscription
     *   }
     * })
     * 
     */
    create<T extends TelegramSubscriptionCreateArgs>(args: SelectSubset<T, TelegramSubscriptionCreateArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TelegramSubscriptions.
     * @param {TelegramSubscriptionCreateManyArgs} args - Arguments to create many TelegramSubscriptions.
     * @example
     * // Create many TelegramSubscriptions
     * const telegramSubscription = await prisma.telegramSubscription.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TelegramSubscriptionCreateManyArgs>(args?: SelectSubset<T, TelegramSubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TelegramSubscriptions and returns the data saved in the database.
     * @param {TelegramSubscriptionCreateManyAndReturnArgs} args - Arguments to create many TelegramSubscriptions.
     * @example
     * // Create many TelegramSubscriptions
     * const telegramSubscription = await prisma.telegramSubscription.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TelegramSubscriptions and only return the `id`
     * const telegramSubscriptionWithIdOnly = await prisma.telegramSubscription.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TelegramSubscriptionCreateManyAndReturnArgs>(args?: SelectSubset<T, TelegramSubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TelegramSubscription.
     * @param {TelegramSubscriptionDeleteArgs} args - Arguments to delete one TelegramSubscription.
     * @example
     * // Delete one TelegramSubscription
     * const TelegramSubscription = await prisma.telegramSubscription.delete({
     *   where: {
     *     // ... filter to delete one TelegramSubscription
     *   }
     * })
     * 
     */
    delete<T extends TelegramSubscriptionDeleteArgs>(args: SelectSubset<T, TelegramSubscriptionDeleteArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TelegramSubscription.
     * @param {TelegramSubscriptionUpdateArgs} args - Arguments to update one TelegramSubscription.
     * @example
     * // Update one TelegramSubscription
     * const telegramSubscription = await prisma.telegramSubscription.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TelegramSubscriptionUpdateArgs>(args: SelectSubset<T, TelegramSubscriptionUpdateArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TelegramSubscriptions.
     * @param {TelegramSubscriptionDeleteManyArgs} args - Arguments to filter TelegramSubscriptions to delete.
     * @example
     * // Delete a few TelegramSubscriptions
     * const { count } = await prisma.telegramSubscription.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TelegramSubscriptionDeleteManyArgs>(args?: SelectSubset<T, TelegramSubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TelegramSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramSubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TelegramSubscriptions
     * const telegramSubscription = await prisma.telegramSubscription.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TelegramSubscriptionUpdateManyArgs>(args: SelectSubset<T, TelegramSubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TelegramSubscriptions and returns the data updated in the database.
     * @param {TelegramSubscriptionUpdateManyAndReturnArgs} args - Arguments to update many TelegramSubscriptions.
     * @example
     * // Update many TelegramSubscriptions
     * const telegramSubscription = await prisma.telegramSubscription.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TelegramSubscriptions and only return the `id`
     * const telegramSubscriptionWithIdOnly = await prisma.telegramSubscription.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TelegramSubscriptionUpdateManyAndReturnArgs>(args: SelectSubset<T, TelegramSubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TelegramSubscription.
     * @param {TelegramSubscriptionUpsertArgs} args - Arguments to update or create a TelegramSubscription.
     * @example
     * // Update or create a TelegramSubscription
     * const telegramSubscription = await prisma.telegramSubscription.upsert({
     *   create: {
     *     // ... data to create a TelegramSubscription
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TelegramSubscription we want to update
     *   }
     * })
     */
    upsert<T extends TelegramSubscriptionUpsertArgs>(args: SelectSubset<T, TelegramSubscriptionUpsertArgs<ExtArgs>>): Prisma__TelegramSubscriptionClient<$Result.GetResult<Prisma.$TelegramSubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TelegramSubscriptions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramSubscriptionCountArgs} args - Arguments to filter TelegramSubscriptions to count.
     * @example
     * // Count the number of TelegramSubscriptions
     * const count = await prisma.telegramSubscription.count({
     *   where: {
     *     // ... the filter for the TelegramSubscriptions we want to count
     *   }
     * })
    **/
    count<T extends TelegramSubscriptionCountArgs>(
      args?: Subset<T, TelegramSubscriptionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TelegramSubscriptionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TelegramSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramSubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TelegramSubscriptionAggregateArgs>(args: Subset<T, TelegramSubscriptionAggregateArgs>): Prisma.PrismaPromise<GetTelegramSubscriptionAggregateType<T>>

    /**
     * Group by TelegramSubscription.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelegramSubscriptionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TelegramSubscriptionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TelegramSubscriptionGroupByArgs['orderBy'] }
        : { orderBy?: TelegramSubscriptionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TelegramSubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTelegramSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TelegramSubscription model
   */
  readonly fields: TelegramSubscriptionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TelegramSubscription.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TelegramSubscriptionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    telegram<T extends TelegramDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TelegramDefaultArgs<ExtArgs>>): Prisma__TelegramClient<$Result.GetResult<Prisma.$TelegramPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    boughtBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TelegramSubscription model
   */
  interface TelegramSubscriptionFieldRefs {
    readonly id: FieldRef<"TelegramSubscription", 'String'>
    readonly validDays: FieldRef<"TelegramSubscription", 'Int'>
    readonly telegramId: FieldRef<"TelegramSubscription", 'String'>
    readonly chatId: FieldRef<"TelegramSubscription", 'String'>
    readonly boughtById: FieldRef<"TelegramSubscription", 'String'>
    readonly paymentId: FieldRef<"TelegramSubscription", 'String'>
    readonly orderId: FieldRef<"TelegramSubscription", 'String'>
    readonly createdAt: FieldRef<"TelegramSubscription", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TelegramSubscription findUnique
   */
  export type TelegramSubscriptionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which TelegramSubscription to fetch.
     */
    where: TelegramSubscriptionWhereUniqueInput
  }

  /**
   * TelegramSubscription findUniqueOrThrow
   */
  export type TelegramSubscriptionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which TelegramSubscription to fetch.
     */
    where: TelegramSubscriptionWhereUniqueInput
  }

  /**
   * TelegramSubscription findFirst
   */
  export type TelegramSubscriptionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which TelegramSubscription to fetch.
     */
    where?: TelegramSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TelegramSubscriptions to fetch.
     */
    orderBy?: TelegramSubscriptionOrderByWithRelationInput | TelegramSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TelegramSubscriptions.
     */
    cursor?: TelegramSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TelegramSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TelegramSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TelegramSubscriptions.
     */
    distinct?: TelegramSubscriptionScalarFieldEnum | TelegramSubscriptionScalarFieldEnum[]
  }

  /**
   * TelegramSubscription findFirstOrThrow
   */
  export type TelegramSubscriptionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which TelegramSubscription to fetch.
     */
    where?: TelegramSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TelegramSubscriptions to fetch.
     */
    orderBy?: TelegramSubscriptionOrderByWithRelationInput | TelegramSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TelegramSubscriptions.
     */
    cursor?: TelegramSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TelegramSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TelegramSubscriptions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TelegramSubscriptions.
     */
    distinct?: TelegramSubscriptionScalarFieldEnum | TelegramSubscriptionScalarFieldEnum[]
  }

  /**
   * TelegramSubscription findMany
   */
  export type TelegramSubscriptionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * Filter, which TelegramSubscriptions to fetch.
     */
    where?: TelegramSubscriptionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TelegramSubscriptions to fetch.
     */
    orderBy?: TelegramSubscriptionOrderByWithRelationInput | TelegramSubscriptionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TelegramSubscriptions.
     */
    cursor?: TelegramSubscriptionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TelegramSubscriptions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TelegramSubscriptions.
     */
    skip?: number
    distinct?: TelegramSubscriptionScalarFieldEnum | TelegramSubscriptionScalarFieldEnum[]
  }

  /**
   * TelegramSubscription create
   */
  export type TelegramSubscriptionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to create a TelegramSubscription.
     */
    data: XOR<TelegramSubscriptionCreateInput, TelegramSubscriptionUncheckedCreateInput>
  }

  /**
   * TelegramSubscription createMany
   */
  export type TelegramSubscriptionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TelegramSubscriptions.
     */
    data: TelegramSubscriptionCreateManyInput | TelegramSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * TelegramSubscription createManyAndReturn
   */
  export type TelegramSubscriptionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to create many TelegramSubscriptions.
     */
    data: TelegramSubscriptionCreateManyInput | TelegramSubscriptionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TelegramSubscription update
   */
  export type TelegramSubscriptionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * The data needed to update a TelegramSubscription.
     */
    data: XOR<TelegramSubscriptionUpdateInput, TelegramSubscriptionUncheckedUpdateInput>
    /**
     * Choose, which TelegramSubscription to update.
     */
    where: TelegramSubscriptionWhereUniqueInput
  }

  /**
   * TelegramSubscription updateMany
   */
  export type TelegramSubscriptionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TelegramSubscriptions.
     */
    data: XOR<TelegramSubscriptionUpdateManyMutationInput, TelegramSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which TelegramSubscriptions to update
     */
    where?: TelegramSubscriptionWhereInput
    /**
     * Limit how many TelegramSubscriptions to update.
     */
    limit?: number
  }

  /**
   * TelegramSubscription updateManyAndReturn
   */
  export type TelegramSubscriptionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * The data used to update TelegramSubscriptions.
     */
    data: XOR<TelegramSubscriptionUpdateManyMutationInput, TelegramSubscriptionUncheckedUpdateManyInput>
    /**
     * Filter which TelegramSubscriptions to update
     */
    where?: TelegramSubscriptionWhereInput
    /**
     * Limit how many TelegramSubscriptions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TelegramSubscription upsert
   */
  export type TelegramSubscriptionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * The filter to search for the TelegramSubscription to update in case it exists.
     */
    where: TelegramSubscriptionWhereUniqueInput
    /**
     * In case the TelegramSubscription found by the `where` argument doesn't exist, create a new TelegramSubscription with this data.
     */
    create: XOR<TelegramSubscriptionCreateInput, TelegramSubscriptionUncheckedCreateInput>
    /**
     * In case the TelegramSubscription was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TelegramSubscriptionUpdateInput, TelegramSubscriptionUncheckedUpdateInput>
  }

  /**
   * TelegramSubscription delete
   */
  export type TelegramSubscriptionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
    /**
     * Filter which TelegramSubscription to delete.
     */
    where: TelegramSubscriptionWhereUniqueInput
  }

  /**
   * TelegramSubscription deleteMany
   */
  export type TelegramSubscriptionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TelegramSubscriptions to delete
     */
    where?: TelegramSubscriptionWhereInput
    /**
     * Limit how many TelegramSubscriptions to delete.
     */
    limit?: number
  }

  /**
   * TelegramSubscription without action
   */
  export type TelegramSubscriptionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TelegramSubscription
     */
    select?: TelegramSubscriptionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TelegramSubscription
     */
    omit?: TelegramSubscriptionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TelegramSubscriptionInclude<ExtArgs> | null
  }


  /**
   * Model PremiumContent
   */

  export type AggregatePremiumContent = {
    _count: PremiumContentCountAggregateOutputType | null
    _avg: PremiumContentAvgAggregateOutputType | null
    _sum: PremiumContentSumAggregateOutputType | null
    _min: PremiumContentMinAggregateOutputType | null
    _max: PremiumContentMaxAggregateOutputType | null
  }

  export type PremiumContentAvgAggregateOutputType = {
    unlockPrice: number | null
  }

  export type PremiumContentSumAggregateOutputType = {
    unlockPrice: number | null
  }

  export type PremiumContentMinAggregateOutputType = {
    id: string | null
    title: string | null
    category: string | null
    unlockPrice: number | null
    createdById: string | null
    createdAt: Date | null
  }

  export type PremiumContentMaxAggregateOutputType = {
    id: string | null
    title: string | null
    category: string | null
    unlockPrice: number | null
    createdById: string | null
    createdAt: Date | null
  }

  export type PremiumContentCountAggregateOutputType = {
    id: number
    title: number
    category: number
    unlockPrice: number
    content: number
    discount: number
    createdById: number
    createdAt: number
    _all: number
  }


  export type PremiumContentAvgAggregateInputType = {
    unlockPrice?: true
  }

  export type PremiumContentSumAggregateInputType = {
    unlockPrice?: true
  }

  export type PremiumContentMinAggregateInputType = {
    id?: true
    title?: true
    category?: true
    unlockPrice?: true
    createdById?: true
    createdAt?: true
  }

  export type PremiumContentMaxAggregateInputType = {
    id?: true
    title?: true
    category?: true
    unlockPrice?: true
    createdById?: true
    createdAt?: true
  }

  export type PremiumContentCountAggregateInputType = {
    id?: true
    title?: true
    category?: true
    unlockPrice?: true
    content?: true
    discount?: true
    createdById?: true
    createdAt?: true
    _all?: true
  }

  export type PremiumContentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumContent to aggregate.
     */
    where?: PremiumContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContents to fetch.
     */
    orderBy?: PremiumContentOrderByWithRelationInput | PremiumContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PremiumContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PremiumContents
    **/
    _count?: true | PremiumContentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PremiumContentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PremiumContentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PremiumContentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PremiumContentMaxAggregateInputType
  }

  export type GetPremiumContentAggregateType<T extends PremiumContentAggregateArgs> = {
        [P in keyof T & keyof AggregatePremiumContent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePremiumContent[P]>
      : GetScalarType<T[P], AggregatePremiumContent[P]>
  }




  export type PremiumContentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumContentWhereInput
    orderBy?: PremiumContentOrderByWithAggregationInput | PremiumContentOrderByWithAggregationInput[]
    by: PremiumContentScalarFieldEnum[] | PremiumContentScalarFieldEnum
    having?: PremiumContentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PremiumContentCountAggregateInputType | true
    _avg?: PremiumContentAvgAggregateInputType
    _sum?: PremiumContentSumAggregateInputType
    _min?: PremiumContentMinAggregateInputType
    _max?: PremiumContentMaxAggregateInputType
  }

  export type PremiumContentGroupByOutputType = {
    id: string
    title: string
    category: string
    unlockPrice: number
    content: JsonValue
    discount: JsonValue | null
    createdById: string
    createdAt: Date
    _count: PremiumContentCountAggregateOutputType | null
    _avg: PremiumContentAvgAggregateOutputType | null
    _sum: PremiumContentSumAggregateOutputType | null
    _min: PremiumContentMinAggregateOutputType | null
    _max: PremiumContentMaxAggregateOutputType | null
  }

  type GetPremiumContentGroupByPayload<T extends PremiumContentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PremiumContentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PremiumContentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PremiumContentGroupByOutputType[P]>
            : GetScalarType<T[P], PremiumContentGroupByOutputType[P]>
        }
      >
    >


  export type PremiumContentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    unlockPrice?: boolean
    content?: boolean
    discount?: boolean
    createdById?: boolean
    createdAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    access?: boolean | PremiumContent$accessArgs<ExtArgs>
    _count?: boolean | PremiumContentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumContent"]>

  export type PremiumContentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    unlockPrice?: boolean
    content?: boolean
    discount?: boolean
    createdById?: boolean
    createdAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumContent"]>

  export type PremiumContentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    category?: boolean
    unlockPrice?: boolean
    content?: boolean
    discount?: boolean
    createdById?: boolean
    createdAt?: boolean
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumContent"]>

  export type PremiumContentSelectScalar = {
    id?: boolean
    title?: boolean
    category?: boolean
    unlockPrice?: boolean
    content?: boolean
    discount?: boolean
    createdById?: boolean
    createdAt?: boolean
  }

  export type PremiumContentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "category" | "unlockPrice" | "content" | "discount" | "createdById" | "createdAt", ExtArgs["result"]["premiumContent"]>
  export type PremiumContentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
    access?: boolean | PremiumContent$accessArgs<ExtArgs>
    _count?: boolean | PremiumContentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PremiumContentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PremiumContentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PremiumContentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PremiumContent"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs>
      access: Prisma.$PremiumContentAccessPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      category: string
      unlockPrice: number
      content: Prisma.JsonValue
      discount: Prisma.JsonValue | null
      createdById: string
      createdAt: Date
    }, ExtArgs["result"]["premiumContent"]>
    composites: {}
  }

  type PremiumContentGetPayload<S extends boolean | null | undefined | PremiumContentDefaultArgs> = $Result.GetResult<Prisma.$PremiumContentPayload, S>

  type PremiumContentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PremiumContentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PremiumContentCountAggregateInputType | true
    }

  export interface PremiumContentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PremiumContent'], meta: { name: 'PremiumContent' } }
    /**
     * Find zero or one PremiumContent that matches the filter.
     * @param {PremiumContentFindUniqueArgs} args - Arguments to find a PremiumContent
     * @example
     * // Get one PremiumContent
     * const premiumContent = await prisma.premiumContent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PremiumContentFindUniqueArgs>(args: SelectSubset<T, PremiumContentFindUniqueArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PremiumContent that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PremiumContentFindUniqueOrThrowArgs} args - Arguments to find a PremiumContent
     * @example
     * // Get one PremiumContent
     * const premiumContent = await prisma.premiumContent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PremiumContentFindUniqueOrThrowArgs>(args: SelectSubset<T, PremiumContentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PremiumContent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentFindFirstArgs} args - Arguments to find a PremiumContent
     * @example
     * // Get one PremiumContent
     * const premiumContent = await prisma.premiumContent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PremiumContentFindFirstArgs>(args?: SelectSubset<T, PremiumContentFindFirstArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PremiumContent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentFindFirstOrThrowArgs} args - Arguments to find a PremiumContent
     * @example
     * // Get one PremiumContent
     * const premiumContent = await prisma.premiumContent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PremiumContentFindFirstOrThrowArgs>(args?: SelectSubset<T, PremiumContentFindFirstOrThrowArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PremiumContents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PremiumContents
     * const premiumContents = await prisma.premiumContent.findMany()
     * 
     * // Get first 10 PremiumContents
     * const premiumContents = await prisma.premiumContent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const premiumContentWithIdOnly = await prisma.premiumContent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PremiumContentFindManyArgs>(args?: SelectSubset<T, PremiumContentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PremiumContent.
     * @param {PremiumContentCreateArgs} args - Arguments to create a PremiumContent.
     * @example
     * // Create one PremiumContent
     * const PremiumContent = await prisma.premiumContent.create({
     *   data: {
     *     // ... data to create a PremiumContent
     *   }
     * })
     * 
     */
    create<T extends PremiumContentCreateArgs>(args: SelectSubset<T, PremiumContentCreateArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PremiumContents.
     * @param {PremiumContentCreateManyArgs} args - Arguments to create many PremiumContents.
     * @example
     * // Create many PremiumContents
     * const premiumContent = await prisma.premiumContent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PremiumContentCreateManyArgs>(args?: SelectSubset<T, PremiumContentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PremiumContents and returns the data saved in the database.
     * @param {PremiumContentCreateManyAndReturnArgs} args - Arguments to create many PremiumContents.
     * @example
     * // Create many PremiumContents
     * const premiumContent = await prisma.premiumContent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PremiumContents and only return the `id`
     * const premiumContentWithIdOnly = await prisma.premiumContent.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PremiumContentCreateManyAndReturnArgs>(args?: SelectSubset<T, PremiumContentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PremiumContent.
     * @param {PremiumContentDeleteArgs} args - Arguments to delete one PremiumContent.
     * @example
     * // Delete one PremiumContent
     * const PremiumContent = await prisma.premiumContent.delete({
     *   where: {
     *     // ... filter to delete one PremiumContent
     *   }
     * })
     * 
     */
    delete<T extends PremiumContentDeleteArgs>(args: SelectSubset<T, PremiumContentDeleteArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PremiumContent.
     * @param {PremiumContentUpdateArgs} args - Arguments to update one PremiumContent.
     * @example
     * // Update one PremiumContent
     * const premiumContent = await prisma.premiumContent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PremiumContentUpdateArgs>(args: SelectSubset<T, PremiumContentUpdateArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PremiumContents.
     * @param {PremiumContentDeleteManyArgs} args - Arguments to filter PremiumContents to delete.
     * @example
     * // Delete a few PremiumContents
     * const { count } = await prisma.premiumContent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PremiumContentDeleteManyArgs>(args?: SelectSubset<T, PremiumContentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PremiumContents
     * const premiumContent = await prisma.premiumContent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PremiumContentUpdateManyArgs>(args: SelectSubset<T, PremiumContentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumContents and returns the data updated in the database.
     * @param {PremiumContentUpdateManyAndReturnArgs} args - Arguments to update many PremiumContents.
     * @example
     * // Update many PremiumContents
     * const premiumContent = await prisma.premiumContent.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PremiumContents and only return the `id`
     * const premiumContentWithIdOnly = await prisma.premiumContent.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PremiumContentUpdateManyAndReturnArgs>(args: SelectSubset<T, PremiumContentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PremiumContent.
     * @param {PremiumContentUpsertArgs} args - Arguments to update or create a PremiumContent.
     * @example
     * // Update or create a PremiumContent
     * const premiumContent = await prisma.premiumContent.upsert({
     *   create: {
     *     // ... data to create a PremiumContent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PremiumContent we want to update
     *   }
     * })
     */
    upsert<T extends PremiumContentUpsertArgs>(args: SelectSubset<T, PremiumContentUpsertArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PremiumContents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentCountArgs} args - Arguments to filter PremiumContents to count.
     * @example
     * // Count the number of PremiumContents
     * const count = await prisma.premiumContent.count({
     *   where: {
     *     // ... the filter for the PremiumContents we want to count
     *   }
     * })
    **/
    count<T extends PremiumContentCountArgs>(
      args?: Subset<T, PremiumContentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PremiumContentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PremiumContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PremiumContentAggregateArgs>(args: Subset<T, PremiumContentAggregateArgs>): Prisma.PrismaPromise<GetPremiumContentAggregateType<T>>

    /**
     * Group by PremiumContent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PremiumContentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PremiumContentGroupByArgs['orderBy'] }
        : { orderBy?: PremiumContentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PremiumContentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPremiumContentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PremiumContent model
   */
  readonly fields: PremiumContentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PremiumContent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PremiumContentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    access<T extends PremiumContent$accessArgs<ExtArgs> = {}>(args?: Subset<T, PremiumContent$accessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PremiumContent model
   */
  interface PremiumContentFieldRefs {
    readonly id: FieldRef<"PremiumContent", 'String'>
    readonly title: FieldRef<"PremiumContent", 'String'>
    readonly category: FieldRef<"PremiumContent", 'String'>
    readonly unlockPrice: FieldRef<"PremiumContent", 'Float'>
    readonly content: FieldRef<"PremiumContent", 'Json'>
    readonly discount: FieldRef<"PremiumContent", 'Json'>
    readonly createdById: FieldRef<"PremiumContent", 'String'>
    readonly createdAt: FieldRef<"PremiumContent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PremiumContent findUnique
   */
  export type PremiumContentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContent to fetch.
     */
    where: PremiumContentWhereUniqueInput
  }

  /**
   * PremiumContent findUniqueOrThrow
   */
  export type PremiumContentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContent to fetch.
     */
    where: PremiumContentWhereUniqueInput
  }

  /**
   * PremiumContent findFirst
   */
  export type PremiumContentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContent to fetch.
     */
    where?: PremiumContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContents to fetch.
     */
    orderBy?: PremiumContentOrderByWithRelationInput | PremiumContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumContents.
     */
    cursor?: PremiumContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumContents.
     */
    distinct?: PremiumContentScalarFieldEnum | PremiumContentScalarFieldEnum[]
  }

  /**
   * PremiumContent findFirstOrThrow
   */
  export type PremiumContentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContent to fetch.
     */
    where?: PremiumContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContents to fetch.
     */
    orderBy?: PremiumContentOrderByWithRelationInput | PremiumContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumContents.
     */
    cursor?: PremiumContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumContents.
     */
    distinct?: PremiumContentScalarFieldEnum | PremiumContentScalarFieldEnum[]
  }

  /**
   * PremiumContent findMany
   */
  export type PremiumContentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContents to fetch.
     */
    where?: PremiumContentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContents to fetch.
     */
    orderBy?: PremiumContentOrderByWithRelationInput | PremiumContentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PremiumContents.
     */
    cursor?: PremiumContentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContents.
     */
    skip?: number
    distinct?: PremiumContentScalarFieldEnum | PremiumContentScalarFieldEnum[]
  }

  /**
   * PremiumContent create
   */
  export type PremiumContentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * The data needed to create a PremiumContent.
     */
    data: XOR<PremiumContentCreateInput, PremiumContentUncheckedCreateInput>
  }

  /**
   * PremiumContent createMany
   */
  export type PremiumContentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PremiumContents.
     */
    data: PremiumContentCreateManyInput | PremiumContentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PremiumContent createManyAndReturn
   */
  export type PremiumContentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * The data used to create many PremiumContents.
     */
    data: PremiumContentCreateManyInput | PremiumContentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PremiumContent update
   */
  export type PremiumContentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * The data needed to update a PremiumContent.
     */
    data: XOR<PremiumContentUpdateInput, PremiumContentUncheckedUpdateInput>
    /**
     * Choose, which PremiumContent to update.
     */
    where: PremiumContentWhereUniqueInput
  }

  /**
   * PremiumContent updateMany
   */
  export type PremiumContentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PremiumContents.
     */
    data: XOR<PremiumContentUpdateManyMutationInput, PremiumContentUncheckedUpdateManyInput>
    /**
     * Filter which PremiumContents to update
     */
    where?: PremiumContentWhereInput
    /**
     * Limit how many PremiumContents to update.
     */
    limit?: number
  }

  /**
   * PremiumContent updateManyAndReturn
   */
  export type PremiumContentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * The data used to update PremiumContents.
     */
    data: XOR<PremiumContentUpdateManyMutationInput, PremiumContentUncheckedUpdateManyInput>
    /**
     * Filter which PremiumContents to update
     */
    where?: PremiumContentWhereInput
    /**
     * Limit how many PremiumContents to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PremiumContent upsert
   */
  export type PremiumContentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * The filter to search for the PremiumContent to update in case it exists.
     */
    where: PremiumContentWhereUniqueInput
    /**
     * In case the PremiumContent found by the `where` argument doesn't exist, create a new PremiumContent with this data.
     */
    create: XOR<PremiumContentCreateInput, PremiumContentUncheckedCreateInput>
    /**
     * In case the PremiumContent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PremiumContentUpdateInput, PremiumContentUncheckedUpdateInput>
  }

  /**
   * PremiumContent delete
   */
  export type PremiumContentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
    /**
     * Filter which PremiumContent to delete.
     */
    where: PremiumContentWhereUniqueInput
  }

  /**
   * PremiumContent deleteMany
   */
  export type PremiumContentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumContents to delete
     */
    where?: PremiumContentWhereInput
    /**
     * Limit how many PremiumContents to delete.
     */
    limit?: number
  }

  /**
   * PremiumContent.access
   */
  export type PremiumContent$accessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    where?: PremiumContentAccessWhereInput
    orderBy?: PremiumContentAccessOrderByWithRelationInput | PremiumContentAccessOrderByWithRelationInput[]
    cursor?: PremiumContentAccessWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PremiumContentAccessScalarFieldEnum | PremiumContentAccessScalarFieldEnum[]
  }

  /**
   * PremiumContent without action
   */
  export type PremiumContentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContent
     */
    select?: PremiumContentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContent
     */
    omit?: PremiumContentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentInclude<ExtArgs> | null
  }


  /**
   * Model PremiumContentAccess
   */

  export type AggregatePremiumContentAccess = {
    _count: PremiumContentAccessCountAggregateOutputType | null
    _min: PremiumContentAccessMinAggregateOutputType | null
    _max: PremiumContentAccessMaxAggregateOutputType | null
  }

  export type PremiumContentAccessMinAggregateOutputType = {
    userId: string | null
    contentId: string | null
    purchasedAt: Date | null
    expiryDate: Date | null
  }

  export type PremiumContentAccessMaxAggregateOutputType = {
    userId: string | null
    contentId: string | null
    purchasedAt: Date | null
    expiryDate: Date | null
  }

  export type PremiumContentAccessCountAggregateOutputType = {
    userId: number
    contentId: number
    purchasedAt: number
    expiryDate: number
    _all: number
  }


  export type PremiumContentAccessMinAggregateInputType = {
    userId?: true
    contentId?: true
    purchasedAt?: true
    expiryDate?: true
  }

  export type PremiumContentAccessMaxAggregateInputType = {
    userId?: true
    contentId?: true
    purchasedAt?: true
    expiryDate?: true
  }

  export type PremiumContentAccessCountAggregateInputType = {
    userId?: true
    contentId?: true
    purchasedAt?: true
    expiryDate?: true
    _all?: true
  }

  export type PremiumContentAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumContentAccess to aggregate.
     */
    where?: PremiumContentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContentAccesses to fetch.
     */
    orderBy?: PremiumContentAccessOrderByWithRelationInput | PremiumContentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PremiumContentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContentAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PremiumContentAccesses
    **/
    _count?: true | PremiumContentAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PremiumContentAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PremiumContentAccessMaxAggregateInputType
  }

  export type GetPremiumContentAccessAggregateType<T extends PremiumContentAccessAggregateArgs> = {
        [P in keyof T & keyof AggregatePremiumContentAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePremiumContentAccess[P]>
      : GetScalarType<T[P], AggregatePremiumContentAccess[P]>
  }




  export type PremiumContentAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PremiumContentAccessWhereInput
    orderBy?: PremiumContentAccessOrderByWithAggregationInput | PremiumContentAccessOrderByWithAggregationInput[]
    by: PremiumContentAccessScalarFieldEnum[] | PremiumContentAccessScalarFieldEnum
    having?: PremiumContentAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PremiumContentAccessCountAggregateInputType | true
    _min?: PremiumContentAccessMinAggregateInputType
    _max?: PremiumContentAccessMaxAggregateInputType
  }

  export type PremiumContentAccessGroupByOutputType = {
    userId: string
    contentId: string
    purchasedAt: Date
    expiryDate: Date | null
    _count: PremiumContentAccessCountAggregateOutputType | null
    _min: PremiumContentAccessMinAggregateOutputType | null
    _max: PremiumContentAccessMaxAggregateOutputType | null
  }

  type GetPremiumContentAccessGroupByPayload<T extends PremiumContentAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PremiumContentAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PremiumContentAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PremiumContentAccessGroupByOutputType[P]>
            : GetScalarType<T[P], PremiumContentAccessGroupByOutputType[P]>
        }
      >
    >


  export type PremiumContentAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    contentId?: boolean
    purchasedAt?: boolean
    expiryDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    premiumContent?: boolean | PremiumContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumContentAccess"]>

  export type PremiumContentAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    contentId?: boolean
    purchasedAt?: boolean
    expiryDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    premiumContent?: boolean | PremiumContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumContentAccess"]>

  export type PremiumContentAccessSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    contentId?: boolean
    purchasedAt?: boolean
    expiryDate?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    premiumContent?: boolean | PremiumContentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["premiumContentAccess"]>

  export type PremiumContentAccessSelectScalar = {
    userId?: boolean
    contentId?: boolean
    purchasedAt?: boolean
    expiryDate?: boolean
  }

  export type PremiumContentAccessOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"userId" | "contentId" | "purchasedAt" | "expiryDate", ExtArgs["result"]["premiumContentAccess"]>
  export type PremiumContentAccessInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    premiumContent?: boolean | PremiumContentDefaultArgs<ExtArgs>
  }
  export type PremiumContentAccessIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    premiumContent?: boolean | PremiumContentDefaultArgs<ExtArgs>
  }
  export type PremiumContentAccessIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    premiumContent?: boolean | PremiumContentDefaultArgs<ExtArgs>
  }

  export type $PremiumContentAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PremiumContentAccess"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      premiumContent: Prisma.$PremiumContentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      contentId: string
      purchasedAt: Date
      expiryDate: Date | null
    }, ExtArgs["result"]["premiumContentAccess"]>
    composites: {}
  }

  type PremiumContentAccessGetPayload<S extends boolean | null | undefined | PremiumContentAccessDefaultArgs> = $Result.GetResult<Prisma.$PremiumContentAccessPayload, S>

  type PremiumContentAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PremiumContentAccessFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PremiumContentAccessCountAggregateInputType | true
    }

  export interface PremiumContentAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PremiumContentAccess'], meta: { name: 'PremiumContentAccess' } }
    /**
     * Find zero or one PremiumContentAccess that matches the filter.
     * @param {PremiumContentAccessFindUniqueArgs} args - Arguments to find a PremiumContentAccess
     * @example
     * // Get one PremiumContentAccess
     * const premiumContentAccess = await prisma.premiumContentAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PremiumContentAccessFindUniqueArgs>(args: SelectSubset<T, PremiumContentAccessFindUniqueArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PremiumContentAccess that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PremiumContentAccessFindUniqueOrThrowArgs} args - Arguments to find a PremiumContentAccess
     * @example
     * // Get one PremiumContentAccess
     * const premiumContentAccess = await prisma.premiumContentAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PremiumContentAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, PremiumContentAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PremiumContentAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAccessFindFirstArgs} args - Arguments to find a PremiumContentAccess
     * @example
     * // Get one PremiumContentAccess
     * const premiumContentAccess = await prisma.premiumContentAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PremiumContentAccessFindFirstArgs>(args?: SelectSubset<T, PremiumContentAccessFindFirstArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PremiumContentAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAccessFindFirstOrThrowArgs} args - Arguments to find a PremiumContentAccess
     * @example
     * // Get one PremiumContentAccess
     * const premiumContentAccess = await prisma.premiumContentAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PremiumContentAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, PremiumContentAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PremiumContentAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PremiumContentAccesses
     * const premiumContentAccesses = await prisma.premiumContentAccess.findMany()
     * 
     * // Get first 10 PremiumContentAccesses
     * const premiumContentAccesses = await prisma.premiumContentAccess.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const premiumContentAccessWithUserIdOnly = await prisma.premiumContentAccess.findMany({ select: { userId: true } })
     * 
     */
    findMany<T extends PremiumContentAccessFindManyArgs>(args?: SelectSubset<T, PremiumContentAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PremiumContentAccess.
     * @param {PremiumContentAccessCreateArgs} args - Arguments to create a PremiumContentAccess.
     * @example
     * // Create one PremiumContentAccess
     * const PremiumContentAccess = await prisma.premiumContentAccess.create({
     *   data: {
     *     // ... data to create a PremiumContentAccess
     *   }
     * })
     * 
     */
    create<T extends PremiumContentAccessCreateArgs>(args: SelectSubset<T, PremiumContentAccessCreateArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PremiumContentAccesses.
     * @param {PremiumContentAccessCreateManyArgs} args - Arguments to create many PremiumContentAccesses.
     * @example
     * // Create many PremiumContentAccesses
     * const premiumContentAccess = await prisma.premiumContentAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PremiumContentAccessCreateManyArgs>(args?: SelectSubset<T, PremiumContentAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PremiumContentAccesses and returns the data saved in the database.
     * @param {PremiumContentAccessCreateManyAndReturnArgs} args - Arguments to create many PremiumContentAccesses.
     * @example
     * // Create many PremiumContentAccesses
     * const premiumContentAccess = await prisma.premiumContentAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PremiumContentAccesses and only return the `userId`
     * const premiumContentAccessWithUserIdOnly = await prisma.premiumContentAccess.createManyAndReturn({
     *   select: { userId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PremiumContentAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, PremiumContentAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PremiumContentAccess.
     * @param {PremiumContentAccessDeleteArgs} args - Arguments to delete one PremiumContentAccess.
     * @example
     * // Delete one PremiumContentAccess
     * const PremiumContentAccess = await prisma.premiumContentAccess.delete({
     *   where: {
     *     // ... filter to delete one PremiumContentAccess
     *   }
     * })
     * 
     */
    delete<T extends PremiumContentAccessDeleteArgs>(args: SelectSubset<T, PremiumContentAccessDeleteArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PremiumContentAccess.
     * @param {PremiumContentAccessUpdateArgs} args - Arguments to update one PremiumContentAccess.
     * @example
     * // Update one PremiumContentAccess
     * const premiumContentAccess = await prisma.premiumContentAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PremiumContentAccessUpdateArgs>(args: SelectSubset<T, PremiumContentAccessUpdateArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PremiumContentAccesses.
     * @param {PremiumContentAccessDeleteManyArgs} args - Arguments to filter PremiumContentAccesses to delete.
     * @example
     * // Delete a few PremiumContentAccesses
     * const { count } = await prisma.premiumContentAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PremiumContentAccessDeleteManyArgs>(args?: SelectSubset<T, PremiumContentAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumContentAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PremiumContentAccesses
     * const premiumContentAccess = await prisma.premiumContentAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PremiumContentAccessUpdateManyArgs>(args: SelectSubset<T, PremiumContentAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PremiumContentAccesses and returns the data updated in the database.
     * @param {PremiumContentAccessUpdateManyAndReturnArgs} args - Arguments to update many PremiumContentAccesses.
     * @example
     * // Update many PremiumContentAccesses
     * const premiumContentAccess = await prisma.premiumContentAccess.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PremiumContentAccesses and only return the `userId`
     * const premiumContentAccessWithUserIdOnly = await prisma.premiumContentAccess.updateManyAndReturn({
     *   select: { userId: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PremiumContentAccessUpdateManyAndReturnArgs>(args: SelectSubset<T, PremiumContentAccessUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PremiumContentAccess.
     * @param {PremiumContentAccessUpsertArgs} args - Arguments to update or create a PremiumContentAccess.
     * @example
     * // Update or create a PremiumContentAccess
     * const premiumContentAccess = await prisma.premiumContentAccess.upsert({
     *   create: {
     *     // ... data to create a PremiumContentAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PremiumContentAccess we want to update
     *   }
     * })
     */
    upsert<T extends PremiumContentAccessUpsertArgs>(args: SelectSubset<T, PremiumContentAccessUpsertArgs<ExtArgs>>): Prisma__PremiumContentAccessClient<$Result.GetResult<Prisma.$PremiumContentAccessPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PremiumContentAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAccessCountArgs} args - Arguments to filter PremiumContentAccesses to count.
     * @example
     * // Count the number of PremiumContentAccesses
     * const count = await prisma.premiumContentAccess.count({
     *   where: {
     *     // ... the filter for the PremiumContentAccesses we want to count
     *   }
     * })
    **/
    count<T extends PremiumContentAccessCountArgs>(
      args?: Subset<T, PremiumContentAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PremiumContentAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PremiumContentAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PremiumContentAccessAggregateArgs>(args: Subset<T, PremiumContentAccessAggregateArgs>): Prisma.PrismaPromise<GetPremiumContentAccessAggregateType<T>>

    /**
     * Group by PremiumContentAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PremiumContentAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PremiumContentAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PremiumContentAccessGroupByArgs['orderBy'] }
        : { orderBy?: PremiumContentAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PremiumContentAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPremiumContentAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PremiumContentAccess model
   */
  readonly fields: PremiumContentAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PremiumContentAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PremiumContentAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    premiumContent<T extends PremiumContentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PremiumContentDefaultArgs<ExtArgs>>): Prisma__PremiumContentClient<$Result.GetResult<Prisma.$PremiumContentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PremiumContentAccess model
   */
  interface PremiumContentAccessFieldRefs {
    readonly userId: FieldRef<"PremiumContentAccess", 'String'>
    readonly contentId: FieldRef<"PremiumContentAccess", 'String'>
    readonly purchasedAt: FieldRef<"PremiumContentAccess", 'DateTime'>
    readonly expiryDate: FieldRef<"PremiumContentAccess", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * PremiumContentAccess findUnique
   */
  export type PremiumContentAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContentAccess to fetch.
     */
    where: PremiumContentAccessWhereUniqueInput
  }

  /**
   * PremiumContentAccess findUniqueOrThrow
   */
  export type PremiumContentAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContentAccess to fetch.
     */
    where: PremiumContentAccessWhereUniqueInput
  }

  /**
   * PremiumContentAccess findFirst
   */
  export type PremiumContentAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContentAccess to fetch.
     */
    where?: PremiumContentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContentAccesses to fetch.
     */
    orderBy?: PremiumContentAccessOrderByWithRelationInput | PremiumContentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumContentAccesses.
     */
    cursor?: PremiumContentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContentAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumContentAccesses.
     */
    distinct?: PremiumContentAccessScalarFieldEnum | PremiumContentAccessScalarFieldEnum[]
  }

  /**
   * PremiumContentAccess findFirstOrThrow
   */
  export type PremiumContentAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContentAccess to fetch.
     */
    where?: PremiumContentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContentAccesses to fetch.
     */
    orderBy?: PremiumContentAccessOrderByWithRelationInput | PremiumContentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PremiumContentAccesses.
     */
    cursor?: PremiumContentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContentAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PremiumContentAccesses.
     */
    distinct?: PremiumContentAccessScalarFieldEnum | PremiumContentAccessScalarFieldEnum[]
  }

  /**
   * PremiumContentAccess findMany
   */
  export type PremiumContentAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * Filter, which PremiumContentAccesses to fetch.
     */
    where?: PremiumContentAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PremiumContentAccesses to fetch.
     */
    orderBy?: PremiumContentAccessOrderByWithRelationInput | PremiumContentAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PremiumContentAccesses.
     */
    cursor?: PremiumContentAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PremiumContentAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PremiumContentAccesses.
     */
    skip?: number
    distinct?: PremiumContentAccessScalarFieldEnum | PremiumContentAccessScalarFieldEnum[]
  }

  /**
   * PremiumContentAccess create
   */
  export type PremiumContentAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * The data needed to create a PremiumContentAccess.
     */
    data: XOR<PremiumContentAccessCreateInput, PremiumContentAccessUncheckedCreateInput>
  }

  /**
   * PremiumContentAccess createMany
   */
  export type PremiumContentAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PremiumContentAccesses.
     */
    data: PremiumContentAccessCreateManyInput | PremiumContentAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PremiumContentAccess createManyAndReturn
   */
  export type PremiumContentAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * The data used to create many PremiumContentAccesses.
     */
    data: PremiumContentAccessCreateManyInput | PremiumContentAccessCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PremiumContentAccess update
   */
  export type PremiumContentAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * The data needed to update a PremiumContentAccess.
     */
    data: XOR<PremiumContentAccessUpdateInput, PremiumContentAccessUncheckedUpdateInput>
    /**
     * Choose, which PremiumContentAccess to update.
     */
    where: PremiumContentAccessWhereUniqueInput
  }

  /**
   * PremiumContentAccess updateMany
   */
  export type PremiumContentAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PremiumContentAccesses.
     */
    data: XOR<PremiumContentAccessUpdateManyMutationInput, PremiumContentAccessUncheckedUpdateManyInput>
    /**
     * Filter which PremiumContentAccesses to update
     */
    where?: PremiumContentAccessWhereInput
    /**
     * Limit how many PremiumContentAccesses to update.
     */
    limit?: number
  }

  /**
   * PremiumContentAccess updateManyAndReturn
   */
  export type PremiumContentAccessUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * The data used to update PremiumContentAccesses.
     */
    data: XOR<PremiumContentAccessUpdateManyMutationInput, PremiumContentAccessUncheckedUpdateManyInput>
    /**
     * Filter which PremiumContentAccesses to update
     */
    where?: PremiumContentAccessWhereInput
    /**
     * Limit how many PremiumContentAccesses to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PremiumContentAccess upsert
   */
  export type PremiumContentAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * The filter to search for the PremiumContentAccess to update in case it exists.
     */
    where: PremiumContentAccessWhereUniqueInput
    /**
     * In case the PremiumContentAccess found by the `where` argument doesn't exist, create a new PremiumContentAccess with this data.
     */
    create: XOR<PremiumContentAccessCreateInput, PremiumContentAccessUncheckedCreateInput>
    /**
     * In case the PremiumContentAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PremiumContentAccessUpdateInput, PremiumContentAccessUncheckedUpdateInput>
  }

  /**
   * PremiumContentAccess delete
   */
  export type PremiumContentAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
    /**
     * Filter which PremiumContentAccess to delete.
     */
    where: PremiumContentAccessWhereUniqueInput
  }

  /**
   * PremiumContentAccess deleteMany
   */
  export type PremiumContentAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PremiumContentAccesses to delete
     */
    where?: PremiumContentAccessWhereInput
    /**
     * Limit how many PremiumContentAccesses to delete.
     */
    limit?: number
  }

  /**
   * PremiumContentAccess without action
   */
  export type PremiumContentAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PremiumContentAccess
     */
    select?: PremiumContentAccessSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PremiumContentAccess
     */
    omit?: PremiumContentAccessOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PremiumContentAccessInclude<ExtArgs> | null
  }


  /**
   * Model Newsletter
   */

  export type AggregateNewsletter = {
    _count: NewsletterCountAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  export type NewsletterMinAggregateOutputType = {
    id: string | null
    email: string | null
    isSubscribed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsletterMaxAggregateOutputType = {
    id: string | null
    email: string | null
    isSubscribed: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type NewsletterCountAggregateOutputType = {
    id: number
    email: number
    isSubscribed: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type NewsletterMinAggregateInputType = {
    id?: true
    email?: true
    isSubscribed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsletterMaxAggregateInputType = {
    id?: true
    email?: true
    isSubscribed?: true
    createdAt?: true
    updatedAt?: true
  }

  export type NewsletterCountAggregateInputType = {
    id?: true
    email?: true
    isSubscribed?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type NewsletterAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Newsletter to aggregate.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Newsletters
    **/
    _count?: true | NewsletterCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NewsletterMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NewsletterMaxAggregateInputType
  }

  export type GetNewsletterAggregateType<T extends NewsletterAggregateArgs> = {
        [P in keyof T & keyof AggregateNewsletter]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNewsletter[P]>
      : GetScalarType<T[P], AggregateNewsletter[P]>
  }




  export type NewsletterGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NewsletterWhereInput
    orderBy?: NewsletterOrderByWithAggregationInput | NewsletterOrderByWithAggregationInput[]
    by: NewsletterScalarFieldEnum[] | NewsletterScalarFieldEnum
    having?: NewsletterScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NewsletterCountAggregateInputType | true
    _min?: NewsletterMinAggregateInputType
    _max?: NewsletterMaxAggregateInputType
  }

  export type NewsletterGroupByOutputType = {
    id: string
    email: string
    isSubscribed: boolean
    createdAt: Date
    updatedAt: Date
    _count: NewsletterCountAggregateOutputType | null
    _min: NewsletterMinAggregateOutputType | null
    _max: NewsletterMaxAggregateOutputType | null
  }

  type GetNewsletterGroupByPayload<T extends NewsletterGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NewsletterGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NewsletterGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
            : GetScalarType<T[P], NewsletterGroupByOutputType[P]>
        }
      >
    >


  export type NewsletterSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    isSubscribed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type NewsletterSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    isSubscribed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type NewsletterSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    isSubscribed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["newsletter"]>

  export type NewsletterSelectScalar = {
    id?: boolean
    email?: boolean
    isSubscribed?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type NewsletterOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "isSubscribed" | "createdAt" | "updatedAt", ExtArgs["result"]["newsletter"]>

  export type $NewsletterPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Newsletter"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      isSubscribed: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["newsletter"]>
    composites: {}
  }

  type NewsletterGetPayload<S extends boolean | null | undefined | NewsletterDefaultArgs> = $Result.GetResult<Prisma.$NewsletterPayload, S>

  type NewsletterCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NewsletterFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NewsletterCountAggregateInputType | true
    }

  export interface NewsletterDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Newsletter'], meta: { name: 'Newsletter' } }
    /**
     * Find zero or one Newsletter that matches the filter.
     * @param {NewsletterFindUniqueArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NewsletterFindUniqueArgs>(args: SelectSubset<T, NewsletterFindUniqueArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Newsletter that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NewsletterFindUniqueOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NewsletterFindUniqueOrThrowArgs>(args: SelectSubset<T, NewsletterFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Newsletter that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindFirstArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NewsletterFindFirstArgs>(args?: SelectSubset<T, NewsletterFindFirstArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Newsletter that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindFirstOrThrowArgs} args - Arguments to find a Newsletter
     * @example
     * // Get one Newsletter
     * const newsletter = await prisma.newsletter.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NewsletterFindFirstOrThrowArgs>(args?: SelectSubset<T, NewsletterFindFirstOrThrowArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Newsletters that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Newsletters
     * const newsletters = await prisma.newsletter.findMany()
     * 
     * // Get first 10 Newsletters
     * const newsletters = await prisma.newsletter.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NewsletterFindManyArgs>(args?: SelectSubset<T, NewsletterFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Newsletter.
     * @param {NewsletterCreateArgs} args - Arguments to create a Newsletter.
     * @example
     * // Create one Newsletter
     * const Newsletter = await prisma.newsletter.create({
     *   data: {
     *     // ... data to create a Newsletter
     *   }
     * })
     * 
     */
    create<T extends NewsletterCreateArgs>(args: SelectSubset<T, NewsletterCreateArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Newsletters.
     * @param {NewsletterCreateManyArgs} args - Arguments to create many Newsletters.
     * @example
     * // Create many Newsletters
     * const newsletter = await prisma.newsletter.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NewsletterCreateManyArgs>(args?: SelectSubset<T, NewsletterCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Newsletters and returns the data saved in the database.
     * @param {NewsletterCreateManyAndReturnArgs} args - Arguments to create many Newsletters.
     * @example
     * // Create many Newsletters
     * const newsletter = await prisma.newsletter.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Newsletters and only return the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NewsletterCreateManyAndReturnArgs>(args?: SelectSubset<T, NewsletterCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Newsletter.
     * @param {NewsletterDeleteArgs} args - Arguments to delete one Newsletter.
     * @example
     * // Delete one Newsletter
     * const Newsletter = await prisma.newsletter.delete({
     *   where: {
     *     // ... filter to delete one Newsletter
     *   }
     * })
     * 
     */
    delete<T extends NewsletterDeleteArgs>(args: SelectSubset<T, NewsletterDeleteArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Newsletter.
     * @param {NewsletterUpdateArgs} args - Arguments to update one Newsletter.
     * @example
     * // Update one Newsletter
     * const newsletter = await prisma.newsletter.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NewsletterUpdateArgs>(args: SelectSubset<T, NewsletterUpdateArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Newsletters.
     * @param {NewsletterDeleteManyArgs} args - Arguments to filter Newsletters to delete.
     * @example
     * // Delete a few Newsletters
     * const { count } = await prisma.newsletter.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NewsletterDeleteManyArgs>(args?: SelectSubset<T, NewsletterDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Newsletters
     * const newsletter = await prisma.newsletter.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NewsletterUpdateManyArgs>(args: SelectSubset<T, NewsletterUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Newsletters and returns the data updated in the database.
     * @param {NewsletterUpdateManyAndReturnArgs} args - Arguments to update many Newsletters.
     * @example
     * // Update many Newsletters
     * const newsletter = await prisma.newsletter.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Newsletters and only return the `id`
     * const newsletterWithIdOnly = await prisma.newsletter.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NewsletterUpdateManyAndReturnArgs>(args: SelectSubset<T, NewsletterUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Newsletter.
     * @param {NewsletterUpsertArgs} args - Arguments to update or create a Newsletter.
     * @example
     * // Update or create a Newsletter
     * const newsletter = await prisma.newsletter.upsert({
     *   create: {
     *     // ... data to create a Newsletter
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Newsletter we want to update
     *   }
     * })
     */
    upsert<T extends NewsletterUpsertArgs>(args: SelectSubset<T, NewsletterUpsertArgs<ExtArgs>>): Prisma__NewsletterClient<$Result.GetResult<Prisma.$NewsletterPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Newsletters.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterCountArgs} args - Arguments to filter Newsletters to count.
     * @example
     * // Count the number of Newsletters
     * const count = await prisma.newsletter.count({
     *   where: {
     *     // ... the filter for the Newsletters we want to count
     *   }
     * })
    **/
    count<T extends NewsletterCountArgs>(
      args?: Subset<T, NewsletterCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NewsletterCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NewsletterAggregateArgs>(args: Subset<T, NewsletterAggregateArgs>): Prisma.PrismaPromise<GetNewsletterAggregateType<T>>

    /**
     * Group by Newsletter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NewsletterGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NewsletterGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NewsletterGroupByArgs['orderBy'] }
        : { orderBy?: NewsletterGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NewsletterGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNewsletterGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Newsletter model
   */
  readonly fields: NewsletterFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Newsletter.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NewsletterClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Newsletter model
   */
  interface NewsletterFieldRefs {
    readonly id: FieldRef<"Newsletter", 'String'>
    readonly email: FieldRef<"Newsletter", 'String'>
    readonly isSubscribed: FieldRef<"Newsletter", 'Boolean'>
    readonly createdAt: FieldRef<"Newsletter", 'DateTime'>
    readonly updatedAt: FieldRef<"Newsletter", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Newsletter findUnique
   */
  export type NewsletterFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter findUniqueOrThrow
   */
  export type NewsletterFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter findFirst
   */
  export type NewsletterFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * Newsletter findFirstOrThrow
   */
  export type NewsletterFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * Filter, which Newsletter to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Newsletters.
     */
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * Newsletter findMany
   */
  export type NewsletterFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * Filter, which Newsletters to fetch.
     */
    where?: NewsletterWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Newsletters to fetch.
     */
    orderBy?: NewsletterOrderByWithRelationInput | NewsletterOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Newsletters.
     */
    cursor?: NewsletterWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Newsletters from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Newsletters.
     */
    skip?: number
    distinct?: NewsletterScalarFieldEnum | NewsletterScalarFieldEnum[]
  }

  /**
   * Newsletter create
   */
  export type NewsletterCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * The data needed to create a Newsletter.
     */
    data: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
  }

  /**
   * Newsletter createMany
   */
  export type NewsletterCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Newsletters.
     */
    data: NewsletterCreateManyInput | NewsletterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Newsletter createManyAndReturn
   */
  export type NewsletterCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * The data used to create many Newsletters.
     */
    data: NewsletterCreateManyInput | NewsletterCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Newsletter update
   */
  export type NewsletterUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * The data needed to update a Newsletter.
     */
    data: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
    /**
     * Choose, which Newsletter to update.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter updateMany
   */
  export type NewsletterUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Newsletters.
     */
    data: XOR<NewsletterUpdateManyMutationInput, NewsletterUncheckedUpdateManyInput>
    /**
     * Filter which Newsletters to update
     */
    where?: NewsletterWhereInput
    /**
     * Limit how many Newsletters to update.
     */
    limit?: number
  }

  /**
   * Newsletter updateManyAndReturn
   */
  export type NewsletterUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * The data used to update Newsletters.
     */
    data: XOR<NewsletterUpdateManyMutationInput, NewsletterUncheckedUpdateManyInput>
    /**
     * Filter which Newsletters to update
     */
    where?: NewsletterWhereInput
    /**
     * Limit how many Newsletters to update.
     */
    limit?: number
  }

  /**
   * Newsletter upsert
   */
  export type NewsletterUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * The filter to search for the Newsletter to update in case it exists.
     */
    where: NewsletterWhereUniqueInput
    /**
     * In case the Newsletter found by the `where` argument doesn't exist, create a new Newsletter with this data.
     */
    create: XOR<NewsletterCreateInput, NewsletterUncheckedCreateInput>
    /**
     * In case the Newsletter was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NewsletterUpdateInput, NewsletterUncheckedUpdateInput>
  }

  /**
   * Newsletter delete
   */
  export type NewsletterDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
    /**
     * Filter which Newsletter to delete.
     */
    where: NewsletterWhereUniqueInput
  }

  /**
   * Newsletter deleteMany
   */
  export type NewsletterDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Newsletters to delete
     */
    where?: NewsletterWhereInput
    /**
     * Limit how many Newsletters to delete.
     */
    limit?: number
  }

  /**
   * Newsletter without action
   */
  export type NewsletterDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Newsletter
     */
    select?: NewsletterSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Newsletter
     */
    omit?: NewsletterOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phone: 'phone',
    name: 'name',
    socialMedia: 'socialMedia',
    goals: 'goals',
    heardAboutUs: 'heardAboutUs',
    role: 'role',
    verified: 'verified',
    creatorComission: 'creatorComission'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OtpScalarFieldEnum: {
    id: 'id',
    phoneNumber: 'phoneNumber',
    phoneCodeHash: 'phoneCodeHash',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    updatedAt: 'updatedAt'
  };

  export type OtpScalarFieldEnum = (typeof OtpScalarFieldEnum)[keyof typeof OtpScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    balance: 'balance',
    totalEarnings: 'totalEarnings',
    totalWithdrawals: 'totalWithdrawals',
    isKycVerified: 'isKycVerified',
    mpin: 'mpin',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const BankDetailsScalarFieldEnum: {
    id: 'id',
    accountHolderName: 'accountHolderName',
    accountNumber: 'accountNumber',
    ifscCode: 'ifscCode',
    bankDocument: 'bankDocument',
    upiId: 'upiId',
    razorpayContactID: 'razorpayContactID',
    razorpayFundAccountID: 'razorpayFundAccountID',
    userId: 'userId',
    primary: 'primary',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BankDetailsScalarFieldEnum = (typeof BankDetailsScalarFieldEnum)[keyof typeof BankDetailsScalarFieldEnum]


  export const UPIScalarFieldEnum: {
    id: 'id',
    upiId: 'upiId',
    razorpayFundAccountID: 'razorpayFundAccountID',
    razorpayContactID: 'razorpayContactID',
    bankDetailsId: 'bankDetailsId',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UPIScalarFieldEnum = (typeof UPIScalarFieldEnum)[keyof typeof UPIScalarFieldEnum]


  export const KycRecordsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    socialMedia: 'socialMedia',
    aadhaarNumber: 'aadhaarNumber',
    aadhaarFront: 'aadhaarFront',
    aadhaarBack: 'aadhaarBack',
    panCard: 'panCard',
    selfie: 'selfie',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    status: 'status'
  };

  export type KycRecordsScalarFieldEnum = (typeof KycRecordsScalarFieldEnum)[keyof typeof KycRecordsScalarFieldEnum]


  export const BusinessInfoScalarFieldEnum: {
    id: 'id',
    firstName: 'firstName',
    lastName: 'lastName',
    businessStructure: 'businessStructure',
    gstNumber: 'gstNumber',
    sebiNumber: 'sebiNumber',
    sebiCertificate: 'sebiCertificate',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type BusinessInfoScalarFieldEnum = (typeof BusinessInfoScalarFieldEnum)[keyof typeof BusinessInfoScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    walletId: 'walletId',
    amount: 'amount',
    email: 'email',
    phoneNumber: 'phoneNumber',
    product: 'product',
    modeOfPayment: 'modeOfPayment',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const WithdrawalScalarFieldEnum: {
    id: 'id',
    walletId: 'walletId',
    amount: 'amount',
    modeOfWithdrawal: 'modeOfWithdrawal',
    bankDetailsId: 'bankDetailsId',
    upiId: 'upiId',
    status: 'status',
    razorpayPayoutID: 'razorpayPayoutID',
    createdAt: 'createdAt'
  };

  export type WithdrawalScalarFieldEnum = (typeof WithdrawalScalarFieldEnum)[keyof typeof WithdrawalScalarFieldEnum]


  export const WebinarScalarFieldEnum: {
    id: 'id',
    title: 'title',
    category: 'category',
    coverImage: 'coverImage',
    occurrence: 'occurrence',
    startDate: 'startDate',
    paymentEnabled: 'paymentEnabled',
    endDate: 'endDate',
    isOnline: 'isOnline',
    venue: 'venue',
    link: 'link',
    discount: 'discount',
    isPaid: 'isPaid',
    quantity: 'quantity',
    amount: 'amount',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type WebinarScalarFieldEnum = (typeof WebinarScalarFieldEnum)[keyof typeof WebinarScalarFieldEnum]


  export const WebinarTicketScalarFieldEnum: {
    id: 'id',
    webinarId: 'webinarId',
    boughtById: 'boughtById',
    paymentId: 'paymentId',
    orderId: 'orderId'
  };

  export type WebinarTicketScalarFieldEnum = (typeof WebinarTicketScalarFieldEnum)[keyof typeof WebinarTicketScalarFieldEnum]


  export const CourseScalarFieldEnum: {
    id: 'id',
    title: 'title',
    price: 'price',
    discount: 'discount',
    validity: 'validity',
    aboutThisCourse: 'aboutThisCourse',
    testimonials: 'testimonials',
    courseBenefits: 'courseBenefits',
    faqs: 'faqs',
    gallery: 'gallery',
    coverImage: 'coverImage',
    language: 'language',
    startDate: 'startDate',
    endDate: 'endDate',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CourseScalarFieldEnum = (typeof CourseScalarFieldEnum)[keyof typeof CourseScalarFieldEnum]


  export const CourseProductScalarFieldEnum: {
    id: 'id',
    title: 'title',
    isActive: 'isActive',
    productMetaData: 'productMetaData',
    courseId: 'courseId'
  };

  export type CourseProductScalarFieldEnum = (typeof CourseProductScalarFieldEnum)[keyof typeof CourseProductScalarFieldEnum]


  export const LessonsScalarFieldEnum: {
    id: 'id',
    isActive: 'isActive',
    lessonData: 'lessonData',
    courseId: 'courseId'
  };

  export type LessonsScalarFieldEnum = (typeof LessonsScalarFieldEnum)[keyof typeof LessonsScalarFieldEnum]


  export const CoursePurchasersScalarFieldEnum: {
    id: 'id',
    courseId: 'courseId',
    purchaserId: 'purchaserId',
    paymentId: 'paymentId',
    orderId: 'orderId',
    createdAt: 'createdAt'
  };

  export type CoursePurchasersScalarFieldEnum = (typeof CoursePurchasersScalarFieldEnum)[keyof typeof CoursePurchasersScalarFieldEnum]


  export const PayingUpScalarFieldEnum: {
    id: 'id',
    title: 'title',
    description: 'description',
    discount: 'discount',
    paymentDetails: 'paymentDetails',
    category: 'category',
    testimonials: 'testimonials',
    faqs: 'faqs',
    refundPolicies: 'refundPolicies',
    tacs: 'tacs',
    coverImage: 'coverImage',
    files: 'files',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PayingUpScalarFieldEnum = (typeof PayingUpScalarFieldEnum)[keyof typeof PayingUpScalarFieldEnum]


  export const PayingUpTicketScalarFieldEnum: {
    id: 'id',
    payingUpId: 'payingUpId',
    boughtById: 'boughtById',
    paymentId: 'paymentId',
    orderId: 'orderId'
  };

  export type PayingUpTicketScalarFieldEnum = (typeof PayingUpTicketScalarFieldEnum)[keyof typeof PayingUpTicketScalarFieldEnum]


  export const TelegramScalarFieldEnum: {
    id: 'id',
    coverImage: 'coverImage',
    channelLink: 'channelLink',
    title: 'title',
    description: 'description',
    genre: 'genre',
    discount: 'discount',
    subscription: 'subscription',
    createdById: 'createdById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TelegramScalarFieldEnum = (typeof TelegramScalarFieldEnum)[keyof typeof TelegramScalarFieldEnum]


  export const TelegramSubscriptionScalarFieldEnum: {
    id: 'id',
    validDays: 'validDays',
    telegramId: 'telegramId',
    chatId: 'chatId',
    boughtById: 'boughtById',
    paymentId: 'paymentId',
    orderId: 'orderId',
    createdAt: 'createdAt'
  };

  export type TelegramSubscriptionScalarFieldEnum = (typeof TelegramSubscriptionScalarFieldEnum)[keyof typeof TelegramSubscriptionScalarFieldEnum]


  export const PremiumContentScalarFieldEnum: {
    id: 'id',
    title: 'title',
    category: 'category',
    unlockPrice: 'unlockPrice',
    content: 'content',
    discount: 'discount',
    createdById: 'createdById',
    createdAt: 'createdAt'
  };

  export type PremiumContentScalarFieldEnum = (typeof PremiumContentScalarFieldEnum)[keyof typeof PremiumContentScalarFieldEnum]


  export const PremiumContentAccessScalarFieldEnum: {
    userId: 'userId',
    contentId: 'contentId',
    purchasedAt: 'purchasedAt',
    expiryDate: 'expiryDate'
  };

  export type PremiumContentAccessScalarFieldEnum = (typeof PremiumContentAccessScalarFieldEnum)[keyof typeof PremiumContentAccessScalarFieldEnum]


  export const NewsletterScalarFieldEnum: {
    id: 'id',
    email: 'email',
    isSubscribed: 'isSubscribed',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type NewsletterScalarFieldEnum = (typeof NewsletterScalarFieldEnum)[keyof typeof NewsletterScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    phone?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    socialMedia?: StringFilter<"User"> | string
    goals?: StringNullableListFilter<"User">
    heardAboutUs?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    verified?: BoolFilter<"User"> | boolean
    creatorComission?: IntNullableFilter<"User"> | number | null
    boughtWebinarTickets?: WebinarTicketListRelationFilter
    boughtPayingUpTickets?: PayingUpTicketListRelationFilter
    boughtTelegramSubscriptions?: TelegramSubscriptionListRelationFilter
    createdWebinars?: WebinarListRelationFilter
    createdCourses?: CourseListRelationFilter
    createdPayingUps?: PayingUpListRelationFilter
    createdTelegrams?: TelegramListRelationFilter
    wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    CoursePurchasers?: CoursePurchasersListRelationFilter
    businessInfo?: XOR<BusinessInfoNullableScalarRelationFilter, BusinessInfoWhereInput> | null
    kycRecords?: XOR<KycRecordsNullableScalarRelationFilter, kycRecordsWhereInput> | null
    BankAccounts?: BankDetailsListRelationFilter
    upiIds?: UPIListRelationFilter
    premiumContent?: PremiumContentListRelationFilter
    premiumAccess?: PremiumContentAccessListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    socialMedia?: SortOrder
    goals?: SortOrder
    heardAboutUs?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    creatorComission?: SortOrderInput | SortOrder
    boughtWebinarTickets?: WebinarTicketOrderByRelationAggregateInput
    boughtPayingUpTickets?: PayingUpTicketOrderByRelationAggregateInput
    boughtTelegramSubscriptions?: TelegramSubscriptionOrderByRelationAggregateInput
    createdWebinars?: WebinarOrderByRelationAggregateInput
    createdCourses?: CourseOrderByRelationAggregateInput
    createdPayingUps?: PayingUpOrderByRelationAggregateInput
    createdTelegrams?: TelegramOrderByRelationAggregateInput
    wallet?: WalletOrderByWithRelationInput
    CoursePurchasers?: CoursePurchasersOrderByRelationAggregateInput
    businessInfo?: BusinessInfoOrderByWithRelationInput
    kycRecords?: kycRecordsOrderByWithRelationInput
    BankAccounts?: BankDetailsOrderByRelationAggregateInput
    upiIds?: UPIOrderByRelationAggregateInput
    premiumContent?: PremiumContentOrderByRelationAggregateInput
    premiumAccess?: PremiumContentAccessOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    socialMedia?: StringFilter<"User"> | string
    goals?: StringNullableListFilter<"User">
    heardAboutUs?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    verified?: BoolFilter<"User"> | boolean
    creatorComission?: IntNullableFilter<"User"> | number | null
    boughtWebinarTickets?: WebinarTicketListRelationFilter
    boughtPayingUpTickets?: PayingUpTicketListRelationFilter
    boughtTelegramSubscriptions?: TelegramSubscriptionListRelationFilter
    createdWebinars?: WebinarListRelationFilter
    createdCourses?: CourseListRelationFilter
    createdPayingUps?: PayingUpListRelationFilter
    createdTelegrams?: TelegramListRelationFilter
    wallet?: XOR<WalletNullableScalarRelationFilter, WalletWhereInput> | null
    CoursePurchasers?: CoursePurchasersListRelationFilter
    businessInfo?: XOR<BusinessInfoNullableScalarRelationFilter, BusinessInfoWhereInput> | null
    kycRecords?: XOR<KycRecordsNullableScalarRelationFilter, kycRecordsWhereInput> | null
    BankAccounts?: BankDetailsListRelationFilter
    upiIds?: UPIListRelationFilter
    premiumContent?: PremiumContentListRelationFilter
    premiumAccess?: PremiumContentAccessListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    socialMedia?: SortOrder
    goals?: SortOrder
    heardAboutUs?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    creatorComission?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    phone?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    socialMedia?: StringWithAggregatesFilter<"User"> | string
    goals?: StringNullableListFilter<"User">
    heardAboutUs?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    verified?: BoolWithAggregatesFilter<"User"> | boolean
    creatorComission?: IntNullableWithAggregatesFilter<"User"> | number | null
  }

  export type OtpWhereInput = {
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    id?: StringFilter<"Otp"> | string
    phoneNumber?: StringFilter<"Otp"> | string
    phoneCodeHash?: StringFilter<"Otp"> | string
    createdAt?: DateTimeFilter<"Otp"> | Date | string
    expiresAt?: DateTimeFilter<"Otp"> | Date | string
    updatedAt?: DateTimeFilter<"Otp"> | Date | string
  }

  export type OtpOrderByWithRelationInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    phoneCodeHash?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OtpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    phoneNumber?: string
    AND?: OtpWhereInput | OtpWhereInput[]
    OR?: OtpWhereInput[]
    NOT?: OtpWhereInput | OtpWhereInput[]
    phoneCodeHash?: StringFilter<"Otp"> | string
    createdAt?: DateTimeFilter<"Otp"> | Date | string
    expiresAt?: DateTimeFilter<"Otp"> | Date | string
    updatedAt?: DateTimeFilter<"Otp"> | Date | string
  }, "id" | "phoneNumber">

  export type OtpOrderByWithAggregationInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    phoneCodeHash?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    updatedAt?: SortOrder
    _count?: OtpCountOrderByAggregateInput
    _max?: OtpMaxOrderByAggregateInput
    _min?: OtpMinOrderByAggregateInput
  }

  export type OtpScalarWhereWithAggregatesInput = {
    AND?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    OR?: OtpScalarWhereWithAggregatesInput[]
    NOT?: OtpScalarWhereWithAggregatesInput | OtpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Otp"> | string
    phoneNumber?: StringWithAggregatesFilter<"Otp"> | string
    phoneCodeHash?: StringWithAggregatesFilter<"Otp"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
    expiresAt?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Otp"> | Date | string
  }

  export type WalletWhereInput = {
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    id?: StringFilter<"Wallet"> | string
    userId?: StringFilter<"Wallet"> | string
    balance?: FloatFilter<"Wallet"> | number
    totalEarnings?: FloatFilter<"Wallet"> | number
    totalWithdrawals?: FloatFilter<"Wallet"> | number
    isKycVerified?: BoolFilter<"Wallet"> | boolean
    mpin?: StringNullableFilter<"Wallet"> | string | null
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionListRelationFilter
    withdrawals?: WithdrawalListRelationFilter
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    totalEarnings?: SortOrder
    totalWithdrawals?: SortOrder
    isKycVerified?: SortOrder
    mpin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    transactions?: TransactionOrderByRelationAggregateInput
    withdrawals?: WithdrawalOrderByRelationAggregateInput
  }

  export type WalletWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: WalletWhereInput | WalletWhereInput[]
    OR?: WalletWhereInput[]
    NOT?: WalletWhereInput | WalletWhereInput[]
    balance?: FloatFilter<"Wallet"> | number
    totalEarnings?: FloatFilter<"Wallet"> | number
    totalWithdrawals?: FloatFilter<"Wallet"> | number
    isKycVerified?: BoolFilter<"Wallet"> | boolean
    mpin?: StringNullableFilter<"Wallet"> | string | null
    createdAt?: DateTimeFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeFilter<"Wallet"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    transactions?: TransactionListRelationFilter
    withdrawals?: WithdrawalListRelationFilter
  }, "id" | "userId">

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    totalEarnings?: SortOrder
    totalWithdrawals?: SortOrder
    isKycVerified?: SortOrder
    mpin?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    OR?: WalletScalarWhereWithAggregatesInput[]
    NOT?: WalletScalarWhereWithAggregatesInput | WalletScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Wallet"> | string
    userId?: StringWithAggregatesFilter<"Wallet"> | string
    balance?: FloatWithAggregatesFilter<"Wallet"> | number
    totalEarnings?: FloatWithAggregatesFilter<"Wallet"> | number
    totalWithdrawals?: FloatWithAggregatesFilter<"Wallet"> | number
    isKycVerified?: BoolWithAggregatesFilter<"Wallet"> | boolean
    mpin?: StringNullableWithAggregatesFilter<"Wallet"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Wallet"> | Date | string
  }

  export type BankDetailsWhereInput = {
    AND?: BankDetailsWhereInput | BankDetailsWhereInput[]
    OR?: BankDetailsWhereInput[]
    NOT?: BankDetailsWhereInput | BankDetailsWhereInput[]
    id?: StringFilter<"BankDetails"> | string
    accountHolderName?: StringFilter<"BankDetails"> | string
    accountNumber?: StringFilter<"BankDetails"> | string
    ifscCode?: StringFilter<"BankDetails"> | string
    bankDocument?: StringNullableFilter<"BankDetails"> | string | null
    upiId?: StringNullableListFilter<"BankDetails">
    razorpayContactID?: StringNullableFilter<"BankDetails"> | string | null
    razorpayFundAccountID?: StringNullableFilter<"BankDetails"> | string | null
    userId?: StringFilter<"BankDetails"> | string
    primary?: BoolFilter<"BankDetails"> | boolean
    createdAt?: DateTimeFilter<"BankDetails"> | Date | string
    updatedAt?: DateTimeFilter<"BankDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    upiIds?: UPIListRelationFilter
    withdrawls?: WithdrawalListRelationFilter
  }

  export type BankDetailsOrderByWithRelationInput = {
    id?: SortOrder
    accountHolderName?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankDocument?: SortOrderInput | SortOrder
    upiId?: SortOrder
    razorpayContactID?: SortOrderInput | SortOrder
    razorpayFundAccountID?: SortOrderInput | SortOrder
    userId?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    upiIds?: UPIOrderByRelationAggregateInput
    withdrawls?: WithdrawalOrderByRelationAggregateInput
  }

  export type BankDetailsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: BankDetailsWhereInput | BankDetailsWhereInput[]
    OR?: BankDetailsWhereInput[]
    NOT?: BankDetailsWhereInput | BankDetailsWhereInput[]
    accountHolderName?: StringFilter<"BankDetails"> | string
    accountNumber?: StringFilter<"BankDetails"> | string
    ifscCode?: StringFilter<"BankDetails"> | string
    bankDocument?: StringNullableFilter<"BankDetails"> | string | null
    upiId?: StringNullableListFilter<"BankDetails">
    razorpayContactID?: StringNullableFilter<"BankDetails"> | string | null
    razorpayFundAccountID?: StringNullableFilter<"BankDetails"> | string | null
    userId?: StringFilter<"BankDetails"> | string
    primary?: BoolFilter<"BankDetails"> | boolean
    createdAt?: DateTimeFilter<"BankDetails"> | Date | string
    updatedAt?: DateTimeFilter<"BankDetails"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    upiIds?: UPIListRelationFilter
    withdrawls?: WithdrawalListRelationFilter
  }, "id">

  export type BankDetailsOrderByWithAggregationInput = {
    id?: SortOrder
    accountHolderName?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankDocument?: SortOrderInput | SortOrder
    upiId?: SortOrder
    razorpayContactID?: SortOrderInput | SortOrder
    razorpayFundAccountID?: SortOrderInput | SortOrder
    userId?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BankDetailsCountOrderByAggregateInput
    _max?: BankDetailsMaxOrderByAggregateInput
    _min?: BankDetailsMinOrderByAggregateInput
  }

  export type BankDetailsScalarWhereWithAggregatesInput = {
    AND?: BankDetailsScalarWhereWithAggregatesInput | BankDetailsScalarWhereWithAggregatesInput[]
    OR?: BankDetailsScalarWhereWithAggregatesInput[]
    NOT?: BankDetailsScalarWhereWithAggregatesInput | BankDetailsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BankDetails"> | string
    accountHolderName?: StringWithAggregatesFilter<"BankDetails"> | string
    accountNumber?: StringWithAggregatesFilter<"BankDetails"> | string
    ifscCode?: StringWithAggregatesFilter<"BankDetails"> | string
    bankDocument?: StringNullableWithAggregatesFilter<"BankDetails"> | string | null
    upiId?: StringNullableListFilter<"BankDetails">
    razorpayContactID?: StringNullableWithAggregatesFilter<"BankDetails"> | string | null
    razorpayFundAccountID?: StringNullableWithAggregatesFilter<"BankDetails"> | string | null
    userId?: StringWithAggregatesFilter<"BankDetails"> | string
    primary?: BoolWithAggregatesFilter<"BankDetails"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"BankDetails"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BankDetails"> | Date | string
  }

  export type UPIWhereInput = {
    AND?: UPIWhereInput | UPIWhereInput[]
    OR?: UPIWhereInput[]
    NOT?: UPIWhereInput | UPIWhereInput[]
    id?: StringFilter<"UPI"> | string
    upiId?: StringFilter<"UPI"> | string
    razorpayFundAccountID?: StringNullableFilter<"UPI"> | string | null
    razorpayContactID?: StringNullableFilter<"UPI"> | string | null
    bankDetailsId?: StringFilter<"UPI"> | string
    userId?: StringFilter<"UPI"> | string
    createdAt?: DateTimeFilter<"UPI"> | Date | string
    updatedAt?: DateTimeFilter<"UPI"> | Date | string
    bankDetails?: XOR<BankDetailsScalarRelationFilter, BankDetailsWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    withdrawls?: WithdrawalListRelationFilter
  }

  export type UPIOrderByWithRelationInput = {
    id?: SortOrder
    upiId?: SortOrder
    razorpayFundAccountID?: SortOrderInput | SortOrder
    razorpayContactID?: SortOrderInput | SortOrder
    bankDetailsId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    bankDetails?: BankDetailsOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    withdrawls?: WithdrawalOrderByRelationAggregateInput
  }

  export type UPIWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    upiId?: string
    AND?: UPIWhereInput | UPIWhereInput[]
    OR?: UPIWhereInput[]
    NOT?: UPIWhereInput | UPIWhereInput[]
    razorpayFundAccountID?: StringNullableFilter<"UPI"> | string | null
    razorpayContactID?: StringNullableFilter<"UPI"> | string | null
    bankDetailsId?: StringFilter<"UPI"> | string
    userId?: StringFilter<"UPI"> | string
    createdAt?: DateTimeFilter<"UPI"> | Date | string
    updatedAt?: DateTimeFilter<"UPI"> | Date | string
    bankDetails?: XOR<BankDetailsScalarRelationFilter, BankDetailsWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    withdrawls?: WithdrawalListRelationFilter
  }, "id" | "upiId">

  export type UPIOrderByWithAggregationInput = {
    id?: SortOrder
    upiId?: SortOrder
    razorpayFundAccountID?: SortOrderInput | SortOrder
    razorpayContactID?: SortOrderInput | SortOrder
    bankDetailsId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UPICountOrderByAggregateInput
    _max?: UPIMaxOrderByAggregateInput
    _min?: UPIMinOrderByAggregateInput
  }

  export type UPIScalarWhereWithAggregatesInput = {
    AND?: UPIScalarWhereWithAggregatesInput | UPIScalarWhereWithAggregatesInput[]
    OR?: UPIScalarWhereWithAggregatesInput[]
    NOT?: UPIScalarWhereWithAggregatesInput | UPIScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UPI"> | string
    upiId?: StringWithAggregatesFilter<"UPI"> | string
    razorpayFundAccountID?: StringNullableWithAggregatesFilter<"UPI"> | string | null
    razorpayContactID?: StringNullableWithAggregatesFilter<"UPI"> | string | null
    bankDetailsId?: StringWithAggregatesFilter<"UPI"> | string
    userId?: StringWithAggregatesFilter<"UPI"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UPI"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"UPI"> | Date | string
  }

  export type kycRecordsWhereInput = {
    AND?: kycRecordsWhereInput | kycRecordsWhereInput[]
    OR?: kycRecordsWhereInput[]
    NOT?: kycRecordsWhereInput | kycRecordsWhereInput[]
    id?: StringFilter<"kycRecords"> | string
    userId?: StringFilter<"kycRecords"> | string
    socialMedia?: JsonFilter<"kycRecords">
    aadhaarNumber?: StringFilter<"kycRecords"> | string
    aadhaarFront?: StringFilter<"kycRecords"> | string
    aadhaarBack?: StringFilter<"kycRecords"> | string
    panCard?: StringFilter<"kycRecords"> | string
    selfie?: StringFilter<"kycRecords"> | string
    createdAt?: DateTimeFilter<"kycRecords"> | Date | string
    updatedAt?: DateTimeFilter<"kycRecords"> | Date | string
    status?: StringFilter<"kycRecords"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type kycRecordsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    socialMedia?: SortOrder
    aadhaarNumber?: SortOrder
    aadhaarFront?: SortOrder
    aadhaarBack?: SortOrder
    panCard?: SortOrder
    selfie?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type kycRecordsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: kycRecordsWhereInput | kycRecordsWhereInput[]
    OR?: kycRecordsWhereInput[]
    NOT?: kycRecordsWhereInput | kycRecordsWhereInput[]
    socialMedia?: JsonFilter<"kycRecords">
    aadhaarNumber?: StringFilter<"kycRecords"> | string
    aadhaarFront?: StringFilter<"kycRecords"> | string
    aadhaarBack?: StringFilter<"kycRecords"> | string
    panCard?: StringFilter<"kycRecords"> | string
    selfie?: StringFilter<"kycRecords"> | string
    createdAt?: DateTimeFilter<"kycRecords"> | Date | string
    updatedAt?: DateTimeFilter<"kycRecords"> | Date | string
    status?: StringFilter<"kycRecords"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type kycRecordsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    socialMedia?: SortOrder
    aadhaarNumber?: SortOrder
    aadhaarFront?: SortOrder
    aadhaarBack?: SortOrder
    panCard?: SortOrder
    selfie?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
    _count?: kycRecordsCountOrderByAggregateInput
    _max?: kycRecordsMaxOrderByAggregateInput
    _min?: kycRecordsMinOrderByAggregateInput
  }

  export type kycRecordsScalarWhereWithAggregatesInput = {
    AND?: kycRecordsScalarWhereWithAggregatesInput | kycRecordsScalarWhereWithAggregatesInput[]
    OR?: kycRecordsScalarWhereWithAggregatesInput[]
    NOT?: kycRecordsScalarWhereWithAggregatesInput | kycRecordsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"kycRecords"> | string
    userId?: StringWithAggregatesFilter<"kycRecords"> | string
    socialMedia?: JsonWithAggregatesFilter<"kycRecords">
    aadhaarNumber?: StringWithAggregatesFilter<"kycRecords"> | string
    aadhaarFront?: StringWithAggregatesFilter<"kycRecords"> | string
    aadhaarBack?: StringWithAggregatesFilter<"kycRecords"> | string
    panCard?: StringWithAggregatesFilter<"kycRecords"> | string
    selfie?: StringWithAggregatesFilter<"kycRecords"> | string
    createdAt?: DateTimeWithAggregatesFilter<"kycRecords"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"kycRecords"> | Date | string
    status?: StringWithAggregatesFilter<"kycRecords"> | string
  }

  export type BusinessInfoWhereInput = {
    AND?: BusinessInfoWhereInput | BusinessInfoWhereInput[]
    OR?: BusinessInfoWhereInput[]
    NOT?: BusinessInfoWhereInput | BusinessInfoWhereInput[]
    id?: StringFilter<"BusinessInfo"> | string
    firstName?: StringFilter<"BusinessInfo"> | string
    lastName?: StringFilter<"BusinessInfo"> | string
    businessStructure?: StringFilter<"BusinessInfo"> | string
    gstNumber?: StringNullableFilter<"BusinessInfo"> | string | null
    sebiNumber?: StringNullableFilter<"BusinessInfo"> | string | null
    sebiCertificate?: StringNullableFilter<"BusinessInfo"> | string | null
    userId?: StringFilter<"BusinessInfo"> | string
    createdAt?: DateTimeFilter<"BusinessInfo"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessInfo"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type BusinessInfoOrderByWithRelationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    businessStructure?: SortOrder
    gstNumber?: SortOrderInput | SortOrder
    sebiNumber?: SortOrderInput | SortOrder
    sebiCertificate?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type BusinessInfoWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    gstNumber?: string
    sebiNumber?: string
    userId?: string
    AND?: BusinessInfoWhereInput | BusinessInfoWhereInput[]
    OR?: BusinessInfoWhereInput[]
    NOT?: BusinessInfoWhereInput | BusinessInfoWhereInput[]
    firstName?: StringFilter<"BusinessInfo"> | string
    lastName?: StringFilter<"BusinessInfo"> | string
    businessStructure?: StringFilter<"BusinessInfo"> | string
    sebiCertificate?: StringNullableFilter<"BusinessInfo"> | string | null
    createdAt?: DateTimeFilter<"BusinessInfo"> | Date | string
    updatedAt?: DateTimeFilter<"BusinessInfo"> | Date | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "gstNumber" | "sebiNumber" | "userId">

  export type BusinessInfoOrderByWithAggregationInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    businessStructure?: SortOrder
    gstNumber?: SortOrderInput | SortOrder
    sebiNumber?: SortOrderInput | SortOrder
    sebiCertificate?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: BusinessInfoCountOrderByAggregateInput
    _max?: BusinessInfoMaxOrderByAggregateInput
    _min?: BusinessInfoMinOrderByAggregateInput
  }

  export type BusinessInfoScalarWhereWithAggregatesInput = {
    AND?: BusinessInfoScalarWhereWithAggregatesInput | BusinessInfoScalarWhereWithAggregatesInput[]
    OR?: BusinessInfoScalarWhereWithAggregatesInput[]
    NOT?: BusinessInfoScalarWhereWithAggregatesInput | BusinessInfoScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"BusinessInfo"> | string
    firstName?: StringWithAggregatesFilter<"BusinessInfo"> | string
    lastName?: StringWithAggregatesFilter<"BusinessInfo"> | string
    businessStructure?: StringWithAggregatesFilter<"BusinessInfo"> | string
    gstNumber?: StringNullableWithAggregatesFilter<"BusinessInfo"> | string | null
    sebiNumber?: StringNullableWithAggregatesFilter<"BusinessInfo"> | string | null
    sebiCertificate?: StringNullableWithAggregatesFilter<"BusinessInfo"> | string | null
    userId?: StringWithAggregatesFilter<"BusinessInfo"> | string
    createdAt?: DateTimeWithAggregatesFilter<"BusinessInfo"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"BusinessInfo"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: StringFilter<"Transaction"> | string
    walletId?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    email?: StringFilter<"Transaction"> | string
    phoneNumber?: StringFilter<"Transaction"> | string
    product?: StringFilter<"Transaction"> | string
    modeOfPayment?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    wallet?: XOR<WalletScalarRelationFilter, WalletWhereInput>
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    product?: SortOrder
    modeOfPayment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    wallet?: WalletOrderByWithRelationInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    walletId?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    email?: StringFilter<"Transaction"> | string
    phoneNumber?: StringFilter<"Transaction"> | string
    product?: StringFilter<"Transaction"> | string
    modeOfPayment?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    wallet?: XOR<WalletScalarRelationFilter, WalletWhereInput>
  }, "id">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    product?: SortOrder
    modeOfPayment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Transaction"> | string
    walletId?: StringWithAggregatesFilter<"Transaction"> | string
    amount?: FloatWithAggregatesFilter<"Transaction"> | number
    email?: StringWithAggregatesFilter<"Transaction"> | string
    phoneNumber?: StringWithAggregatesFilter<"Transaction"> | string
    product?: StringWithAggregatesFilter<"Transaction"> | string
    modeOfPayment?: StringWithAggregatesFilter<"Transaction"> | string
    status?: StringWithAggregatesFilter<"Transaction"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type WithdrawalWhereInput = {
    AND?: WithdrawalWhereInput | WithdrawalWhereInput[]
    OR?: WithdrawalWhereInput[]
    NOT?: WithdrawalWhereInput | WithdrawalWhereInput[]
    id?: StringFilter<"Withdrawal"> | string
    walletId?: StringFilter<"Withdrawal"> | string
    amount?: FloatFilter<"Withdrawal"> | number
    modeOfWithdrawal?: StringFilter<"Withdrawal"> | string
    bankDetailsId?: StringFilter<"Withdrawal"> | string
    upiId?: StringFilter<"Withdrawal"> | string
    status?: StringFilter<"Withdrawal"> | string
    razorpayPayoutID?: StringNullableFilter<"Withdrawal"> | string | null
    createdAt?: DateTimeFilter<"Withdrawal"> | Date | string
    wallet?: XOR<WalletScalarRelationFilter, WalletWhereInput>
    bankDetails?: XOR<BankDetailsScalarRelationFilter, BankDetailsWhereInput>
    upi?: XOR<UPIScalarRelationFilter, UPIWhereInput>
  }

  export type WithdrawalOrderByWithRelationInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    modeOfWithdrawal?: SortOrder
    bankDetailsId?: SortOrder
    upiId?: SortOrder
    status?: SortOrder
    razorpayPayoutID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    wallet?: WalletOrderByWithRelationInput
    bankDetails?: BankDetailsOrderByWithRelationInput
    upi?: UPIOrderByWithRelationInput
  }

  export type WithdrawalWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WithdrawalWhereInput | WithdrawalWhereInput[]
    OR?: WithdrawalWhereInput[]
    NOT?: WithdrawalWhereInput | WithdrawalWhereInput[]
    walletId?: StringFilter<"Withdrawal"> | string
    amount?: FloatFilter<"Withdrawal"> | number
    modeOfWithdrawal?: StringFilter<"Withdrawal"> | string
    bankDetailsId?: StringFilter<"Withdrawal"> | string
    upiId?: StringFilter<"Withdrawal"> | string
    status?: StringFilter<"Withdrawal"> | string
    razorpayPayoutID?: StringNullableFilter<"Withdrawal"> | string | null
    createdAt?: DateTimeFilter<"Withdrawal"> | Date | string
    wallet?: XOR<WalletScalarRelationFilter, WalletWhereInput>
    bankDetails?: XOR<BankDetailsScalarRelationFilter, BankDetailsWhereInput>
    upi?: XOR<UPIScalarRelationFilter, UPIWhereInput>
  }, "id">

  export type WithdrawalOrderByWithAggregationInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    modeOfWithdrawal?: SortOrder
    bankDetailsId?: SortOrder
    upiId?: SortOrder
    status?: SortOrder
    razorpayPayoutID?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: WithdrawalCountOrderByAggregateInput
    _avg?: WithdrawalAvgOrderByAggregateInput
    _max?: WithdrawalMaxOrderByAggregateInput
    _min?: WithdrawalMinOrderByAggregateInput
    _sum?: WithdrawalSumOrderByAggregateInput
  }

  export type WithdrawalScalarWhereWithAggregatesInput = {
    AND?: WithdrawalScalarWhereWithAggregatesInput | WithdrawalScalarWhereWithAggregatesInput[]
    OR?: WithdrawalScalarWhereWithAggregatesInput[]
    NOT?: WithdrawalScalarWhereWithAggregatesInput | WithdrawalScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Withdrawal"> | string
    walletId?: StringWithAggregatesFilter<"Withdrawal"> | string
    amount?: FloatWithAggregatesFilter<"Withdrawal"> | number
    modeOfWithdrawal?: StringWithAggregatesFilter<"Withdrawal"> | string
    bankDetailsId?: StringWithAggregatesFilter<"Withdrawal"> | string
    upiId?: StringWithAggregatesFilter<"Withdrawal"> | string
    status?: StringWithAggregatesFilter<"Withdrawal"> | string
    razorpayPayoutID?: StringNullableWithAggregatesFilter<"Withdrawal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Withdrawal"> | Date | string
  }

  export type WebinarWhereInput = {
    AND?: WebinarWhereInput | WebinarWhereInput[]
    OR?: WebinarWhereInput[]
    NOT?: WebinarWhereInput | WebinarWhereInput[]
    id?: StringFilter<"Webinar"> | string
    title?: StringFilter<"Webinar"> | string
    category?: StringFilter<"Webinar"> | string
    coverImage?: StringFilter<"Webinar"> | string
    occurrence?: StringFilter<"Webinar"> | string
    startDate?: DateTimeFilter<"Webinar"> | Date | string
    paymentEnabled?: BoolFilter<"Webinar"> | boolean
    endDate?: DateTimeFilter<"Webinar"> | Date | string
    isOnline?: BoolFilter<"Webinar"> | boolean
    venue?: StringNullableFilter<"Webinar"> | string | null
    link?: JsonFilter<"Webinar">
    discount?: JsonNullableFilter<"Webinar">
    isPaid?: BoolFilter<"Webinar"> | boolean
    quantity?: IntFilter<"Webinar"> | number
    amount?: FloatNullableFilter<"Webinar"> | number | null
    createdById?: StringFilter<"Webinar"> | string
    createdAt?: DateTimeFilter<"Webinar"> | Date | string
    updatedAt?: DateTimeFilter<"Webinar"> | Date | string
    tickets?: WebinarTicketListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WebinarOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    coverImage?: SortOrder
    occurrence?: SortOrder
    startDate?: SortOrder
    paymentEnabled?: SortOrder
    endDate?: SortOrder
    isOnline?: SortOrder
    venue?: SortOrderInput | SortOrder
    link?: SortOrder
    discount?: SortOrderInput | SortOrder
    isPaid?: SortOrder
    quantity?: SortOrder
    amount?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tickets?: WebinarTicketOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
  }

  export type WebinarWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebinarWhereInput | WebinarWhereInput[]
    OR?: WebinarWhereInput[]
    NOT?: WebinarWhereInput | WebinarWhereInput[]
    title?: StringFilter<"Webinar"> | string
    category?: StringFilter<"Webinar"> | string
    coverImage?: StringFilter<"Webinar"> | string
    occurrence?: StringFilter<"Webinar"> | string
    startDate?: DateTimeFilter<"Webinar"> | Date | string
    paymentEnabled?: BoolFilter<"Webinar"> | boolean
    endDate?: DateTimeFilter<"Webinar"> | Date | string
    isOnline?: BoolFilter<"Webinar"> | boolean
    venue?: StringNullableFilter<"Webinar"> | string | null
    link?: JsonFilter<"Webinar">
    discount?: JsonNullableFilter<"Webinar">
    isPaid?: BoolFilter<"Webinar"> | boolean
    quantity?: IntFilter<"Webinar"> | number
    amount?: FloatNullableFilter<"Webinar"> | number | null
    createdById?: StringFilter<"Webinar"> | string
    createdAt?: DateTimeFilter<"Webinar"> | Date | string
    updatedAt?: DateTimeFilter<"Webinar"> | Date | string
    tickets?: WebinarTicketListRelationFilter
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WebinarOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    coverImage?: SortOrder
    occurrence?: SortOrder
    startDate?: SortOrder
    paymentEnabled?: SortOrder
    endDate?: SortOrder
    isOnline?: SortOrder
    venue?: SortOrderInput | SortOrder
    link?: SortOrder
    discount?: SortOrderInput | SortOrder
    isPaid?: SortOrder
    quantity?: SortOrder
    amount?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: WebinarCountOrderByAggregateInput
    _avg?: WebinarAvgOrderByAggregateInput
    _max?: WebinarMaxOrderByAggregateInput
    _min?: WebinarMinOrderByAggregateInput
    _sum?: WebinarSumOrderByAggregateInput
  }

  export type WebinarScalarWhereWithAggregatesInput = {
    AND?: WebinarScalarWhereWithAggregatesInput | WebinarScalarWhereWithAggregatesInput[]
    OR?: WebinarScalarWhereWithAggregatesInput[]
    NOT?: WebinarScalarWhereWithAggregatesInput | WebinarScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Webinar"> | string
    title?: StringWithAggregatesFilter<"Webinar"> | string
    category?: StringWithAggregatesFilter<"Webinar"> | string
    coverImage?: StringWithAggregatesFilter<"Webinar"> | string
    occurrence?: StringWithAggregatesFilter<"Webinar"> | string
    startDate?: DateTimeWithAggregatesFilter<"Webinar"> | Date | string
    paymentEnabled?: BoolWithAggregatesFilter<"Webinar"> | boolean
    endDate?: DateTimeWithAggregatesFilter<"Webinar"> | Date | string
    isOnline?: BoolWithAggregatesFilter<"Webinar"> | boolean
    venue?: StringNullableWithAggregatesFilter<"Webinar"> | string | null
    link?: JsonWithAggregatesFilter<"Webinar">
    discount?: JsonNullableWithAggregatesFilter<"Webinar">
    isPaid?: BoolWithAggregatesFilter<"Webinar"> | boolean
    quantity?: IntWithAggregatesFilter<"Webinar"> | number
    amount?: FloatNullableWithAggregatesFilter<"Webinar"> | number | null
    createdById?: StringWithAggregatesFilter<"Webinar"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Webinar"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Webinar"> | Date | string
  }

  export type WebinarTicketWhereInput = {
    AND?: WebinarTicketWhereInput | WebinarTicketWhereInput[]
    OR?: WebinarTicketWhereInput[]
    NOT?: WebinarTicketWhereInput | WebinarTicketWhereInput[]
    id?: StringFilter<"WebinarTicket"> | string
    webinarId?: StringFilter<"WebinarTicket"> | string
    boughtById?: StringFilter<"WebinarTicket"> | string
    paymentId?: StringNullableFilter<"WebinarTicket"> | string | null
    orderId?: StringNullableFilter<"WebinarTicket"> | string | null
    webinar?: XOR<WebinarScalarRelationFilter, WebinarWhereInput>
    boughtBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type WebinarTicketOrderByWithRelationInput = {
    id?: SortOrder
    webinarId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    webinar?: WebinarOrderByWithRelationInput
    boughtBy?: UserOrderByWithRelationInput
  }

  export type WebinarTicketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: WebinarTicketWhereInput | WebinarTicketWhereInput[]
    OR?: WebinarTicketWhereInput[]
    NOT?: WebinarTicketWhereInput | WebinarTicketWhereInput[]
    webinarId?: StringFilter<"WebinarTicket"> | string
    boughtById?: StringFilter<"WebinarTicket"> | string
    paymentId?: StringNullableFilter<"WebinarTicket"> | string | null
    orderId?: StringNullableFilter<"WebinarTicket"> | string | null
    webinar?: XOR<WebinarScalarRelationFilter, WebinarWhereInput>
    boughtBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type WebinarTicketOrderByWithAggregationInput = {
    id?: SortOrder
    webinarId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    _count?: WebinarTicketCountOrderByAggregateInput
    _max?: WebinarTicketMaxOrderByAggregateInput
    _min?: WebinarTicketMinOrderByAggregateInput
  }

  export type WebinarTicketScalarWhereWithAggregatesInput = {
    AND?: WebinarTicketScalarWhereWithAggregatesInput | WebinarTicketScalarWhereWithAggregatesInput[]
    OR?: WebinarTicketScalarWhereWithAggregatesInput[]
    NOT?: WebinarTicketScalarWhereWithAggregatesInput | WebinarTicketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"WebinarTicket"> | string
    webinarId?: StringWithAggregatesFilter<"WebinarTicket"> | string
    boughtById?: StringWithAggregatesFilter<"WebinarTicket"> | string
    paymentId?: StringNullableWithAggregatesFilter<"WebinarTicket"> | string | null
    orderId?: StringNullableWithAggregatesFilter<"WebinarTicket"> | string | null
  }

  export type CourseWhereInput = {
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    id?: StringFilter<"Course"> | string
    title?: StringFilter<"Course"> | string
    price?: FloatFilter<"Course"> | number
    discount?: JsonNullableFilter<"Course">
    validity?: StringFilter<"Course"> | string
    aboutThisCourse?: JsonFilter<"Course">
    testimonials?: JsonFilter<"Course">
    courseBenefits?: JsonFilter<"Course">
    faqs?: JsonFilter<"Course">
    gallery?: JsonFilter<"Course">
    coverImage?: JsonFilter<"Course">
    language?: JsonFilter<"Course">
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeNullableFilter<"Course"> | Date | string | null
    createdBy?: StringFilter<"Course"> | string
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    products?: CourseProductListRelationFilter
    lessons?: LessonsListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    purchasedBy?: CoursePurchasersListRelationFilter
  }

  export type CourseOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    discount?: SortOrderInput | SortOrder
    validity?: SortOrder
    aboutThisCourse?: SortOrder
    testimonials?: SortOrder
    courseBenefits?: SortOrder
    faqs?: SortOrder
    gallery?: SortOrder
    coverImage?: SortOrder
    language?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: CourseProductOrderByRelationAggregateInput
    lessons?: LessonsOrderByRelationAggregateInput
    creator?: UserOrderByWithRelationInput
    purchasedBy?: CoursePurchasersOrderByRelationAggregateInput
  }

  export type CourseWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CourseWhereInput | CourseWhereInput[]
    OR?: CourseWhereInput[]
    NOT?: CourseWhereInput | CourseWhereInput[]
    title?: StringFilter<"Course"> | string
    price?: FloatFilter<"Course"> | number
    discount?: JsonNullableFilter<"Course">
    validity?: StringFilter<"Course"> | string
    aboutThisCourse?: JsonFilter<"Course">
    testimonials?: JsonFilter<"Course">
    courseBenefits?: JsonFilter<"Course">
    faqs?: JsonFilter<"Course">
    gallery?: JsonFilter<"Course">
    coverImage?: JsonFilter<"Course">
    language?: JsonFilter<"Course">
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeNullableFilter<"Course"> | Date | string | null
    createdBy?: StringFilter<"Course"> | string
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
    products?: CourseProductListRelationFilter
    lessons?: LessonsListRelationFilter
    creator?: XOR<UserScalarRelationFilter, UserWhereInput>
    purchasedBy?: CoursePurchasersListRelationFilter
  }, "id">

  export type CourseOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    discount?: SortOrderInput | SortOrder
    validity?: SortOrder
    aboutThisCourse?: SortOrder
    testimonials?: SortOrder
    courseBenefits?: SortOrder
    faqs?: SortOrder
    gallery?: SortOrder
    coverImage?: SortOrder
    language?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrderInput | SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CourseCountOrderByAggregateInput
    _avg?: CourseAvgOrderByAggregateInput
    _max?: CourseMaxOrderByAggregateInput
    _min?: CourseMinOrderByAggregateInput
    _sum?: CourseSumOrderByAggregateInput
  }

  export type CourseScalarWhereWithAggregatesInput = {
    AND?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    OR?: CourseScalarWhereWithAggregatesInput[]
    NOT?: CourseScalarWhereWithAggregatesInput | CourseScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Course"> | string
    title?: StringWithAggregatesFilter<"Course"> | string
    price?: FloatWithAggregatesFilter<"Course"> | number
    discount?: JsonNullableWithAggregatesFilter<"Course">
    validity?: StringWithAggregatesFilter<"Course"> | string
    aboutThisCourse?: JsonWithAggregatesFilter<"Course">
    testimonials?: JsonWithAggregatesFilter<"Course">
    courseBenefits?: JsonWithAggregatesFilter<"Course">
    faqs?: JsonWithAggregatesFilter<"Course">
    gallery?: JsonWithAggregatesFilter<"Course">
    coverImage?: JsonWithAggregatesFilter<"Course">
    language?: JsonWithAggregatesFilter<"Course">
    startDate?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    endDate?: DateTimeNullableWithAggregatesFilter<"Course"> | Date | string | null
    createdBy?: StringWithAggregatesFilter<"Course"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Course"> | Date | string
  }

  export type CourseProductWhereInput = {
    AND?: CourseProductWhereInput | CourseProductWhereInput[]
    OR?: CourseProductWhereInput[]
    NOT?: CourseProductWhereInput | CourseProductWhereInput[]
    id?: StringFilter<"CourseProduct"> | string
    title?: StringFilter<"CourseProduct"> | string
    isActive?: BoolFilter<"CourseProduct"> | boolean
    productMetaData?: JsonFilter<"CourseProduct">
    courseId?: StringFilter<"CourseProduct"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type CourseProductOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    productMetaData?: SortOrder
    courseId?: SortOrder
    course?: CourseOrderByWithRelationInput
  }

  export type CourseProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    courseId?: string
    AND?: CourseProductWhereInput | CourseProductWhereInput[]
    OR?: CourseProductWhereInput[]
    NOT?: CourseProductWhereInput | CourseProductWhereInput[]
    title?: StringFilter<"CourseProduct"> | string
    isActive?: BoolFilter<"CourseProduct"> | boolean
    productMetaData?: JsonFilter<"CourseProduct">
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id" | "courseId">

  export type CourseProductOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    productMetaData?: SortOrder
    courseId?: SortOrder
    _count?: CourseProductCountOrderByAggregateInput
    _max?: CourseProductMaxOrderByAggregateInput
    _min?: CourseProductMinOrderByAggregateInput
  }

  export type CourseProductScalarWhereWithAggregatesInput = {
    AND?: CourseProductScalarWhereWithAggregatesInput | CourseProductScalarWhereWithAggregatesInput[]
    OR?: CourseProductScalarWhereWithAggregatesInput[]
    NOT?: CourseProductScalarWhereWithAggregatesInput | CourseProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CourseProduct"> | string
    title?: StringWithAggregatesFilter<"CourseProduct"> | string
    isActive?: BoolWithAggregatesFilter<"CourseProduct"> | boolean
    productMetaData?: JsonWithAggregatesFilter<"CourseProduct">
    courseId?: StringWithAggregatesFilter<"CourseProduct"> | string
  }

  export type LessonsWhereInput = {
    AND?: LessonsWhereInput | LessonsWhereInput[]
    OR?: LessonsWhereInput[]
    NOT?: LessonsWhereInput | LessonsWhereInput[]
    id?: StringFilter<"Lessons"> | string
    isActive?: BoolFilter<"Lessons"> | boolean
    lessonData?: JsonFilter<"Lessons">
    courseId?: StringFilter<"Lessons"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type LessonsOrderByWithRelationInput = {
    id?: SortOrder
    isActive?: SortOrder
    lessonData?: SortOrder
    courseId?: SortOrder
    course?: CourseOrderByWithRelationInput
  }

  export type LessonsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: LessonsWhereInput | LessonsWhereInput[]
    OR?: LessonsWhereInput[]
    NOT?: LessonsWhereInput | LessonsWhereInput[]
    isActive?: BoolFilter<"Lessons"> | boolean
    lessonData?: JsonFilter<"Lessons">
    courseId?: StringFilter<"Lessons"> | string
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type LessonsOrderByWithAggregationInput = {
    id?: SortOrder
    isActive?: SortOrder
    lessonData?: SortOrder
    courseId?: SortOrder
    _count?: LessonsCountOrderByAggregateInput
    _max?: LessonsMaxOrderByAggregateInput
    _min?: LessonsMinOrderByAggregateInput
  }

  export type LessonsScalarWhereWithAggregatesInput = {
    AND?: LessonsScalarWhereWithAggregatesInput | LessonsScalarWhereWithAggregatesInput[]
    OR?: LessonsScalarWhereWithAggregatesInput[]
    NOT?: LessonsScalarWhereWithAggregatesInput | LessonsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Lessons"> | string
    isActive?: BoolWithAggregatesFilter<"Lessons"> | boolean
    lessonData?: JsonWithAggregatesFilter<"Lessons">
    courseId?: StringWithAggregatesFilter<"Lessons"> | string
  }

  export type CoursePurchasersWhereInput = {
    AND?: CoursePurchasersWhereInput | CoursePurchasersWhereInput[]
    OR?: CoursePurchasersWhereInput[]
    NOT?: CoursePurchasersWhereInput | CoursePurchasersWhereInput[]
    id?: StringFilter<"CoursePurchasers"> | string
    courseId?: StringFilter<"CoursePurchasers"> | string
    purchaserId?: StringFilter<"CoursePurchasers"> | string
    paymentId?: StringFilter<"CoursePurchasers"> | string
    orderId?: StringFilter<"CoursePurchasers"> | string
    createdAt?: DateTimeFilter<"CoursePurchasers"> | Date | string
    purchaser?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }

  export type CoursePurchasersOrderByWithRelationInput = {
    id?: SortOrder
    courseId?: SortOrder
    purchaserId?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    purchaser?: UserOrderByWithRelationInput
    course?: CourseOrderByWithRelationInput
  }

  export type CoursePurchasersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CoursePurchasersWhereInput | CoursePurchasersWhereInput[]
    OR?: CoursePurchasersWhereInput[]
    NOT?: CoursePurchasersWhereInput | CoursePurchasersWhereInput[]
    courseId?: StringFilter<"CoursePurchasers"> | string
    purchaserId?: StringFilter<"CoursePurchasers"> | string
    paymentId?: StringFilter<"CoursePurchasers"> | string
    orderId?: StringFilter<"CoursePurchasers"> | string
    createdAt?: DateTimeFilter<"CoursePurchasers"> | Date | string
    purchaser?: XOR<UserScalarRelationFilter, UserWhereInput>
    course?: XOR<CourseScalarRelationFilter, CourseWhereInput>
  }, "id">

  export type CoursePurchasersOrderByWithAggregationInput = {
    id?: SortOrder
    courseId?: SortOrder
    purchaserId?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
    _count?: CoursePurchasersCountOrderByAggregateInput
    _max?: CoursePurchasersMaxOrderByAggregateInput
    _min?: CoursePurchasersMinOrderByAggregateInput
  }

  export type CoursePurchasersScalarWhereWithAggregatesInput = {
    AND?: CoursePurchasersScalarWhereWithAggregatesInput | CoursePurchasersScalarWhereWithAggregatesInput[]
    OR?: CoursePurchasersScalarWhereWithAggregatesInput[]
    NOT?: CoursePurchasersScalarWhereWithAggregatesInput | CoursePurchasersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"CoursePurchasers"> | string
    courseId?: StringWithAggregatesFilter<"CoursePurchasers"> | string
    purchaserId?: StringWithAggregatesFilter<"CoursePurchasers"> | string
    paymentId?: StringWithAggregatesFilter<"CoursePurchasers"> | string
    orderId?: StringWithAggregatesFilter<"CoursePurchasers"> | string
    createdAt?: DateTimeWithAggregatesFilter<"CoursePurchasers"> | Date | string
  }

  export type PayingUpWhereInput = {
    AND?: PayingUpWhereInput | PayingUpWhereInput[]
    OR?: PayingUpWhereInput[]
    NOT?: PayingUpWhereInput | PayingUpWhereInput[]
    id?: StringFilter<"PayingUp"> | string
    title?: StringFilter<"PayingUp"> | string
    description?: StringFilter<"PayingUp"> | string
    discount?: JsonNullableFilter<"PayingUp">
    paymentDetails?: JsonFilter<"PayingUp">
    category?: JsonFilter<"PayingUp">
    testimonials?: JsonFilter<"PayingUp">
    faqs?: JsonFilter<"PayingUp">
    refundPolicies?: JsonFilter<"PayingUp">
    tacs?: JsonFilter<"PayingUp">
    coverImage?: JsonFilter<"PayingUp">
    files?: JsonFilter<"PayingUp">
    createdById?: StringFilter<"PayingUp"> | string
    createdAt?: DateTimeFilter<"PayingUp"> | Date | string
    updatedAt?: DateTimeFilter<"PayingUp"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    payingUpTickets?: PayingUpTicketListRelationFilter
  }

  export type PayingUpOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    discount?: SortOrderInput | SortOrder
    paymentDetails?: SortOrder
    category?: SortOrder
    testimonials?: SortOrder
    faqs?: SortOrder
    refundPolicies?: SortOrder
    tacs?: SortOrder
    coverImage?: SortOrder
    files?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    payingUpTickets?: PayingUpTicketOrderByRelationAggregateInput
  }

  export type PayingUpWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PayingUpWhereInput | PayingUpWhereInput[]
    OR?: PayingUpWhereInput[]
    NOT?: PayingUpWhereInput | PayingUpWhereInput[]
    title?: StringFilter<"PayingUp"> | string
    description?: StringFilter<"PayingUp"> | string
    discount?: JsonNullableFilter<"PayingUp">
    paymentDetails?: JsonFilter<"PayingUp">
    category?: JsonFilter<"PayingUp">
    testimonials?: JsonFilter<"PayingUp">
    faqs?: JsonFilter<"PayingUp">
    refundPolicies?: JsonFilter<"PayingUp">
    tacs?: JsonFilter<"PayingUp">
    coverImage?: JsonFilter<"PayingUp">
    files?: JsonFilter<"PayingUp">
    createdById?: StringFilter<"PayingUp"> | string
    createdAt?: DateTimeFilter<"PayingUp"> | Date | string
    updatedAt?: DateTimeFilter<"PayingUp"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    payingUpTickets?: PayingUpTicketListRelationFilter
  }, "id">

  export type PayingUpOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    discount?: SortOrderInput | SortOrder
    paymentDetails?: SortOrder
    category?: SortOrder
    testimonials?: SortOrder
    faqs?: SortOrder
    refundPolicies?: SortOrder
    tacs?: SortOrder
    coverImage?: SortOrder
    files?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PayingUpCountOrderByAggregateInput
    _max?: PayingUpMaxOrderByAggregateInput
    _min?: PayingUpMinOrderByAggregateInput
  }

  export type PayingUpScalarWhereWithAggregatesInput = {
    AND?: PayingUpScalarWhereWithAggregatesInput | PayingUpScalarWhereWithAggregatesInput[]
    OR?: PayingUpScalarWhereWithAggregatesInput[]
    NOT?: PayingUpScalarWhereWithAggregatesInput | PayingUpScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayingUp"> | string
    title?: StringWithAggregatesFilter<"PayingUp"> | string
    description?: StringWithAggregatesFilter<"PayingUp"> | string
    discount?: JsonNullableWithAggregatesFilter<"PayingUp">
    paymentDetails?: JsonWithAggregatesFilter<"PayingUp">
    category?: JsonWithAggregatesFilter<"PayingUp">
    testimonials?: JsonWithAggregatesFilter<"PayingUp">
    faqs?: JsonWithAggregatesFilter<"PayingUp">
    refundPolicies?: JsonWithAggregatesFilter<"PayingUp">
    tacs?: JsonWithAggregatesFilter<"PayingUp">
    coverImage?: JsonWithAggregatesFilter<"PayingUp">
    files?: JsonWithAggregatesFilter<"PayingUp">
    createdById?: StringWithAggregatesFilter<"PayingUp"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PayingUp"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"PayingUp"> | Date | string
  }

  export type PayingUpTicketWhereInput = {
    AND?: PayingUpTicketWhereInput | PayingUpTicketWhereInput[]
    OR?: PayingUpTicketWhereInput[]
    NOT?: PayingUpTicketWhereInput | PayingUpTicketWhereInput[]
    id?: StringFilter<"PayingUpTicket"> | string
    payingUpId?: StringFilter<"PayingUpTicket"> | string
    boughtById?: StringFilter<"PayingUpTicket"> | string
    paymentId?: StringNullableFilter<"PayingUpTicket"> | string | null
    orderId?: StringNullableFilter<"PayingUpTicket"> | string | null
    payingUp?: XOR<PayingUpScalarRelationFilter, PayingUpWhereInput>
    boughtBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PayingUpTicketOrderByWithRelationInput = {
    id?: SortOrder
    payingUpId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    payingUp?: PayingUpOrderByWithRelationInput
    boughtBy?: UserOrderByWithRelationInput
  }

  export type PayingUpTicketWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PayingUpTicketWhereInput | PayingUpTicketWhereInput[]
    OR?: PayingUpTicketWhereInput[]
    NOT?: PayingUpTicketWhereInput | PayingUpTicketWhereInput[]
    payingUpId?: StringFilter<"PayingUpTicket"> | string
    boughtById?: StringFilter<"PayingUpTicket"> | string
    paymentId?: StringNullableFilter<"PayingUpTicket"> | string | null
    orderId?: StringNullableFilter<"PayingUpTicket"> | string | null
    payingUp?: XOR<PayingUpScalarRelationFilter, PayingUpWhereInput>
    boughtBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PayingUpTicketOrderByWithAggregationInput = {
    id?: SortOrder
    payingUpId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    _count?: PayingUpTicketCountOrderByAggregateInput
    _max?: PayingUpTicketMaxOrderByAggregateInput
    _min?: PayingUpTicketMinOrderByAggregateInput
  }

  export type PayingUpTicketScalarWhereWithAggregatesInput = {
    AND?: PayingUpTicketScalarWhereWithAggregatesInput | PayingUpTicketScalarWhereWithAggregatesInput[]
    OR?: PayingUpTicketScalarWhereWithAggregatesInput[]
    NOT?: PayingUpTicketScalarWhereWithAggregatesInput | PayingUpTicketScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PayingUpTicket"> | string
    payingUpId?: StringWithAggregatesFilter<"PayingUpTicket"> | string
    boughtById?: StringWithAggregatesFilter<"PayingUpTicket"> | string
    paymentId?: StringNullableWithAggregatesFilter<"PayingUpTicket"> | string | null
    orderId?: StringNullableWithAggregatesFilter<"PayingUpTicket"> | string | null
  }

  export type TelegramWhereInput = {
    AND?: TelegramWhereInput | TelegramWhereInput[]
    OR?: TelegramWhereInput[]
    NOT?: TelegramWhereInput | TelegramWhereInput[]
    id?: StringFilter<"Telegram"> | string
    coverImage?: StringFilter<"Telegram"> | string
    channelLink?: StringFilter<"Telegram"> | string
    title?: StringFilter<"Telegram"> | string
    description?: StringFilter<"Telegram"> | string
    genre?: StringFilter<"Telegram"> | string
    discount?: JsonFilter<"Telegram">
    subscription?: JsonFilter<"Telegram">
    createdById?: StringFilter<"Telegram"> | string
    createdAt?: DateTimeFilter<"Telegram"> | Date | string
    updatedAt?: DateTimeFilter<"Telegram"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    telegramSubscriptions?: TelegramSubscriptionListRelationFilter
  }

  export type TelegramOrderByWithRelationInput = {
    id?: SortOrder
    coverImage?: SortOrder
    channelLink?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    discount?: SortOrder
    subscription?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    telegramSubscriptions?: TelegramSubscriptionOrderByRelationAggregateInput
  }

  export type TelegramWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: TelegramWhereInput | TelegramWhereInput[]
    OR?: TelegramWhereInput[]
    NOT?: TelegramWhereInput | TelegramWhereInput[]
    coverImage?: StringFilter<"Telegram"> | string
    channelLink?: StringFilter<"Telegram"> | string
    title?: StringFilter<"Telegram"> | string
    description?: StringFilter<"Telegram"> | string
    genre?: StringFilter<"Telegram"> | string
    discount?: JsonFilter<"Telegram">
    subscription?: JsonFilter<"Telegram">
    createdById?: StringFilter<"Telegram"> | string
    createdAt?: DateTimeFilter<"Telegram"> | Date | string
    updatedAt?: DateTimeFilter<"Telegram"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    telegramSubscriptions?: TelegramSubscriptionListRelationFilter
  }, "id" | "id">

  export type TelegramOrderByWithAggregationInput = {
    id?: SortOrder
    coverImage?: SortOrder
    channelLink?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    discount?: SortOrder
    subscription?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TelegramCountOrderByAggregateInput
    _max?: TelegramMaxOrderByAggregateInput
    _min?: TelegramMinOrderByAggregateInput
  }

  export type TelegramScalarWhereWithAggregatesInput = {
    AND?: TelegramScalarWhereWithAggregatesInput | TelegramScalarWhereWithAggregatesInput[]
    OR?: TelegramScalarWhereWithAggregatesInput[]
    NOT?: TelegramScalarWhereWithAggregatesInput | TelegramScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Telegram"> | string
    coverImage?: StringWithAggregatesFilter<"Telegram"> | string
    channelLink?: StringWithAggregatesFilter<"Telegram"> | string
    title?: StringWithAggregatesFilter<"Telegram"> | string
    description?: StringWithAggregatesFilter<"Telegram"> | string
    genre?: StringWithAggregatesFilter<"Telegram"> | string
    discount?: JsonWithAggregatesFilter<"Telegram">
    subscription?: JsonWithAggregatesFilter<"Telegram">
    createdById?: StringWithAggregatesFilter<"Telegram"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Telegram"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Telegram"> | Date | string
  }

  export type TelegramSubscriptionWhereInput = {
    AND?: TelegramSubscriptionWhereInput | TelegramSubscriptionWhereInput[]
    OR?: TelegramSubscriptionWhereInput[]
    NOT?: TelegramSubscriptionWhereInput | TelegramSubscriptionWhereInput[]
    id?: StringFilter<"TelegramSubscription"> | string
    validDays?: IntFilter<"TelegramSubscription"> | number
    telegramId?: StringFilter<"TelegramSubscription"> | string
    chatId?: StringNullableFilter<"TelegramSubscription"> | string | null
    boughtById?: StringFilter<"TelegramSubscription"> | string
    paymentId?: StringNullableFilter<"TelegramSubscription"> | string | null
    orderId?: StringNullableFilter<"TelegramSubscription"> | string | null
    createdAt?: DateTimeFilter<"TelegramSubscription"> | Date | string
    telegram?: XOR<TelegramScalarRelationFilter, TelegramWhereInput>
    boughtBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type TelegramSubscriptionOrderByWithRelationInput = {
    id?: SortOrder
    validDays?: SortOrder
    telegramId?: SortOrder
    chatId?: SortOrderInput | SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    telegram?: TelegramOrderByWithRelationInput
    boughtBy?: UserOrderByWithRelationInput
  }

  export type TelegramSubscriptionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    boughtById?: string
    AND?: TelegramSubscriptionWhereInput | TelegramSubscriptionWhereInput[]
    OR?: TelegramSubscriptionWhereInput[]
    NOT?: TelegramSubscriptionWhereInput | TelegramSubscriptionWhereInput[]
    validDays?: IntFilter<"TelegramSubscription"> | number
    telegramId?: StringFilter<"TelegramSubscription"> | string
    chatId?: StringNullableFilter<"TelegramSubscription"> | string | null
    paymentId?: StringNullableFilter<"TelegramSubscription"> | string | null
    orderId?: StringNullableFilter<"TelegramSubscription"> | string | null
    createdAt?: DateTimeFilter<"TelegramSubscription"> | Date | string
    telegram?: XOR<TelegramScalarRelationFilter, TelegramWhereInput>
    boughtBy?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "id" | "boughtById">

  export type TelegramSubscriptionOrderByWithAggregationInput = {
    id?: SortOrder
    validDays?: SortOrder
    telegramId?: SortOrder
    chatId?: SortOrderInput | SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrderInput | SortOrder
    orderId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: TelegramSubscriptionCountOrderByAggregateInput
    _avg?: TelegramSubscriptionAvgOrderByAggregateInput
    _max?: TelegramSubscriptionMaxOrderByAggregateInput
    _min?: TelegramSubscriptionMinOrderByAggregateInput
    _sum?: TelegramSubscriptionSumOrderByAggregateInput
  }

  export type TelegramSubscriptionScalarWhereWithAggregatesInput = {
    AND?: TelegramSubscriptionScalarWhereWithAggregatesInput | TelegramSubscriptionScalarWhereWithAggregatesInput[]
    OR?: TelegramSubscriptionScalarWhereWithAggregatesInput[]
    NOT?: TelegramSubscriptionScalarWhereWithAggregatesInput | TelegramSubscriptionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"TelegramSubscription"> | string
    validDays?: IntWithAggregatesFilter<"TelegramSubscription"> | number
    telegramId?: StringWithAggregatesFilter<"TelegramSubscription"> | string
    chatId?: StringNullableWithAggregatesFilter<"TelegramSubscription"> | string | null
    boughtById?: StringWithAggregatesFilter<"TelegramSubscription"> | string
    paymentId?: StringNullableWithAggregatesFilter<"TelegramSubscription"> | string | null
    orderId?: StringNullableWithAggregatesFilter<"TelegramSubscription"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"TelegramSubscription"> | Date | string
  }

  export type PremiumContentWhereInput = {
    AND?: PremiumContentWhereInput | PremiumContentWhereInput[]
    OR?: PremiumContentWhereInput[]
    NOT?: PremiumContentWhereInput | PremiumContentWhereInput[]
    id?: StringFilter<"PremiumContent"> | string
    title?: StringFilter<"PremiumContent"> | string
    category?: StringFilter<"PremiumContent"> | string
    unlockPrice?: FloatFilter<"PremiumContent"> | number
    content?: JsonFilter<"PremiumContent">
    discount?: JsonNullableFilter<"PremiumContent">
    createdById?: StringFilter<"PremiumContent"> | string
    createdAt?: DateTimeFilter<"PremiumContent"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    access?: PremiumContentAccessListRelationFilter
  }

  export type PremiumContentOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    unlockPrice?: SortOrder
    content?: SortOrder
    discount?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    access?: PremiumContentAccessOrderByRelationAggregateInput
  }

  export type PremiumContentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PremiumContentWhereInput | PremiumContentWhereInput[]
    OR?: PremiumContentWhereInput[]
    NOT?: PremiumContentWhereInput | PremiumContentWhereInput[]
    title?: StringFilter<"PremiumContent"> | string
    category?: StringFilter<"PremiumContent"> | string
    unlockPrice?: FloatFilter<"PremiumContent"> | number
    content?: JsonFilter<"PremiumContent">
    discount?: JsonNullableFilter<"PremiumContent">
    createdById?: StringFilter<"PremiumContent"> | string
    createdAt?: DateTimeFilter<"PremiumContent"> | Date | string
    createdBy?: XOR<UserScalarRelationFilter, UserWhereInput>
    access?: PremiumContentAccessListRelationFilter
  }, "id">

  export type PremiumContentOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    unlockPrice?: SortOrder
    content?: SortOrder
    discount?: SortOrderInput | SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    _count?: PremiumContentCountOrderByAggregateInput
    _avg?: PremiumContentAvgOrderByAggregateInput
    _max?: PremiumContentMaxOrderByAggregateInput
    _min?: PremiumContentMinOrderByAggregateInput
    _sum?: PremiumContentSumOrderByAggregateInput
  }

  export type PremiumContentScalarWhereWithAggregatesInput = {
    AND?: PremiumContentScalarWhereWithAggregatesInput | PremiumContentScalarWhereWithAggregatesInput[]
    OR?: PremiumContentScalarWhereWithAggregatesInput[]
    NOT?: PremiumContentScalarWhereWithAggregatesInput | PremiumContentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PremiumContent"> | string
    title?: StringWithAggregatesFilter<"PremiumContent"> | string
    category?: StringWithAggregatesFilter<"PremiumContent"> | string
    unlockPrice?: FloatWithAggregatesFilter<"PremiumContent"> | number
    content?: JsonWithAggregatesFilter<"PremiumContent">
    discount?: JsonNullableWithAggregatesFilter<"PremiumContent">
    createdById?: StringWithAggregatesFilter<"PremiumContent"> | string
    createdAt?: DateTimeWithAggregatesFilter<"PremiumContent"> | Date | string
  }

  export type PremiumContentAccessWhereInput = {
    AND?: PremiumContentAccessWhereInput | PremiumContentAccessWhereInput[]
    OR?: PremiumContentAccessWhereInput[]
    NOT?: PremiumContentAccessWhereInput | PremiumContentAccessWhereInput[]
    userId?: StringFilter<"PremiumContentAccess"> | string
    contentId?: StringFilter<"PremiumContentAccess"> | string
    purchasedAt?: DateTimeFilter<"PremiumContentAccess"> | Date | string
    expiryDate?: DateTimeNullableFilter<"PremiumContentAccess"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    premiumContent?: XOR<PremiumContentScalarRelationFilter, PremiumContentWhereInput>
  }

  export type PremiumContentAccessOrderByWithRelationInput = {
    userId?: SortOrder
    contentId?: SortOrder
    purchasedAt?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    premiumContent?: PremiumContentOrderByWithRelationInput
  }

  export type PremiumContentAccessWhereUniqueInput = Prisma.AtLeast<{
    userId_contentId?: PremiumContentAccessUserIdContentIdCompoundUniqueInput
    AND?: PremiumContentAccessWhereInput | PremiumContentAccessWhereInput[]
    OR?: PremiumContentAccessWhereInput[]
    NOT?: PremiumContentAccessWhereInput | PremiumContentAccessWhereInput[]
    userId?: StringFilter<"PremiumContentAccess"> | string
    contentId?: StringFilter<"PremiumContentAccess"> | string
    purchasedAt?: DateTimeFilter<"PremiumContentAccess"> | Date | string
    expiryDate?: DateTimeNullableFilter<"PremiumContentAccess"> | Date | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    premiumContent?: XOR<PremiumContentScalarRelationFilter, PremiumContentWhereInput>
  }, "userId_contentId">

  export type PremiumContentAccessOrderByWithAggregationInput = {
    userId?: SortOrder
    contentId?: SortOrder
    purchasedAt?: SortOrder
    expiryDate?: SortOrderInput | SortOrder
    _count?: PremiumContentAccessCountOrderByAggregateInput
    _max?: PremiumContentAccessMaxOrderByAggregateInput
    _min?: PremiumContentAccessMinOrderByAggregateInput
  }

  export type PremiumContentAccessScalarWhereWithAggregatesInput = {
    AND?: PremiumContentAccessScalarWhereWithAggregatesInput | PremiumContentAccessScalarWhereWithAggregatesInput[]
    OR?: PremiumContentAccessScalarWhereWithAggregatesInput[]
    NOT?: PremiumContentAccessScalarWhereWithAggregatesInput | PremiumContentAccessScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"PremiumContentAccess"> | string
    contentId?: StringWithAggregatesFilter<"PremiumContentAccess"> | string
    purchasedAt?: DateTimeWithAggregatesFilter<"PremiumContentAccess"> | Date | string
    expiryDate?: DateTimeNullableWithAggregatesFilter<"PremiumContentAccess"> | Date | string | null
  }

  export type NewsletterWhereInput = {
    AND?: NewsletterWhereInput | NewsletterWhereInput[]
    OR?: NewsletterWhereInput[]
    NOT?: NewsletterWhereInput | NewsletterWhereInput[]
    id?: StringFilter<"Newsletter"> | string
    email?: StringFilter<"Newsletter"> | string
    isSubscribed?: BoolFilter<"Newsletter"> | boolean
    createdAt?: DateTimeFilter<"Newsletter"> | Date | string
    updatedAt?: DateTimeFilter<"Newsletter"> | Date | string
  }

  export type NewsletterOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    isSubscribed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsletterWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: NewsletterWhereInput | NewsletterWhereInput[]
    OR?: NewsletterWhereInput[]
    NOT?: NewsletterWhereInput | NewsletterWhereInput[]
    isSubscribed?: BoolFilter<"Newsletter"> | boolean
    createdAt?: DateTimeFilter<"Newsletter"> | Date | string
    updatedAt?: DateTimeFilter<"Newsletter"> | Date | string
  }, "id" | "email">

  export type NewsletterOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    isSubscribed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: NewsletterCountOrderByAggregateInput
    _max?: NewsletterMaxOrderByAggregateInput
    _min?: NewsletterMinOrderByAggregateInput
  }

  export type NewsletterScalarWhereWithAggregatesInput = {
    AND?: NewsletterScalarWhereWithAggregatesInput | NewsletterScalarWhereWithAggregatesInput[]
    OR?: NewsletterScalarWhereWithAggregatesInput[]
    NOT?: NewsletterScalarWhereWithAggregatesInput | NewsletterScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Newsletter"> | string
    email?: StringWithAggregatesFilter<"Newsletter"> | string
    isSubscribed?: BoolWithAggregatesFilter<"Newsletter"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Newsletter"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Newsletter"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type OtpCreateInput = {
    id?: string
    phoneNumber: string
    phoneCodeHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    updatedAt?: Date | string
  }

  export type OtpUncheckedCreateInput = {
    id?: string
    phoneNumber: string
    phoneCodeHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    updatedAt?: Date | string
  }

  export type OtpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneCodeHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneCodeHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpCreateManyInput = {
    id?: string
    phoneNumber: string
    phoneCodeHash: string
    createdAt?: Date | string
    expiresAt: Date | string
    updatedAt?: Date | string
  }

  export type OtpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneCodeHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OtpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    phoneCodeHash?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletCreateInput = {
    id?: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWalletInput
    transactions?: TransactionCreateNestedManyWithoutWalletInput
    withdrawals?: WithdrawalCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id?: string
    userId: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutWalletInput
    withdrawals?: WithdrawalUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWalletNestedInput
    transactions?: TransactionUpdateManyWithoutWalletNestedInput
    withdrawals?: WithdrawalUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutWalletNestedInput
    withdrawals?: WithdrawalUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type WalletCreateManyInput = {
    id?: string
    userId: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WalletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WalletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankDetailsCreateInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBankAccountsInput
    upiIds?: UPICreateNestedManyWithoutBankDetailsInput
    withdrawls?: WithdrawalCreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsUncheckedCreateInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    userId: string
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    upiIds?: UPIUncheckedCreateNestedManyWithoutBankDetailsInput
    withdrawls?: WithdrawalUncheckedCreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBankAccountsNestedInput
    upiIds?: UPIUpdateManyWithoutBankDetailsNestedInput
    withdrawls?: WithdrawalUpdateManyWithoutBankDetailsNestedInput
  }

  export type BankDetailsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    upiIds?: UPIUncheckedUpdateManyWithoutBankDetailsNestedInput
    withdrawls?: WithdrawalUncheckedUpdateManyWithoutBankDetailsNestedInput
  }

  export type BankDetailsCreateManyInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    userId: string
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BankDetailsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankDetailsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UPICreateInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bankDetails: BankDetailsCreateNestedOneWithoutUpiIdsInput
    user: UserCreateNestedOneWithoutUpiIdsInput
    withdrawls?: WithdrawalCreateNestedManyWithoutUpiInput
  }

  export type UPIUncheckedCreateInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    bankDetailsId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    withdrawls?: WithdrawalUncheckedCreateNestedManyWithoutUpiInput
  }

  export type UPIUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankDetails?: BankDetailsUpdateOneRequiredWithoutUpiIdsNestedInput
    user?: UserUpdateOneRequiredWithoutUpiIdsNestedInput
    withdrawls?: WithdrawalUpdateManyWithoutUpiNestedInput
  }

  export type UPIUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    withdrawls?: WithdrawalUncheckedUpdateManyWithoutUpiNestedInput
  }

  export type UPICreateManyInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    bankDetailsId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UPIUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UPIUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type kycRecordsCreateInput = {
    id?: string
    socialMedia: JsonNullValueInput | InputJsonValue
    aadhaarNumber: string
    aadhaarFront: string
    aadhaarBack: string
    panCard: string
    selfie: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
    user: UserCreateNestedOneWithoutKycRecordsInput
  }

  export type kycRecordsUncheckedCreateInput = {
    id?: string
    userId: string
    socialMedia: JsonNullValueInput | InputJsonValue
    aadhaarNumber: string
    aadhaarFront: string
    aadhaarBack: string
    panCard: string
    selfie: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
  }

  export type kycRecordsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    aadhaarFront?: StringFieldUpdateOperationsInput | string
    aadhaarBack?: StringFieldUpdateOperationsInput | string
    panCard?: StringFieldUpdateOperationsInput | string
    selfie?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutKycRecordsNestedInput
  }

  export type kycRecordsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    aadhaarFront?: StringFieldUpdateOperationsInput | string
    aadhaarBack?: StringFieldUpdateOperationsInput | string
    panCard?: StringFieldUpdateOperationsInput | string
    selfie?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type kycRecordsCreateManyInput = {
    id?: string
    userId: string
    socialMedia: JsonNullValueInput | InputJsonValue
    aadhaarNumber: string
    aadhaarFront: string
    aadhaarBack: string
    panCard: string
    selfie: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
  }

  export type kycRecordsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    aadhaarFront?: StringFieldUpdateOperationsInput | string
    aadhaarBack?: StringFieldUpdateOperationsInput | string
    panCard?: StringFieldUpdateOperationsInput | string
    selfie?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type kycRecordsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    aadhaarFront?: StringFieldUpdateOperationsInput | string
    aadhaarBack?: StringFieldUpdateOperationsInput | string
    panCard?: StringFieldUpdateOperationsInput | string
    selfie?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BusinessInfoCreateInput = {
    id?: string
    firstName: string
    lastName: string
    businessStructure: string
    gstNumber?: string | null
    sebiNumber?: string | null
    sebiCertificate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBusinessInfoInput
  }

  export type BusinessInfoUncheckedCreateInput = {
    id?: string
    firstName: string
    lastName: string
    businessStructure: string
    gstNumber?: string | null
    sebiNumber?: string | null
    sebiCertificate?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessInfoUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    businessStructure?: StringFieldUpdateOperationsInput | string
    gstNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBusinessInfoNestedInput
  }

  export type BusinessInfoUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    businessStructure?: StringFieldUpdateOperationsInput | string
    gstNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessInfoCreateManyInput = {
    id?: string
    firstName: string
    lastName: string
    businessStructure: string
    gstNumber?: string | null
    sebiNumber?: string | null
    sebiCertificate?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessInfoUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    businessStructure?: StringFieldUpdateOperationsInput | string
    gstNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessInfoUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    businessStructure?: StringFieldUpdateOperationsInput | string
    gstNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    id?: string
    amount: number
    email: string
    phoneNumber: string
    product: string
    modeOfPayment: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
    wallet: WalletCreateNestedOneWithoutTransactionsInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: string
    walletId: string
    amount: number
    email: string
    phoneNumber: string
    product: string
    modeOfPayment: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    modeOfPayment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: WalletUpdateOneRequiredWithoutTransactionsNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    modeOfPayment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateManyInput = {
    id?: string
    walletId: string
    amount: number
    email: string
    phoneNumber: string
    product: string
    modeOfPayment: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    modeOfPayment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    modeOfPayment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalCreateInput = {
    id?: string
    amount: number
    modeOfWithdrawal: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
    wallet: WalletCreateNestedOneWithoutWithdrawalsInput
    bankDetails: BankDetailsCreateNestedOneWithoutWithdrawlsInput
    upi: UPICreateNestedOneWithoutWithdrawlsInput
  }

  export type WithdrawalUncheckedCreateInput = {
    id?: string
    walletId: string
    amount: number
    modeOfWithdrawal: string
    bankDetailsId: string
    upiId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type WithdrawalUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: WalletUpdateOneRequiredWithoutWithdrawalsNestedInput
    bankDetails?: BankDetailsUpdateOneRequiredWithoutWithdrawlsNestedInput
    upi?: UPIUpdateOneRequiredWithoutWithdrawlsNestedInput
  }

  export type WithdrawalUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalCreateManyInput = {
    id?: string
    walletId: string
    amount: number
    modeOfWithdrawal: string
    bankDetailsId: string
    upiId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type WithdrawalUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebinarCreateInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tickets?: WebinarTicketCreateNestedManyWithoutWebinarInput
    createdBy: UserCreateNestedOneWithoutCreatedWebinarsInput
  }

  export type WebinarUncheckedCreateInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    tickets?: WebinarTicketUncheckedCreateNestedManyWithoutWebinarInput
  }

  export type WebinarUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: WebinarTicketUpdateManyWithoutWebinarNestedInput
    createdBy?: UserUpdateOneRequiredWithoutCreatedWebinarsNestedInput
  }

  export type WebinarUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: WebinarTicketUncheckedUpdateManyWithoutWebinarNestedInput
  }

  export type WebinarCreateManyInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebinarUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebinarUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebinarTicketCreateInput = {
    id?: string
    paymentId?: string | null
    orderId?: string | null
    webinar: WebinarCreateNestedOneWithoutTicketsInput
    boughtBy: UserCreateNestedOneWithoutBoughtWebinarTicketsInput
  }

  export type WebinarTicketUncheckedCreateInput = {
    id?: string
    webinarId: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type WebinarTicketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    webinar?: WebinarUpdateOneRequiredWithoutTicketsNestedInput
    boughtBy?: UserUpdateOneRequiredWithoutBoughtWebinarTicketsNestedInput
  }

  export type WebinarTicketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    webinarId?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebinarTicketCreateManyInput = {
    id?: string
    webinarId: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type WebinarTicketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebinarTicketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    webinarId?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseCreateInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductCreateNestedManyWithoutCourseInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    purchasedBy?: CoursePurchasersCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductUncheckedCreateNestedManyWithoutCourseInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    purchasedBy?: CoursePurchasersUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUpdateManyWithoutCourseNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    purchasedBy?: CoursePurchasersUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUncheckedUpdateManyWithoutCourseNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    purchasedBy?: CoursePurchasersUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateManyInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseProductCreateInput = {
    id?: string
    title: string
    isActive?: boolean
    productMetaData: JsonNullValueInput | InputJsonValue
    course: CourseCreateNestedOneWithoutProductsInput
  }

  export type CourseProductUncheckedCreateInput = {
    id?: string
    title: string
    isActive?: boolean
    productMetaData: JsonNullValueInput | InputJsonValue
    courseId: string
  }

  export type CourseProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    productMetaData?: JsonNullValueInput | InputJsonValue
    course?: CourseUpdateOneRequiredWithoutProductsNestedInput
  }

  export type CourseProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    productMetaData?: JsonNullValueInput | InputJsonValue
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type CourseProductCreateManyInput = {
    id?: string
    title: string
    isActive?: boolean
    productMetaData: JsonNullValueInput | InputJsonValue
    courseId: string
  }

  export type CourseProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    productMetaData?: JsonNullValueInput | InputJsonValue
  }

  export type CourseProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    productMetaData?: JsonNullValueInput | InputJsonValue
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type LessonsCreateInput = {
    id?: string
    isActive: boolean
    lessonData: JsonNullValueInput | InputJsonValue
    course: CourseCreateNestedOneWithoutLessonsInput
  }

  export type LessonsUncheckedCreateInput = {
    id?: string
    isActive: boolean
    lessonData: JsonNullValueInput | InputJsonValue
    courseId: string
  }

  export type LessonsUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lessonData?: JsonNullValueInput | InputJsonValue
    course?: CourseUpdateOneRequiredWithoutLessonsNestedInput
  }

  export type LessonsUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lessonData?: JsonNullValueInput | InputJsonValue
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type LessonsCreateManyInput = {
    id?: string
    isActive: boolean
    lessonData: JsonNullValueInput | InputJsonValue
    courseId: string
  }

  export type LessonsUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lessonData?: JsonNullValueInput | InputJsonValue
  }

  export type LessonsUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lessonData?: JsonNullValueInput | InputJsonValue
    courseId?: StringFieldUpdateOperationsInput | string
  }

  export type CoursePurchasersCreateInput = {
    id?: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
    purchaser: UserCreateNestedOneWithoutCoursePurchasersInput
    course: CourseCreateNestedOneWithoutPurchasedByInput
  }

  export type CoursePurchasersUncheckedCreateInput = {
    id?: string
    courseId: string
    purchaserId: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
  }

  export type CoursePurchasersUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaser?: UserUpdateOneRequiredWithoutCoursePurchasersNestedInput
    course?: CourseUpdateOneRequiredWithoutPurchasedByNestedInput
  }

  export type CoursePurchasersUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    purchaserId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursePurchasersCreateManyInput = {
    id?: string
    courseId: string
    purchaserId: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
  }

  export type CoursePurchasersUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursePurchasersUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    purchaserId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayingUpCreateInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedPayingUpsInput
    payingUpTickets?: PayingUpTicketCreateNestedManyWithoutPayingUpInput
  }

  export type PayingUpUncheckedCreateInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    payingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutPayingUpInput
  }

  export type PayingUpUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedPayingUpsNestedInput
    payingUpTickets?: PayingUpTicketUpdateManyWithoutPayingUpNestedInput
  }

  export type PayingUpUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutPayingUpNestedInput
  }

  export type PayingUpCreateManyInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayingUpUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayingUpUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayingUpTicketCreateInput = {
    id?: string
    paymentId?: string | null
    orderId?: string | null
    payingUp: PayingUpCreateNestedOneWithoutPayingUpTicketsInput
    boughtBy: UserCreateNestedOneWithoutBoughtPayingUpTicketsInput
  }

  export type PayingUpTicketUncheckedCreateInput = {
    id?: string
    payingUpId: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type PayingUpTicketUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    payingUp?: PayingUpUpdateOneRequiredWithoutPayingUpTicketsNestedInput
    boughtBy?: UserUpdateOneRequiredWithoutBoughtPayingUpTicketsNestedInput
  }

  export type PayingUpTicketUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    payingUpId?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayingUpTicketCreateManyInput = {
    id?: string
    payingUpId: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type PayingUpTicketUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayingUpTicketUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    payingUpId?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TelegramCreateInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedTelegramsInput
    telegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutTelegramInput
  }

  export type TelegramUncheckedCreateInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutTelegramInput
  }

  export type TelegramUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedTelegramsNestedInput
    telegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutTelegramNestedInput
  }

  export type TelegramUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutTelegramNestedInput
  }

  export type TelegramCreateManyInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelegramUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelegramUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelegramSubscriptionCreateInput = {
    id?: string
    validDays: number
    chatId?: string | null
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
    telegram: TelegramCreateNestedOneWithoutTelegramSubscriptionsInput
    boughtBy: UserCreateNestedOneWithoutBoughtTelegramSubscriptionsInput
  }

  export type TelegramSubscriptionUncheckedCreateInput = {
    id?: string
    validDays: number
    telegramId: string
    chatId?: string | null
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
  }

  export type TelegramSubscriptionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegram?: TelegramUpdateOneRequiredWithoutTelegramSubscriptionsNestedInput
    boughtBy?: UserUpdateOneRequiredWithoutBoughtTelegramSubscriptionsNestedInput
  }

  export type TelegramSubscriptionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelegramSubscriptionCreateManyInput = {
    id?: string
    validDays: number
    telegramId: string
    chatId?: string | null
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
  }

  export type TelegramSubscriptionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelegramSubscriptionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumContentCreateInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPremiumContentInput
    access?: PremiumContentAccessCreateNestedManyWithoutPremiumContentInput
  }

  export type PremiumContentUncheckedCreateInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    access?: PremiumContentAccessUncheckedCreateNestedManyWithoutPremiumContentInput
  }

  export type PremiumContentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPremiumContentNestedInput
    access?: PremiumContentAccessUpdateManyWithoutPremiumContentNestedInput
  }

  export type PremiumContentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    access?: PremiumContentAccessUncheckedUpdateManyWithoutPremiumContentNestedInput
  }

  export type PremiumContentCreateManyInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
  }

  export type PremiumContentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumContentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumContentAccessCreateInput = {
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
    user: UserCreateNestedOneWithoutPremiumAccessInput
    premiumContent: PremiumContentCreateNestedOneWithoutAccessInput
  }

  export type PremiumContentAccessUncheckedCreateInput = {
    userId: string
    contentId: string
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
  }

  export type PremiumContentAccessUpdateInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPremiumAccessNestedInput
    premiumContent?: PremiumContentUpdateOneRequiredWithoutAccessNestedInput
  }

  export type PremiumContentAccessUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiumContentAccessCreateManyInput = {
    userId: string
    contentId: string
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
  }

  export type PremiumContentAccessUpdateManyMutationInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiumContentAccessUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    contentId?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NewsletterCreateInput = {
    id?: string
    email: string
    isSubscribed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsletterUncheckedCreateInput = {
    id?: string
    email: string
    isSubscribed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsletterUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isSubscribed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsletterUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isSubscribed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsletterCreateManyInput = {
    id?: string
    email: string
    isSubscribed?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NewsletterUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isSubscribed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NewsletterUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    isSubscribed?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type WebinarTicketListRelationFilter = {
    every?: WebinarTicketWhereInput
    some?: WebinarTicketWhereInput
    none?: WebinarTicketWhereInput
  }

  export type PayingUpTicketListRelationFilter = {
    every?: PayingUpTicketWhereInput
    some?: PayingUpTicketWhereInput
    none?: PayingUpTicketWhereInput
  }

  export type TelegramSubscriptionListRelationFilter = {
    every?: TelegramSubscriptionWhereInput
    some?: TelegramSubscriptionWhereInput
    none?: TelegramSubscriptionWhereInput
  }

  export type WebinarListRelationFilter = {
    every?: WebinarWhereInput
    some?: WebinarWhereInput
    none?: WebinarWhereInput
  }

  export type CourseListRelationFilter = {
    every?: CourseWhereInput
    some?: CourseWhereInput
    none?: CourseWhereInput
  }

  export type PayingUpListRelationFilter = {
    every?: PayingUpWhereInput
    some?: PayingUpWhereInput
    none?: PayingUpWhereInput
  }

  export type TelegramListRelationFilter = {
    every?: TelegramWhereInput
    some?: TelegramWhereInput
    none?: TelegramWhereInput
  }

  export type WalletNullableScalarRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type CoursePurchasersListRelationFilter = {
    every?: CoursePurchasersWhereInput
    some?: CoursePurchasersWhereInput
    none?: CoursePurchasersWhereInput
  }

  export type BusinessInfoNullableScalarRelationFilter = {
    is?: BusinessInfoWhereInput | null
    isNot?: BusinessInfoWhereInput | null
  }

  export type KycRecordsNullableScalarRelationFilter = {
    is?: kycRecordsWhereInput | null
    isNot?: kycRecordsWhereInput | null
  }

  export type BankDetailsListRelationFilter = {
    every?: BankDetailsWhereInput
    some?: BankDetailsWhereInput
    none?: BankDetailsWhereInput
  }

  export type UPIListRelationFilter = {
    every?: UPIWhereInput
    some?: UPIWhereInput
    none?: UPIWhereInput
  }

  export type PremiumContentListRelationFilter = {
    every?: PremiumContentWhereInput
    some?: PremiumContentWhereInput
    none?: PremiumContentWhereInput
  }

  export type PremiumContentAccessListRelationFilter = {
    every?: PremiumContentAccessWhereInput
    some?: PremiumContentAccessWhereInput
    none?: PremiumContentAccessWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WebinarTicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayingUpTicketOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TelegramSubscriptionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WebinarOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PayingUpOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TelegramOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoursePurchasersOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BankDetailsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UPIOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PremiumContentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PremiumContentAccessOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    socialMedia?: SortOrder
    goals?: SortOrder
    heardAboutUs?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    creatorComission?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    creatorComission?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    socialMedia?: SortOrder
    heardAboutUs?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    creatorComission?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    name?: SortOrder
    socialMedia?: SortOrder
    heardAboutUs?: SortOrder
    role?: SortOrder
    verified?: SortOrder
    creatorComission?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    creatorComission?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type OtpCountOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    phoneCodeHash?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OtpMaxOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    phoneCodeHash?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type OtpMinOrderByAggregateInput = {
    id?: SortOrder
    phoneNumber?: SortOrder
    phoneCodeHash?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type WithdrawalListRelationFilter = {
    every?: WithdrawalWhereInput
    some?: WithdrawalWhereInput
    none?: WithdrawalWhereInput
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WithdrawalOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    totalEarnings?: SortOrder
    totalWithdrawals?: SortOrder
    isKycVerified?: SortOrder
    mpin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    balance?: SortOrder
    totalEarnings?: SortOrder
    totalWithdrawals?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    totalEarnings?: SortOrder
    totalWithdrawals?: SortOrder
    isKycVerified?: SortOrder
    mpin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    balance?: SortOrder
    totalEarnings?: SortOrder
    totalWithdrawals?: SortOrder
    isKycVerified?: SortOrder
    mpin?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    balance?: SortOrder
    totalEarnings?: SortOrder
    totalWithdrawals?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BankDetailsCountOrderByAggregateInput = {
    id?: SortOrder
    accountHolderName?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankDocument?: SortOrder
    upiId?: SortOrder
    razorpayContactID?: SortOrder
    razorpayFundAccountID?: SortOrder
    userId?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankDetailsMaxOrderByAggregateInput = {
    id?: SortOrder
    accountHolderName?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankDocument?: SortOrder
    razorpayContactID?: SortOrder
    razorpayFundAccountID?: SortOrder
    userId?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankDetailsMinOrderByAggregateInput = {
    id?: SortOrder
    accountHolderName?: SortOrder
    accountNumber?: SortOrder
    ifscCode?: SortOrder
    bankDocument?: SortOrder
    razorpayContactID?: SortOrder
    razorpayFundAccountID?: SortOrder
    userId?: SortOrder
    primary?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BankDetailsScalarRelationFilter = {
    is?: BankDetailsWhereInput
    isNot?: BankDetailsWhereInput
  }

  export type UPICountOrderByAggregateInput = {
    id?: SortOrder
    upiId?: SortOrder
    razorpayFundAccountID?: SortOrder
    razorpayContactID?: SortOrder
    bankDetailsId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UPIMaxOrderByAggregateInput = {
    id?: SortOrder
    upiId?: SortOrder
    razorpayFundAccountID?: SortOrder
    razorpayContactID?: SortOrder
    bankDetailsId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UPIMinOrderByAggregateInput = {
    id?: SortOrder
    upiId?: SortOrder
    razorpayFundAccountID?: SortOrder
    razorpayContactID?: SortOrder
    bankDetailsId?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type kycRecordsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    socialMedia?: SortOrder
    aadhaarNumber?: SortOrder
    aadhaarFront?: SortOrder
    aadhaarBack?: SortOrder
    panCard?: SortOrder
    selfie?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type kycRecordsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    aadhaarNumber?: SortOrder
    aadhaarFront?: SortOrder
    aadhaarBack?: SortOrder
    panCard?: SortOrder
    selfie?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }

  export type kycRecordsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    aadhaarNumber?: SortOrder
    aadhaarFront?: SortOrder
    aadhaarBack?: SortOrder
    panCard?: SortOrder
    selfie?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    status?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type BusinessInfoCountOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    businessStructure?: SortOrder
    gstNumber?: SortOrder
    sebiNumber?: SortOrder
    sebiCertificate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BusinessInfoMaxOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    businessStructure?: SortOrder
    gstNumber?: SortOrder
    sebiNumber?: SortOrder
    sebiCertificate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type BusinessInfoMinOrderByAggregateInput = {
    id?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    businessStructure?: SortOrder
    gstNumber?: SortOrder
    sebiNumber?: SortOrder
    sebiCertificate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WalletScalarRelationFilter = {
    is?: WalletWhereInput
    isNot?: WalletWhereInput
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    product?: SortOrder
    modeOfPayment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    product?: SortOrder
    modeOfPayment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    product?: SortOrder
    modeOfPayment?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type UPIScalarRelationFilter = {
    is?: UPIWhereInput
    isNot?: UPIWhereInput
  }

  export type WithdrawalCountOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    modeOfWithdrawal?: SortOrder
    bankDetailsId?: SortOrder
    upiId?: SortOrder
    status?: SortOrder
    razorpayPayoutID?: SortOrder
    createdAt?: SortOrder
  }

  export type WithdrawalAvgOrderByAggregateInput = {
    amount?: SortOrder
  }

  export type WithdrawalMaxOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    modeOfWithdrawal?: SortOrder
    bankDetailsId?: SortOrder
    upiId?: SortOrder
    status?: SortOrder
    razorpayPayoutID?: SortOrder
    createdAt?: SortOrder
  }

  export type WithdrawalMinOrderByAggregateInput = {
    id?: SortOrder
    walletId?: SortOrder
    amount?: SortOrder
    modeOfWithdrawal?: SortOrder
    bankDetailsId?: SortOrder
    upiId?: SortOrder
    status?: SortOrder
    razorpayPayoutID?: SortOrder
    createdAt?: SortOrder
  }

  export type WithdrawalSumOrderByAggregateInput = {
    amount?: SortOrder
  }
  export type JsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type WebinarCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    coverImage?: SortOrder
    occurrence?: SortOrder
    startDate?: SortOrder
    paymentEnabled?: SortOrder
    endDate?: SortOrder
    isOnline?: SortOrder
    venue?: SortOrder
    link?: SortOrder
    discount?: SortOrder
    isPaid?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebinarAvgOrderByAggregateInput = {
    quantity?: SortOrder
    amount?: SortOrder
  }

  export type WebinarMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    coverImage?: SortOrder
    occurrence?: SortOrder
    startDate?: SortOrder
    paymentEnabled?: SortOrder
    endDate?: SortOrder
    isOnline?: SortOrder
    venue?: SortOrder
    isPaid?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebinarMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    coverImage?: SortOrder
    occurrence?: SortOrder
    startDate?: SortOrder
    paymentEnabled?: SortOrder
    endDate?: SortOrder
    isOnline?: SortOrder
    venue?: SortOrder
    isPaid?: SortOrder
    quantity?: SortOrder
    amount?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type WebinarSumOrderByAggregateInput = {
    quantity?: SortOrder
    amount?: SortOrder
  }
  export type JsonNullableWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedJsonNullableFilter<$PrismaModel>
    _max?: NestedJsonNullableFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type WebinarScalarRelationFilter = {
    is?: WebinarWhereInput
    isNot?: WebinarWhereInput
  }

  export type WebinarTicketCountOrderByAggregateInput = {
    id?: SortOrder
    webinarId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
  }

  export type WebinarTicketMaxOrderByAggregateInput = {
    id?: SortOrder
    webinarId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
  }

  export type WebinarTicketMinOrderByAggregateInput = {
    id?: SortOrder
    webinarId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type CourseProductListRelationFilter = {
    every?: CourseProductWhereInput
    some?: CourseProductWhereInput
    none?: CourseProductWhereInput
  }

  export type LessonsListRelationFilter = {
    every?: LessonsWhereInput
    some?: LessonsWhereInput
    none?: LessonsWhereInput
  }

  export type CourseProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LessonsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CourseCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    discount?: SortOrder
    validity?: SortOrder
    aboutThisCourse?: SortOrder
    testimonials?: SortOrder
    courseBenefits?: SortOrder
    faqs?: SortOrder
    gallery?: SortOrder
    coverImage?: SortOrder
    language?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type CourseMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    validity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    price?: SortOrder
    validity?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CourseSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type CourseScalarRelationFilter = {
    is?: CourseWhereInput
    isNot?: CourseWhereInput
  }

  export type CourseProductCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    productMetaData?: SortOrder
    courseId?: SortOrder
  }

  export type CourseProductMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    courseId?: SortOrder
  }

  export type CourseProductMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    isActive?: SortOrder
    courseId?: SortOrder
  }

  export type LessonsCountOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    lessonData?: SortOrder
    courseId?: SortOrder
  }

  export type LessonsMaxOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    courseId?: SortOrder
  }

  export type LessonsMinOrderByAggregateInput = {
    id?: SortOrder
    isActive?: SortOrder
    courseId?: SortOrder
  }

  export type CoursePurchasersCountOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    purchaserId?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
  }

  export type CoursePurchasersMaxOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    purchaserId?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
  }

  export type CoursePurchasersMinOrderByAggregateInput = {
    id?: SortOrder
    courseId?: SortOrder
    purchaserId?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
  }

  export type PayingUpCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    discount?: SortOrder
    paymentDetails?: SortOrder
    category?: SortOrder
    testimonials?: SortOrder
    faqs?: SortOrder
    refundPolicies?: SortOrder
    tacs?: SortOrder
    coverImage?: SortOrder
    files?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayingUpMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayingUpMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    description?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PayingUpScalarRelationFilter = {
    is?: PayingUpWhereInput
    isNot?: PayingUpWhereInput
  }

  export type PayingUpTicketCountOrderByAggregateInput = {
    id?: SortOrder
    payingUpId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
  }

  export type PayingUpTicketMaxOrderByAggregateInput = {
    id?: SortOrder
    payingUpId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
  }

  export type PayingUpTicketMinOrderByAggregateInput = {
    id?: SortOrder
    payingUpId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
  }

  export type TelegramCountOrderByAggregateInput = {
    id?: SortOrder
    coverImage?: SortOrder
    channelLink?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    discount?: SortOrder
    subscription?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TelegramMaxOrderByAggregateInput = {
    id?: SortOrder
    coverImage?: SortOrder
    channelLink?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TelegramMinOrderByAggregateInput = {
    id?: SortOrder
    coverImage?: SortOrder
    channelLink?: SortOrder
    title?: SortOrder
    description?: SortOrder
    genre?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TelegramScalarRelationFilter = {
    is?: TelegramWhereInput
    isNot?: TelegramWhereInput
  }

  export type TelegramSubscriptionCountOrderByAggregateInput = {
    id?: SortOrder
    validDays?: SortOrder
    telegramId?: SortOrder
    chatId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
  }

  export type TelegramSubscriptionAvgOrderByAggregateInput = {
    validDays?: SortOrder
  }

  export type TelegramSubscriptionMaxOrderByAggregateInput = {
    id?: SortOrder
    validDays?: SortOrder
    telegramId?: SortOrder
    chatId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
  }

  export type TelegramSubscriptionMinOrderByAggregateInput = {
    id?: SortOrder
    validDays?: SortOrder
    telegramId?: SortOrder
    chatId?: SortOrder
    boughtById?: SortOrder
    paymentId?: SortOrder
    orderId?: SortOrder
    createdAt?: SortOrder
  }

  export type TelegramSubscriptionSumOrderByAggregateInput = {
    validDays?: SortOrder
  }

  export type PremiumContentCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    unlockPrice?: SortOrder
    content?: SortOrder
    discount?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type PremiumContentAvgOrderByAggregateInput = {
    unlockPrice?: SortOrder
  }

  export type PremiumContentMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    unlockPrice?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type PremiumContentMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    category?: SortOrder
    unlockPrice?: SortOrder
    createdById?: SortOrder
    createdAt?: SortOrder
  }

  export type PremiumContentSumOrderByAggregateInput = {
    unlockPrice?: SortOrder
  }

  export type PremiumContentScalarRelationFilter = {
    is?: PremiumContentWhereInput
    isNot?: PremiumContentWhereInput
  }

  export type PremiumContentAccessUserIdContentIdCompoundUniqueInput = {
    userId: string
    contentId: string
  }

  export type PremiumContentAccessCountOrderByAggregateInput = {
    userId?: SortOrder
    contentId?: SortOrder
    purchasedAt?: SortOrder
    expiryDate?: SortOrder
  }

  export type PremiumContentAccessMaxOrderByAggregateInput = {
    userId?: SortOrder
    contentId?: SortOrder
    purchasedAt?: SortOrder
    expiryDate?: SortOrder
  }

  export type PremiumContentAccessMinOrderByAggregateInput = {
    userId?: SortOrder
    contentId?: SortOrder
    purchasedAt?: SortOrder
    expiryDate?: SortOrder
  }

  export type NewsletterCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    isSubscribed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsletterMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    isSubscribed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type NewsletterMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    isSubscribed?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserCreategoalsInput = {
    set: string[]
  }

  export type WebinarTicketCreateNestedManyWithoutBoughtByInput = {
    create?: XOR<WebinarTicketCreateWithoutBoughtByInput, WebinarTicketUncheckedCreateWithoutBoughtByInput> | WebinarTicketCreateWithoutBoughtByInput[] | WebinarTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutBoughtByInput | WebinarTicketCreateOrConnectWithoutBoughtByInput[]
    createMany?: WebinarTicketCreateManyBoughtByInputEnvelope
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
  }

  export type PayingUpTicketCreateNestedManyWithoutBoughtByInput = {
    create?: XOR<PayingUpTicketCreateWithoutBoughtByInput, PayingUpTicketUncheckedCreateWithoutBoughtByInput> | PayingUpTicketCreateWithoutBoughtByInput[] | PayingUpTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutBoughtByInput | PayingUpTicketCreateOrConnectWithoutBoughtByInput[]
    createMany?: PayingUpTicketCreateManyBoughtByInputEnvelope
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
  }

  export type TelegramSubscriptionCreateNestedManyWithoutBoughtByInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutBoughtByInput, TelegramSubscriptionUncheckedCreateWithoutBoughtByInput> | TelegramSubscriptionCreateWithoutBoughtByInput[] | TelegramSubscriptionUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutBoughtByInput | TelegramSubscriptionCreateOrConnectWithoutBoughtByInput[]
    createMany?: TelegramSubscriptionCreateManyBoughtByInputEnvelope
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
  }

  export type WebinarCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<WebinarCreateWithoutCreatedByInput, WebinarUncheckedCreateWithoutCreatedByInput> | WebinarCreateWithoutCreatedByInput[] | WebinarUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WebinarCreateOrConnectWithoutCreatedByInput | WebinarCreateOrConnectWithoutCreatedByInput[]
    createMany?: WebinarCreateManyCreatedByInputEnvelope
    connect?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
  }

  export type CourseCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type PayingUpCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PayingUpCreateWithoutCreatedByInput, PayingUpUncheckedCreateWithoutCreatedByInput> | PayingUpCreateWithoutCreatedByInput[] | PayingUpUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PayingUpCreateOrConnectWithoutCreatedByInput | PayingUpCreateOrConnectWithoutCreatedByInput[]
    createMany?: PayingUpCreateManyCreatedByInputEnvelope
    connect?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
  }

  export type TelegramCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TelegramCreateWithoutCreatedByInput, TelegramUncheckedCreateWithoutCreatedByInput> | TelegramCreateWithoutCreatedByInput[] | TelegramUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TelegramCreateOrConnectWithoutCreatedByInput | TelegramCreateOrConnectWithoutCreatedByInput[]
    createMany?: TelegramCreateManyCreatedByInputEnvelope
    connect?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
  }

  export type WalletCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type CoursePurchasersCreateNestedManyWithoutPurchaserInput = {
    create?: XOR<CoursePurchasersCreateWithoutPurchaserInput, CoursePurchasersUncheckedCreateWithoutPurchaserInput> | CoursePurchasersCreateWithoutPurchaserInput[] | CoursePurchasersUncheckedCreateWithoutPurchaserInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutPurchaserInput | CoursePurchasersCreateOrConnectWithoutPurchaserInput[]
    createMany?: CoursePurchasersCreateManyPurchaserInputEnvelope
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
  }

  export type BusinessInfoCreateNestedOneWithoutUserInput = {
    create?: XOR<BusinessInfoCreateWithoutUserInput, BusinessInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: BusinessInfoCreateOrConnectWithoutUserInput
    connect?: BusinessInfoWhereUniqueInput
  }

  export type kycRecordsCreateNestedOneWithoutUserInput = {
    create?: XOR<kycRecordsCreateWithoutUserInput, kycRecordsUncheckedCreateWithoutUserInput>
    connectOrCreate?: kycRecordsCreateOrConnectWithoutUserInput
    connect?: kycRecordsWhereUniqueInput
  }

  export type BankDetailsCreateNestedManyWithoutUserInput = {
    create?: XOR<BankDetailsCreateWithoutUserInput, BankDetailsUncheckedCreateWithoutUserInput> | BankDetailsCreateWithoutUserInput[] | BankDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankDetailsCreateOrConnectWithoutUserInput | BankDetailsCreateOrConnectWithoutUserInput[]
    createMany?: BankDetailsCreateManyUserInputEnvelope
    connect?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
  }

  export type UPICreateNestedManyWithoutUserInput = {
    create?: XOR<UPICreateWithoutUserInput, UPIUncheckedCreateWithoutUserInput> | UPICreateWithoutUserInput[] | UPIUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UPICreateOrConnectWithoutUserInput | UPICreateOrConnectWithoutUserInput[]
    createMany?: UPICreateManyUserInputEnvelope
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
  }

  export type PremiumContentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PremiumContentCreateWithoutCreatedByInput, PremiumContentUncheckedCreateWithoutCreatedByInput> | PremiumContentCreateWithoutCreatedByInput[] | PremiumContentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PremiumContentCreateOrConnectWithoutCreatedByInput | PremiumContentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PremiumContentCreateManyCreatedByInputEnvelope
    connect?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
  }

  export type PremiumContentAccessCreateNestedManyWithoutUserInput = {
    create?: XOR<PremiumContentAccessCreateWithoutUserInput, PremiumContentAccessUncheckedCreateWithoutUserInput> | PremiumContentAccessCreateWithoutUserInput[] | PremiumContentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutUserInput | PremiumContentAccessCreateOrConnectWithoutUserInput[]
    createMany?: PremiumContentAccessCreateManyUserInputEnvelope
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
  }

  export type WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput = {
    create?: XOR<WebinarTicketCreateWithoutBoughtByInput, WebinarTicketUncheckedCreateWithoutBoughtByInput> | WebinarTicketCreateWithoutBoughtByInput[] | WebinarTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutBoughtByInput | WebinarTicketCreateOrConnectWithoutBoughtByInput[]
    createMany?: WebinarTicketCreateManyBoughtByInputEnvelope
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
  }

  export type PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput = {
    create?: XOR<PayingUpTicketCreateWithoutBoughtByInput, PayingUpTicketUncheckedCreateWithoutBoughtByInput> | PayingUpTicketCreateWithoutBoughtByInput[] | PayingUpTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutBoughtByInput | PayingUpTicketCreateOrConnectWithoutBoughtByInput[]
    createMany?: PayingUpTicketCreateManyBoughtByInputEnvelope
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
  }

  export type TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutBoughtByInput, TelegramSubscriptionUncheckedCreateWithoutBoughtByInput> | TelegramSubscriptionCreateWithoutBoughtByInput[] | TelegramSubscriptionUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutBoughtByInput | TelegramSubscriptionCreateOrConnectWithoutBoughtByInput[]
    createMany?: TelegramSubscriptionCreateManyBoughtByInputEnvelope
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
  }

  export type WebinarUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<WebinarCreateWithoutCreatedByInput, WebinarUncheckedCreateWithoutCreatedByInput> | WebinarCreateWithoutCreatedByInput[] | WebinarUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WebinarCreateOrConnectWithoutCreatedByInput | WebinarCreateOrConnectWithoutCreatedByInput[]
    createMany?: WebinarCreateManyCreatedByInputEnvelope
    connect?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
  }

  export type CourseUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
  }

  export type PayingUpUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PayingUpCreateWithoutCreatedByInput, PayingUpUncheckedCreateWithoutCreatedByInput> | PayingUpCreateWithoutCreatedByInput[] | PayingUpUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PayingUpCreateOrConnectWithoutCreatedByInput | PayingUpCreateOrConnectWithoutCreatedByInput[]
    createMany?: PayingUpCreateManyCreatedByInputEnvelope
    connect?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
  }

  export type TelegramUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<TelegramCreateWithoutCreatedByInput, TelegramUncheckedCreateWithoutCreatedByInput> | TelegramCreateWithoutCreatedByInput[] | TelegramUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TelegramCreateOrConnectWithoutCreatedByInput | TelegramCreateOrConnectWithoutCreatedByInput[]
    createMany?: TelegramCreateManyCreatedByInputEnvelope
    connect?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
  }

  export type WalletUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    connect?: WalletWhereUniqueInput
  }

  export type CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput = {
    create?: XOR<CoursePurchasersCreateWithoutPurchaserInput, CoursePurchasersUncheckedCreateWithoutPurchaserInput> | CoursePurchasersCreateWithoutPurchaserInput[] | CoursePurchasersUncheckedCreateWithoutPurchaserInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutPurchaserInput | CoursePurchasersCreateOrConnectWithoutPurchaserInput[]
    createMany?: CoursePurchasersCreateManyPurchaserInputEnvelope
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
  }

  export type BusinessInfoUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<BusinessInfoCreateWithoutUserInput, BusinessInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: BusinessInfoCreateOrConnectWithoutUserInput
    connect?: BusinessInfoWhereUniqueInput
  }

  export type kycRecordsUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<kycRecordsCreateWithoutUserInput, kycRecordsUncheckedCreateWithoutUserInput>
    connectOrCreate?: kycRecordsCreateOrConnectWithoutUserInput
    connect?: kycRecordsWhereUniqueInput
  }

  export type BankDetailsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BankDetailsCreateWithoutUserInput, BankDetailsUncheckedCreateWithoutUserInput> | BankDetailsCreateWithoutUserInput[] | BankDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankDetailsCreateOrConnectWithoutUserInput | BankDetailsCreateOrConnectWithoutUserInput[]
    createMany?: BankDetailsCreateManyUserInputEnvelope
    connect?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
  }

  export type UPIUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UPICreateWithoutUserInput, UPIUncheckedCreateWithoutUserInput> | UPICreateWithoutUserInput[] | UPIUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UPICreateOrConnectWithoutUserInput | UPICreateOrConnectWithoutUserInput[]
    createMany?: UPICreateManyUserInputEnvelope
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
  }

  export type PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PremiumContentCreateWithoutCreatedByInput, PremiumContentUncheckedCreateWithoutCreatedByInput> | PremiumContentCreateWithoutCreatedByInput[] | PremiumContentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PremiumContentCreateOrConnectWithoutCreatedByInput | PremiumContentCreateOrConnectWithoutCreatedByInput[]
    createMany?: PremiumContentCreateManyCreatedByInputEnvelope
    connect?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
  }

  export type PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PremiumContentAccessCreateWithoutUserInput, PremiumContentAccessUncheckedCreateWithoutUserInput> | PremiumContentAccessCreateWithoutUserInput[] | PremiumContentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutUserInput | PremiumContentAccessCreateOrConnectWithoutUserInput[]
    createMany?: PremiumContentAccessCreateManyUserInputEnvelope
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserUpdategoalsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WebinarTicketUpdateManyWithoutBoughtByNestedInput = {
    create?: XOR<WebinarTicketCreateWithoutBoughtByInput, WebinarTicketUncheckedCreateWithoutBoughtByInput> | WebinarTicketCreateWithoutBoughtByInput[] | WebinarTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutBoughtByInput | WebinarTicketCreateOrConnectWithoutBoughtByInput[]
    upsert?: WebinarTicketUpsertWithWhereUniqueWithoutBoughtByInput | WebinarTicketUpsertWithWhereUniqueWithoutBoughtByInput[]
    createMany?: WebinarTicketCreateManyBoughtByInputEnvelope
    set?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    disconnect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    delete?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    update?: WebinarTicketUpdateWithWhereUniqueWithoutBoughtByInput | WebinarTicketUpdateWithWhereUniqueWithoutBoughtByInput[]
    updateMany?: WebinarTicketUpdateManyWithWhereWithoutBoughtByInput | WebinarTicketUpdateManyWithWhereWithoutBoughtByInput[]
    deleteMany?: WebinarTicketScalarWhereInput | WebinarTicketScalarWhereInput[]
  }

  export type PayingUpTicketUpdateManyWithoutBoughtByNestedInput = {
    create?: XOR<PayingUpTicketCreateWithoutBoughtByInput, PayingUpTicketUncheckedCreateWithoutBoughtByInput> | PayingUpTicketCreateWithoutBoughtByInput[] | PayingUpTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutBoughtByInput | PayingUpTicketCreateOrConnectWithoutBoughtByInput[]
    upsert?: PayingUpTicketUpsertWithWhereUniqueWithoutBoughtByInput | PayingUpTicketUpsertWithWhereUniqueWithoutBoughtByInput[]
    createMany?: PayingUpTicketCreateManyBoughtByInputEnvelope
    set?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    disconnect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    delete?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    update?: PayingUpTicketUpdateWithWhereUniqueWithoutBoughtByInput | PayingUpTicketUpdateWithWhereUniqueWithoutBoughtByInput[]
    updateMany?: PayingUpTicketUpdateManyWithWhereWithoutBoughtByInput | PayingUpTicketUpdateManyWithWhereWithoutBoughtByInput[]
    deleteMany?: PayingUpTicketScalarWhereInput | PayingUpTicketScalarWhereInput[]
  }

  export type TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutBoughtByInput, TelegramSubscriptionUncheckedCreateWithoutBoughtByInput> | TelegramSubscriptionCreateWithoutBoughtByInput[] | TelegramSubscriptionUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutBoughtByInput | TelegramSubscriptionCreateOrConnectWithoutBoughtByInput[]
    upsert?: TelegramSubscriptionUpsertWithWhereUniqueWithoutBoughtByInput | TelegramSubscriptionUpsertWithWhereUniqueWithoutBoughtByInput[]
    createMany?: TelegramSubscriptionCreateManyBoughtByInputEnvelope
    set?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    disconnect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    delete?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    update?: TelegramSubscriptionUpdateWithWhereUniqueWithoutBoughtByInput | TelegramSubscriptionUpdateWithWhereUniqueWithoutBoughtByInput[]
    updateMany?: TelegramSubscriptionUpdateManyWithWhereWithoutBoughtByInput | TelegramSubscriptionUpdateManyWithWhereWithoutBoughtByInput[]
    deleteMany?: TelegramSubscriptionScalarWhereInput | TelegramSubscriptionScalarWhereInput[]
  }

  export type WebinarUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<WebinarCreateWithoutCreatedByInput, WebinarUncheckedCreateWithoutCreatedByInput> | WebinarCreateWithoutCreatedByInput[] | WebinarUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WebinarCreateOrConnectWithoutCreatedByInput | WebinarCreateOrConnectWithoutCreatedByInput[]
    upsert?: WebinarUpsertWithWhereUniqueWithoutCreatedByInput | WebinarUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: WebinarCreateManyCreatedByInputEnvelope
    set?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    disconnect?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    delete?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    connect?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    update?: WebinarUpdateWithWhereUniqueWithoutCreatedByInput | WebinarUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: WebinarUpdateManyWithWhereWithoutCreatedByInput | WebinarUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: WebinarScalarWhereInput | WebinarScalarWhereInput[]
  }

  export type CourseUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatorInput | CourseUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatorInput | CourseUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatorInput | CourseUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type PayingUpUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PayingUpCreateWithoutCreatedByInput, PayingUpUncheckedCreateWithoutCreatedByInput> | PayingUpCreateWithoutCreatedByInput[] | PayingUpUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PayingUpCreateOrConnectWithoutCreatedByInput | PayingUpCreateOrConnectWithoutCreatedByInput[]
    upsert?: PayingUpUpsertWithWhereUniqueWithoutCreatedByInput | PayingUpUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PayingUpCreateManyCreatedByInputEnvelope
    set?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    disconnect?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    delete?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    connect?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    update?: PayingUpUpdateWithWhereUniqueWithoutCreatedByInput | PayingUpUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PayingUpUpdateManyWithWhereWithoutCreatedByInput | PayingUpUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PayingUpScalarWhereInput | PayingUpScalarWhereInput[]
  }

  export type TelegramUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TelegramCreateWithoutCreatedByInput, TelegramUncheckedCreateWithoutCreatedByInput> | TelegramCreateWithoutCreatedByInput[] | TelegramUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TelegramCreateOrConnectWithoutCreatedByInput | TelegramCreateOrConnectWithoutCreatedByInput[]
    upsert?: TelegramUpsertWithWhereUniqueWithoutCreatedByInput | TelegramUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TelegramCreateManyCreatedByInputEnvelope
    set?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    disconnect?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    delete?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    connect?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    update?: TelegramUpdateWithWhereUniqueWithoutCreatedByInput | TelegramUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TelegramUpdateManyWithWhereWithoutCreatedByInput | TelegramUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TelegramScalarWhereInput | TelegramScalarWhereInput[]
  }

  export type WalletUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type CoursePurchasersUpdateManyWithoutPurchaserNestedInput = {
    create?: XOR<CoursePurchasersCreateWithoutPurchaserInput, CoursePurchasersUncheckedCreateWithoutPurchaserInput> | CoursePurchasersCreateWithoutPurchaserInput[] | CoursePurchasersUncheckedCreateWithoutPurchaserInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutPurchaserInput | CoursePurchasersCreateOrConnectWithoutPurchaserInput[]
    upsert?: CoursePurchasersUpsertWithWhereUniqueWithoutPurchaserInput | CoursePurchasersUpsertWithWhereUniqueWithoutPurchaserInput[]
    createMany?: CoursePurchasersCreateManyPurchaserInputEnvelope
    set?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    disconnect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    delete?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    update?: CoursePurchasersUpdateWithWhereUniqueWithoutPurchaserInput | CoursePurchasersUpdateWithWhereUniqueWithoutPurchaserInput[]
    updateMany?: CoursePurchasersUpdateManyWithWhereWithoutPurchaserInput | CoursePurchasersUpdateManyWithWhereWithoutPurchaserInput[]
    deleteMany?: CoursePurchasersScalarWhereInput | CoursePurchasersScalarWhereInput[]
  }

  export type BusinessInfoUpdateOneWithoutUserNestedInput = {
    create?: XOR<BusinessInfoCreateWithoutUserInput, BusinessInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: BusinessInfoCreateOrConnectWithoutUserInput
    upsert?: BusinessInfoUpsertWithoutUserInput
    disconnect?: BusinessInfoWhereInput | boolean
    delete?: BusinessInfoWhereInput | boolean
    connect?: BusinessInfoWhereUniqueInput
    update?: XOR<XOR<BusinessInfoUpdateToOneWithWhereWithoutUserInput, BusinessInfoUpdateWithoutUserInput>, BusinessInfoUncheckedUpdateWithoutUserInput>
  }

  export type kycRecordsUpdateOneWithoutUserNestedInput = {
    create?: XOR<kycRecordsCreateWithoutUserInput, kycRecordsUncheckedCreateWithoutUserInput>
    connectOrCreate?: kycRecordsCreateOrConnectWithoutUserInput
    upsert?: kycRecordsUpsertWithoutUserInput
    disconnect?: kycRecordsWhereInput | boolean
    delete?: kycRecordsWhereInput | boolean
    connect?: kycRecordsWhereUniqueInput
    update?: XOR<XOR<kycRecordsUpdateToOneWithWhereWithoutUserInput, kycRecordsUpdateWithoutUserInput>, kycRecordsUncheckedUpdateWithoutUserInput>
  }

  export type BankDetailsUpdateManyWithoutUserNestedInput = {
    create?: XOR<BankDetailsCreateWithoutUserInput, BankDetailsUncheckedCreateWithoutUserInput> | BankDetailsCreateWithoutUserInput[] | BankDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankDetailsCreateOrConnectWithoutUserInput | BankDetailsCreateOrConnectWithoutUserInput[]
    upsert?: BankDetailsUpsertWithWhereUniqueWithoutUserInput | BankDetailsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BankDetailsCreateManyUserInputEnvelope
    set?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    disconnect?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    delete?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    connect?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    update?: BankDetailsUpdateWithWhereUniqueWithoutUserInput | BankDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BankDetailsUpdateManyWithWhereWithoutUserInput | BankDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BankDetailsScalarWhereInput | BankDetailsScalarWhereInput[]
  }

  export type UPIUpdateManyWithoutUserNestedInput = {
    create?: XOR<UPICreateWithoutUserInput, UPIUncheckedCreateWithoutUserInput> | UPICreateWithoutUserInput[] | UPIUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UPICreateOrConnectWithoutUserInput | UPICreateOrConnectWithoutUserInput[]
    upsert?: UPIUpsertWithWhereUniqueWithoutUserInput | UPIUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UPICreateManyUserInputEnvelope
    set?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    disconnect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    delete?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    update?: UPIUpdateWithWhereUniqueWithoutUserInput | UPIUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UPIUpdateManyWithWhereWithoutUserInput | UPIUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UPIScalarWhereInput | UPIScalarWhereInput[]
  }

  export type PremiumContentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PremiumContentCreateWithoutCreatedByInput, PremiumContentUncheckedCreateWithoutCreatedByInput> | PremiumContentCreateWithoutCreatedByInput[] | PremiumContentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PremiumContentCreateOrConnectWithoutCreatedByInput | PremiumContentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PremiumContentUpsertWithWhereUniqueWithoutCreatedByInput | PremiumContentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PremiumContentCreateManyCreatedByInputEnvelope
    set?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    disconnect?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    delete?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    connect?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    update?: PremiumContentUpdateWithWhereUniqueWithoutCreatedByInput | PremiumContentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PremiumContentUpdateManyWithWhereWithoutCreatedByInput | PremiumContentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PremiumContentScalarWhereInput | PremiumContentScalarWhereInput[]
  }

  export type PremiumContentAccessUpdateManyWithoutUserNestedInput = {
    create?: XOR<PremiumContentAccessCreateWithoutUserInput, PremiumContentAccessUncheckedCreateWithoutUserInput> | PremiumContentAccessCreateWithoutUserInput[] | PremiumContentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutUserInput | PremiumContentAccessCreateOrConnectWithoutUserInput[]
    upsert?: PremiumContentAccessUpsertWithWhereUniqueWithoutUserInput | PremiumContentAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PremiumContentAccessCreateManyUserInputEnvelope
    set?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    disconnect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    delete?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    update?: PremiumContentAccessUpdateWithWhereUniqueWithoutUserInput | PremiumContentAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PremiumContentAccessUpdateManyWithWhereWithoutUserInput | PremiumContentAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PremiumContentAccessScalarWhereInput | PremiumContentAccessScalarWhereInput[]
  }

  export type WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput = {
    create?: XOR<WebinarTicketCreateWithoutBoughtByInput, WebinarTicketUncheckedCreateWithoutBoughtByInput> | WebinarTicketCreateWithoutBoughtByInput[] | WebinarTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutBoughtByInput | WebinarTicketCreateOrConnectWithoutBoughtByInput[]
    upsert?: WebinarTicketUpsertWithWhereUniqueWithoutBoughtByInput | WebinarTicketUpsertWithWhereUniqueWithoutBoughtByInput[]
    createMany?: WebinarTicketCreateManyBoughtByInputEnvelope
    set?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    disconnect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    delete?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    update?: WebinarTicketUpdateWithWhereUniqueWithoutBoughtByInput | WebinarTicketUpdateWithWhereUniqueWithoutBoughtByInput[]
    updateMany?: WebinarTicketUpdateManyWithWhereWithoutBoughtByInput | WebinarTicketUpdateManyWithWhereWithoutBoughtByInput[]
    deleteMany?: WebinarTicketScalarWhereInput | WebinarTicketScalarWhereInput[]
  }

  export type PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput = {
    create?: XOR<PayingUpTicketCreateWithoutBoughtByInput, PayingUpTicketUncheckedCreateWithoutBoughtByInput> | PayingUpTicketCreateWithoutBoughtByInput[] | PayingUpTicketUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutBoughtByInput | PayingUpTicketCreateOrConnectWithoutBoughtByInput[]
    upsert?: PayingUpTicketUpsertWithWhereUniqueWithoutBoughtByInput | PayingUpTicketUpsertWithWhereUniqueWithoutBoughtByInput[]
    createMany?: PayingUpTicketCreateManyBoughtByInputEnvelope
    set?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    disconnect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    delete?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    update?: PayingUpTicketUpdateWithWhereUniqueWithoutBoughtByInput | PayingUpTicketUpdateWithWhereUniqueWithoutBoughtByInput[]
    updateMany?: PayingUpTicketUpdateManyWithWhereWithoutBoughtByInput | PayingUpTicketUpdateManyWithWhereWithoutBoughtByInput[]
    deleteMany?: PayingUpTicketScalarWhereInput | PayingUpTicketScalarWhereInput[]
  }

  export type TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutBoughtByInput, TelegramSubscriptionUncheckedCreateWithoutBoughtByInput> | TelegramSubscriptionCreateWithoutBoughtByInput[] | TelegramSubscriptionUncheckedCreateWithoutBoughtByInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutBoughtByInput | TelegramSubscriptionCreateOrConnectWithoutBoughtByInput[]
    upsert?: TelegramSubscriptionUpsertWithWhereUniqueWithoutBoughtByInput | TelegramSubscriptionUpsertWithWhereUniqueWithoutBoughtByInput[]
    createMany?: TelegramSubscriptionCreateManyBoughtByInputEnvelope
    set?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    disconnect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    delete?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    update?: TelegramSubscriptionUpdateWithWhereUniqueWithoutBoughtByInput | TelegramSubscriptionUpdateWithWhereUniqueWithoutBoughtByInput[]
    updateMany?: TelegramSubscriptionUpdateManyWithWhereWithoutBoughtByInput | TelegramSubscriptionUpdateManyWithWhereWithoutBoughtByInput[]
    deleteMany?: TelegramSubscriptionScalarWhereInput | TelegramSubscriptionScalarWhereInput[]
  }

  export type WebinarUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<WebinarCreateWithoutCreatedByInput, WebinarUncheckedCreateWithoutCreatedByInput> | WebinarCreateWithoutCreatedByInput[] | WebinarUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: WebinarCreateOrConnectWithoutCreatedByInput | WebinarCreateOrConnectWithoutCreatedByInput[]
    upsert?: WebinarUpsertWithWhereUniqueWithoutCreatedByInput | WebinarUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: WebinarCreateManyCreatedByInputEnvelope
    set?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    disconnect?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    delete?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    connect?: WebinarWhereUniqueInput | WebinarWhereUniqueInput[]
    update?: WebinarUpdateWithWhereUniqueWithoutCreatedByInput | WebinarUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: WebinarUpdateManyWithWhereWithoutCreatedByInput | WebinarUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: WebinarScalarWhereInput | WebinarScalarWhereInput[]
  }

  export type CourseUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput> | CourseCreateWithoutCreatorInput[] | CourseUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: CourseCreateOrConnectWithoutCreatorInput | CourseCreateOrConnectWithoutCreatorInput[]
    upsert?: CourseUpsertWithWhereUniqueWithoutCreatorInput | CourseUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: CourseCreateManyCreatorInputEnvelope
    set?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    disconnect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    delete?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    connect?: CourseWhereUniqueInput | CourseWhereUniqueInput[]
    update?: CourseUpdateWithWhereUniqueWithoutCreatorInput | CourseUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: CourseUpdateManyWithWhereWithoutCreatorInput | CourseUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: CourseScalarWhereInput | CourseScalarWhereInput[]
  }

  export type PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PayingUpCreateWithoutCreatedByInput, PayingUpUncheckedCreateWithoutCreatedByInput> | PayingUpCreateWithoutCreatedByInput[] | PayingUpUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PayingUpCreateOrConnectWithoutCreatedByInput | PayingUpCreateOrConnectWithoutCreatedByInput[]
    upsert?: PayingUpUpsertWithWhereUniqueWithoutCreatedByInput | PayingUpUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PayingUpCreateManyCreatedByInputEnvelope
    set?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    disconnect?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    delete?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    connect?: PayingUpWhereUniqueInput | PayingUpWhereUniqueInput[]
    update?: PayingUpUpdateWithWhereUniqueWithoutCreatedByInput | PayingUpUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PayingUpUpdateManyWithWhereWithoutCreatedByInput | PayingUpUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PayingUpScalarWhereInput | PayingUpScalarWhereInput[]
  }

  export type TelegramUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<TelegramCreateWithoutCreatedByInput, TelegramUncheckedCreateWithoutCreatedByInput> | TelegramCreateWithoutCreatedByInput[] | TelegramUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: TelegramCreateOrConnectWithoutCreatedByInput | TelegramCreateOrConnectWithoutCreatedByInput[]
    upsert?: TelegramUpsertWithWhereUniqueWithoutCreatedByInput | TelegramUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: TelegramCreateManyCreatedByInputEnvelope
    set?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    disconnect?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    delete?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    connect?: TelegramWhereUniqueInput | TelegramWhereUniqueInput[]
    update?: TelegramUpdateWithWhereUniqueWithoutCreatedByInput | TelegramUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: TelegramUpdateManyWithWhereWithoutCreatedByInput | TelegramUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: TelegramScalarWhereInput | TelegramScalarWhereInput[]
  }

  export type WalletUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    connectOrCreate?: WalletCreateOrConnectWithoutUserInput
    upsert?: WalletUpsertWithoutUserInput
    disconnect?: WalletWhereInput | boolean
    delete?: WalletWhereInput | boolean
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutUserInput, WalletUpdateWithoutUserInput>, WalletUncheckedUpdateWithoutUserInput>
  }

  export type CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput = {
    create?: XOR<CoursePurchasersCreateWithoutPurchaserInput, CoursePurchasersUncheckedCreateWithoutPurchaserInput> | CoursePurchasersCreateWithoutPurchaserInput[] | CoursePurchasersUncheckedCreateWithoutPurchaserInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutPurchaserInput | CoursePurchasersCreateOrConnectWithoutPurchaserInput[]
    upsert?: CoursePurchasersUpsertWithWhereUniqueWithoutPurchaserInput | CoursePurchasersUpsertWithWhereUniqueWithoutPurchaserInput[]
    createMany?: CoursePurchasersCreateManyPurchaserInputEnvelope
    set?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    disconnect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    delete?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    update?: CoursePurchasersUpdateWithWhereUniqueWithoutPurchaserInput | CoursePurchasersUpdateWithWhereUniqueWithoutPurchaserInput[]
    updateMany?: CoursePurchasersUpdateManyWithWhereWithoutPurchaserInput | CoursePurchasersUpdateManyWithWhereWithoutPurchaserInput[]
    deleteMany?: CoursePurchasersScalarWhereInput | CoursePurchasersScalarWhereInput[]
  }

  export type BusinessInfoUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<BusinessInfoCreateWithoutUserInput, BusinessInfoUncheckedCreateWithoutUserInput>
    connectOrCreate?: BusinessInfoCreateOrConnectWithoutUserInput
    upsert?: BusinessInfoUpsertWithoutUserInput
    disconnect?: BusinessInfoWhereInput | boolean
    delete?: BusinessInfoWhereInput | boolean
    connect?: BusinessInfoWhereUniqueInput
    update?: XOR<XOR<BusinessInfoUpdateToOneWithWhereWithoutUserInput, BusinessInfoUpdateWithoutUserInput>, BusinessInfoUncheckedUpdateWithoutUserInput>
  }

  export type kycRecordsUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<kycRecordsCreateWithoutUserInput, kycRecordsUncheckedCreateWithoutUserInput>
    connectOrCreate?: kycRecordsCreateOrConnectWithoutUserInput
    upsert?: kycRecordsUpsertWithoutUserInput
    disconnect?: kycRecordsWhereInput | boolean
    delete?: kycRecordsWhereInput | boolean
    connect?: kycRecordsWhereUniqueInput
    update?: XOR<XOR<kycRecordsUpdateToOneWithWhereWithoutUserInput, kycRecordsUpdateWithoutUserInput>, kycRecordsUncheckedUpdateWithoutUserInput>
  }

  export type BankDetailsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BankDetailsCreateWithoutUserInput, BankDetailsUncheckedCreateWithoutUserInput> | BankDetailsCreateWithoutUserInput[] | BankDetailsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BankDetailsCreateOrConnectWithoutUserInput | BankDetailsCreateOrConnectWithoutUserInput[]
    upsert?: BankDetailsUpsertWithWhereUniqueWithoutUserInput | BankDetailsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BankDetailsCreateManyUserInputEnvelope
    set?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    disconnect?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    delete?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    connect?: BankDetailsWhereUniqueInput | BankDetailsWhereUniqueInput[]
    update?: BankDetailsUpdateWithWhereUniqueWithoutUserInput | BankDetailsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BankDetailsUpdateManyWithWhereWithoutUserInput | BankDetailsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BankDetailsScalarWhereInput | BankDetailsScalarWhereInput[]
  }

  export type UPIUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UPICreateWithoutUserInput, UPIUncheckedCreateWithoutUserInput> | UPICreateWithoutUserInput[] | UPIUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UPICreateOrConnectWithoutUserInput | UPICreateOrConnectWithoutUserInput[]
    upsert?: UPIUpsertWithWhereUniqueWithoutUserInput | UPIUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UPICreateManyUserInputEnvelope
    set?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    disconnect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    delete?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    update?: UPIUpdateWithWhereUniqueWithoutUserInput | UPIUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UPIUpdateManyWithWhereWithoutUserInput | UPIUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UPIScalarWhereInput | UPIScalarWhereInput[]
  }

  export type PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PremiumContentCreateWithoutCreatedByInput, PremiumContentUncheckedCreateWithoutCreatedByInput> | PremiumContentCreateWithoutCreatedByInput[] | PremiumContentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PremiumContentCreateOrConnectWithoutCreatedByInput | PremiumContentCreateOrConnectWithoutCreatedByInput[]
    upsert?: PremiumContentUpsertWithWhereUniqueWithoutCreatedByInput | PremiumContentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PremiumContentCreateManyCreatedByInputEnvelope
    set?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    disconnect?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    delete?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    connect?: PremiumContentWhereUniqueInput | PremiumContentWhereUniqueInput[]
    update?: PremiumContentUpdateWithWhereUniqueWithoutCreatedByInput | PremiumContentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PremiumContentUpdateManyWithWhereWithoutCreatedByInput | PremiumContentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PremiumContentScalarWhereInput | PremiumContentScalarWhereInput[]
  }

  export type PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PremiumContentAccessCreateWithoutUserInput, PremiumContentAccessUncheckedCreateWithoutUserInput> | PremiumContentAccessCreateWithoutUserInput[] | PremiumContentAccessUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutUserInput | PremiumContentAccessCreateOrConnectWithoutUserInput[]
    upsert?: PremiumContentAccessUpsertWithWhereUniqueWithoutUserInput | PremiumContentAccessUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PremiumContentAccessCreateManyUserInputEnvelope
    set?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    disconnect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    delete?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    update?: PremiumContentAccessUpdateWithWhereUniqueWithoutUserInput | PremiumContentAccessUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PremiumContentAccessUpdateManyWithWhereWithoutUserInput | PremiumContentAccessUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PremiumContentAccessScalarWhereInput | PremiumContentAccessScalarWhereInput[]
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserCreateNestedOneWithoutWalletInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    connect?: UserWhereUniqueInput
  }

  export type TransactionCreateNestedManyWithoutWalletInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type WithdrawalCreateNestedManyWithoutWalletInput = {
    create?: XOR<WithdrawalCreateWithoutWalletInput, WithdrawalUncheckedCreateWithoutWalletInput> | WithdrawalCreateWithoutWalletInput[] | WithdrawalUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutWalletInput | WithdrawalCreateOrConnectWithoutWalletInput[]
    createMany?: WithdrawalCreateManyWalletInputEnvelope
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutWalletInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type WithdrawalUncheckedCreateNestedManyWithoutWalletInput = {
    create?: XOR<WithdrawalCreateWithoutWalletInput, WithdrawalUncheckedCreateWithoutWalletInput> | WithdrawalCreateWithoutWalletInput[] | WithdrawalUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutWalletInput | WithdrawalCreateOrConnectWithoutWalletInput[]
    createMany?: WithdrawalCreateManyWalletInputEnvelope
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutWalletNestedInput = {
    create?: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletInput
    upsert?: UserUpsertWithoutWalletInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutWalletInput, UserUpdateWithoutWalletInput>, UserUncheckedUpdateWithoutWalletInput>
  }

  export type TransactionUpdateManyWithoutWalletNestedInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutWalletInput | TransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutWalletInput | TransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutWalletInput | TransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type WithdrawalUpdateManyWithoutWalletNestedInput = {
    create?: XOR<WithdrawalCreateWithoutWalletInput, WithdrawalUncheckedCreateWithoutWalletInput> | WithdrawalCreateWithoutWalletInput[] | WithdrawalUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutWalletInput | WithdrawalCreateOrConnectWithoutWalletInput[]
    upsert?: WithdrawalUpsertWithWhereUniqueWithoutWalletInput | WithdrawalUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: WithdrawalCreateManyWalletInputEnvelope
    set?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    disconnect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    delete?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    update?: WithdrawalUpdateWithWhereUniqueWithoutWalletInput | WithdrawalUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: WithdrawalUpdateManyWithWhereWithoutWalletInput | WithdrawalUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutWalletNestedInput = {
    create?: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput> | TransactionCreateWithoutWalletInput[] | TransactionUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutWalletInput | TransactionCreateOrConnectWithoutWalletInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutWalletInput | TransactionUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: TransactionCreateManyWalletInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutWalletInput | TransactionUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutWalletInput | TransactionUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type WithdrawalUncheckedUpdateManyWithoutWalletNestedInput = {
    create?: XOR<WithdrawalCreateWithoutWalletInput, WithdrawalUncheckedCreateWithoutWalletInput> | WithdrawalCreateWithoutWalletInput[] | WithdrawalUncheckedCreateWithoutWalletInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutWalletInput | WithdrawalCreateOrConnectWithoutWalletInput[]
    upsert?: WithdrawalUpsertWithWhereUniqueWithoutWalletInput | WithdrawalUpsertWithWhereUniqueWithoutWalletInput[]
    createMany?: WithdrawalCreateManyWalletInputEnvelope
    set?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    disconnect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    delete?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    update?: WithdrawalUpdateWithWhereUniqueWithoutWalletInput | WithdrawalUpdateWithWhereUniqueWithoutWalletInput[]
    updateMany?: WithdrawalUpdateManyWithWhereWithoutWalletInput | WithdrawalUpdateManyWithWhereWithoutWalletInput[]
    deleteMany?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
  }

  export type BankDetailsCreateupiIdInput = {
    set: string[]
  }

  export type UserCreateNestedOneWithoutBankAccountsInput = {
    create?: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBankAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type UPICreateNestedManyWithoutBankDetailsInput = {
    create?: XOR<UPICreateWithoutBankDetailsInput, UPIUncheckedCreateWithoutBankDetailsInput> | UPICreateWithoutBankDetailsInput[] | UPIUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: UPICreateOrConnectWithoutBankDetailsInput | UPICreateOrConnectWithoutBankDetailsInput[]
    createMany?: UPICreateManyBankDetailsInputEnvelope
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
  }

  export type WithdrawalCreateNestedManyWithoutBankDetailsInput = {
    create?: XOR<WithdrawalCreateWithoutBankDetailsInput, WithdrawalUncheckedCreateWithoutBankDetailsInput> | WithdrawalCreateWithoutBankDetailsInput[] | WithdrawalUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutBankDetailsInput | WithdrawalCreateOrConnectWithoutBankDetailsInput[]
    createMany?: WithdrawalCreateManyBankDetailsInputEnvelope
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
  }

  export type UPIUncheckedCreateNestedManyWithoutBankDetailsInput = {
    create?: XOR<UPICreateWithoutBankDetailsInput, UPIUncheckedCreateWithoutBankDetailsInput> | UPICreateWithoutBankDetailsInput[] | UPIUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: UPICreateOrConnectWithoutBankDetailsInput | UPICreateOrConnectWithoutBankDetailsInput[]
    createMany?: UPICreateManyBankDetailsInputEnvelope
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
  }

  export type WithdrawalUncheckedCreateNestedManyWithoutBankDetailsInput = {
    create?: XOR<WithdrawalCreateWithoutBankDetailsInput, WithdrawalUncheckedCreateWithoutBankDetailsInput> | WithdrawalCreateWithoutBankDetailsInput[] | WithdrawalUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutBankDetailsInput | WithdrawalCreateOrConnectWithoutBankDetailsInput[]
    createMany?: WithdrawalCreateManyBankDetailsInputEnvelope
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
  }

  export type BankDetailsUpdateupiIdInput = {
    set?: string[]
    push?: string | string[]
  }

  export type UserUpdateOneRequiredWithoutBankAccountsNestedInput = {
    create?: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBankAccountsInput
    upsert?: UserUpsertWithoutBankAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBankAccountsInput, UserUpdateWithoutBankAccountsInput>, UserUncheckedUpdateWithoutBankAccountsInput>
  }

  export type UPIUpdateManyWithoutBankDetailsNestedInput = {
    create?: XOR<UPICreateWithoutBankDetailsInput, UPIUncheckedCreateWithoutBankDetailsInput> | UPICreateWithoutBankDetailsInput[] | UPIUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: UPICreateOrConnectWithoutBankDetailsInput | UPICreateOrConnectWithoutBankDetailsInput[]
    upsert?: UPIUpsertWithWhereUniqueWithoutBankDetailsInput | UPIUpsertWithWhereUniqueWithoutBankDetailsInput[]
    createMany?: UPICreateManyBankDetailsInputEnvelope
    set?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    disconnect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    delete?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    update?: UPIUpdateWithWhereUniqueWithoutBankDetailsInput | UPIUpdateWithWhereUniqueWithoutBankDetailsInput[]
    updateMany?: UPIUpdateManyWithWhereWithoutBankDetailsInput | UPIUpdateManyWithWhereWithoutBankDetailsInput[]
    deleteMany?: UPIScalarWhereInput | UPIScalarWhereInput[]
  }

  export type WithdrawalUpdateManyWithoutBankDetailsNestedInput = {
    create?: XOR<WithdrawalCreateWithoutBankDetailsInput, WithdrawalUncheckedCreateWithoutBankDetailsInput> | WithdrawalCreateWithoutBankDetailsInput[] | WithdrawalUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutBankDetailsInput | WithdrawalCreateOrConnectWithoutBankDetailsInput[]
    upsert?: WithdrawalUpsertWithWhereUniqueWithoutBankDetailsInput | WithdrawalUpsertWithWhereUniqueWithoutBankDetailsInput[]
    createMany?: WithdrawalCreateManyBankDetailsInputEnvelope
    set?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    disconnect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    delete?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    update?: WithdrawalUpdateWithWhereUniqueWithoutBankDetailsInput | WithdrawalUpdateWithWhereUniqueWithoutBankDetailsInput[]
    updateMany?: WithdrawalUpdateManyWithWhereWithoutBankDetailsInput | WithdrawalUpdateManyWithWhereWithoutBankDetailsInput[]
    deleteMany?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
  }

  export type UPIUncheckedUpdateManyWithoutBankDetailsNestedInput = {
    create?: XOR<UPICreateWithoutBankDetailsInput, UPIUncheckedCreateWithoutBankDetailsInput> | UPICreateWithoutBankDetailsInput[] | UPIUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: UPICreateOrConnectWithoutBankDetailsInput | UPICreateOrConnectWithoutBankDetailsInput[]
    upsert?: UPIUpsertWithWhereUniqueWithoutBankDetailsInput | UPIUpsertWithWhereUniqueWithoutBankDetailsInput[]
    createMany?: UPICreateManyBankDetailsInputEnvelope
    set?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    disconnect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    delete?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    connect?: UPIWhereUniqueInput | UPIWhereUniqueInput[]
    update?: UPIUpdateWithWhereUniqueWithoutBankDetailsInput | UPIUpdateWithWhereUniqueWithoutBankDetailsInput[]
    updateMany?: UPIUpdateManyWithWhereWithoutBankDetailsInput | UPIUpdateManyWithWhereWithoutBankDetailsInput[]
    deleteMany?: UPIScalarWhereInput | UPIScalarWhereInput[]
  }

  export type WithdrawalUncheckedUpdateManyWithoutBankDetailsNestedInput = {
    create?: XOR<WithdrawalCreateWithoutBankDetailsInput, WithdrawalUncheckedCreateWithoutBankDetailsInput> | WithdrawalCreateWithoutBankDetailsInput[] | WithdrawalUncheckedCreateWithoutBankDetailsInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutBankDetailsInput | WithdrawalCreateOrConnectWithoutBankDetailsInput[]
    upsert?: WithdrawalUpsertWithWhereUniqueWithoutBankDetailsInput | WithdrawalUpsertWithWhereUniqueWithoutBankDetailsInput[]
    createMany?: WithdrawalCreateManyBankDetailsInputEnvelope
    set?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    disconnect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    delete?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    update?: WithdrawalUpdateWithWhereUniqueWithoutBankDetailsInput | WithdrawalUpdateWithWhereUniqueWithoutBankDetailsInput[]
    updateMany?: WithdrawalUpdateManyWithWhereWithoutBankDetailsInput | WithdrawalUpdateManyWithWhereWithoutBankDetailsInput[]
    deleteMany?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
  }

  export type BankDetailsCreateNestedOneWithoutUpiIdsInput = {
    create?: XOR<BankDetailsCreateWithoutUpiIdsInput, BankDetailsUncheckedCreateWithoutUpiIdsInput>
    connectOrCreate?: BankDetailsCreateOrConnectWithoutUpiIdsInput
    connect?: BankDetailsWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpiIdsInput = {
    create?: XOR<UserCreateWithoutUpiIdsInput, UserUncheckedCreateWithoutUpiIdsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpiIdsInput
    connect?: UserWhereUniqueInput
  }

  export type WithdrawalCreateNestedManyWithoutUpiInput = {
    create?: XOR<WithdrawalCreateWithoutUpiInput, WithdrawalUncheckedCreateWithoutUpiInput> | WithdrawalCreateWithoutUpiInput[] | WithdrawalUncheckedCreateWithoutUpiInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutUpiInput | WithdrawalCreateOrConnectWithoutUpiInput[]
    createMany?: WithdrawalCreateManyUpiInputEnvelope
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
  }

  export type WithdrawalUncheckedCreateNestedManyWithoutUpiInput = {
    create?: XOR<WithdrawalCreateWithoutUpiInput, WithdrawalUncheckedCreateWithoutUpiInput> | WithdrawalCreateWithoutUpiInput[] | WithdrawalUncheckedCreateWithoutUpiInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutUpiInput | WithdrawalCreateOrConnectWithoutUpiInput[]
    createMany?: WithdrawalCreateManyUpiInputEnvelope
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
  }

  export type BankDetailsUpdateOneRequiredWithoutUpiIdsNestedInput = {
    create?: XOR<BankDetailsCreateWithoutUpiIdsInput, BankDetailsUncheckedCreateWithoutUpiIdsInput>
    connectOrCreate?: BankDetailsCreateOrConnectWithoutUpiIdsInput
    upsert?: BankDetailsUpsertWithoutUpiIdsInput
    connect?: BankDetailsWhereUniqueInput
    update?: XOR<XOR<BankDetailsUpdateToOneWithWhereWithoutUpiIdsInput, BankDetailsUpdateWithoutUpiIdsInput>, BankDetailsUncheckedUpdateWithoutUpiIdsInput>
  }

  export type UserUpdateOneRequiredWithoutUpiIdsNestedInput = {
    create?: XOR<UserCreateWithoutUpiIdsInput, UserUncheckedCreateWithoutUpiIdsInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpiIdsInput
    upsert?: UserUpsertWithoutUpiIdsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpiIdsInput, UserUpdateWithoutUpiIdsInput>, UserUncheckedUpdateWithoutUpiIdsInput>
  }

  export type WithdrawalUpdateManyWithoutUpiNestedInput = {
    create?: XOR<WithdrawalCreateWithoutUpiInput, WithdrawalUncheckedCreateWithoutUpiInput> | WithdrawalCreateWithoutUpiInput[] | WithdrawalUncheckedCreateWithoutUpiInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutUpiInput | WithdrawalCreateOrConnectWithoutUpiInput[]
    upsert?: WithdrawalUpsertWithWhereUniqueWithoutUpiInput | WithdrawalUpsertWithWhereUniqueWithoutUpiInput[]
    createMany?: WithdrawalCreateManyUpiInputEnvelope
    set?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    disconnect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    delete?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    update?: WithdrawalUpdateWithWhereUniqueWithoutUpiInput | WithdrawalUpdateWithWhereUniqueWithoutUpiInput[]
    updateMany?: WithdrawalUpdateManyWithWhereWithoutUpiInput | WithdrawalUpdateManyWithWhereWithoutUpiInput[]
    deleteMany?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
  }

  export type WithdrawalUncheckedUpdateManyWithoutUpiNestedInput = {
    create?: XOR<WithdrawalCreateWithoutUpiInput, WithdrawalUncheckedCreateWithoutUpiInput> | WithdrawalCreateWithoutUpiInput[] | WithdrawalUncheckedCreateWithoutUpiInput[]
    connectOrCreate?: WithdrawalCreateOrConnectWithoutUpiInput | WithdrawalCreateOrConnectWithoutUpiInput[]
    upsert?: WithdrawalUpsertWithWhereUniqueWithoutUpiInput | WithdrawalUpsertWithWhereUniqueWithoutUpiInput[]
    createMany?: WithdrawalCreateManyUpiInputEnvelope
    set?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    disconnect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    delete?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    connect?: WithdrawalWhereUniqueInput | WithdrawalWhereUniqueInput[]
    update?: WithdrawalUpdateWithWhereUniqueWithoutUpiInput | WithdrawalUpdateWithWhereUniqueWithoutUpiInput[]
    updateMany?: WithdrawalUpdateManyWithWhereWithoutUpiInput | WithdrawalUpdateManyWithWhereWithoutUpiInput[]
    deleteMany?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutKycRecordsInput = {
    create?: XOR<UserCreateWithoutKycRecordsInput, UserUncheckedCreateWithoutKycRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutKycRecordsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutKycRecordsNestedInput = {
    create?: XOR<UserCreateWithoutKycRecordsInput, UserUncheckedCreateWithoutKycRecordsInput>
    connectOrCreate?: UserCreateOrConnectWithoutKycRecordsInput
    upsert?: UserUpsertWithoutKycRecordsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutKycRecordsInput, UserUpdateWithoutKycRecordsInput>, UserUncheckedUpdateWithoutKycRecordsInput>
  }

  export type UserCreateNestedOneWithoutBusinessInfoInput = {
    create?: XOR<UserCreateWithoutBusinessInfoInput, UserUncheckedCreateWithoutBusinessInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessInfoInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBusinessInfoNestedInput = {
    create?: XOR<UserCreateWithoutBusinessInfoInput, UserUncheckedCreateWithoutBusinessInfoInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessInfoInput
    upsert?: UserUpsertWithoutBusinessInfoInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBusinessInfoInput, UserUpdateWithoutBusinessInfoInput>, UserUncheckedUpdateWithoutBusinessInfoInput>
  }

  export type WalletCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutTransactionsInput
    connect?: WalletWhereUniqueInput
  }

  export type WalletUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutTransactionsInput
    upsert?: WalletUpsertWithoutTransactionsInput
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutTransactionsInput, WalletUpdateWithoutTransactionsInput>, WalletUncheckedUpdateWithoutTransactionsInput>
  }

  export type WalletCreateNestedOneWithoutWithdrawalsInput = {
    create?: XOR<WalletCreateWithoutWithdrawalsInput, WalletUncheckedCreateWithoutWithdrawalsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutWithdrawalsInput
    connect?: WalletWhereUniqueInput
  }

  export type BankDetailsCreateNestedOneWithoutWithdrawlsInput = {
    create?: XOR<BankDetailsCreateWithoutWithdrawlsInput, BankDetailsUncheckedCreateWithoutWithdrawlsInput>
    connectOrCreate?: BankDetailsCreateOrConnectWithoutWithdrawlsInput
    connect?: BankDetailsWhereUniqueInput
  }

  export type UPICreateNestedOneWithoutWithdrawlsInput = {
    create?: XOR<UPICreateWithoutWithdrawlsInput, UPIUncheckedCreateWithoutWithdrawlsInput>
    connectOrCreate?: UPICreateOrConnectWithoutWithdrawlsInput
    connect?: UPIWhereUniqueInput
  }

  export type WalletUpdateOneRequiredWithoutWithdrawalsNestedInput = {
    create?: XOR<WalletCreateWithoutWithdrawalsInput, WalletUncheckedCreateWithoutWithdrawalsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutWithdrawalsInput
    upsert?: WalletUpsertWithoutWithdrawalsInput
    connect?: WalletWhereUniqueInput
    update?: XOR<XOR<WalletUpdateToOneWithWhereWithoutWithdrawalsInput, WalletUpdateWithoutWithdrawalsInput>, WalletUncheckedUpdateWithoutWithdrawalsInput>
  }

  export type BankDetailsUpdateOneRequiredWithoutWithdrawlsNestedInput = {
    create?: XOR<BankDetailsCreateWithoutWithdrawlsInput, BankDetailsUncheckedCreateWithoutWithdrawlsInput>
    connectOrCreate?: BankDetailsCreateOrConnectWithoutWithdrawlsInput
    upsert?: BankDetailsUpsertWithoutWithdrawlsInput
    connect?: BankDetailsWhereUniqueInput
    update?: XOR<XOR<BankDetailsUpdateToOneWithWhereWithoutWithdrawlsInput, BankDetailsUpdateWithoutWithdrawlsInput>, BankDetailsUncheckedUpdateWithoutWithdrawlsInput>
  }

  export type UPIUpdateOneRequiredWithoutWithdrawlsNestedInput = {
    create?: XOR<UPICreateWithoutWithdrawlsInput, UPIUncheckedCreateWithoutWithdrawlsInput>
    connectOrCreate?: UPICreateOrConnectWithoutWithdrawlsInput
    upsert?: UPIUpsertWithoutWithdrawlsInput
    connect?: UPIWhereUniqueInput
    update?: XOR<XOR<UPIUpdateToOneWithWhereWithoutWithdrawlsInput, UPIUpdateWithoutWithdrawlsInput>, UPIUncheckedUpdateWithoutWithdrawlsInput>
  }

  export type WebinarTicketCreateNestedManyWithoutWebinarInput = {
    create?: XOR<WebinarTicketCreateWithoutWebinarInput, WebinarTicketUncheckedCreateWithoutWebinarInput> | WebinarTicketCreateWithoutWebinarInput[] | WebinarTicketUncheckedCreateWithoutWebinarInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutWebinarInput | WebinarTicketCreateOrConnectWithoutWebinarInput[]
    createMany?: WebinarTicketCreateManyWebinarInputEnvelope
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedWebinarsInput = {
    create?: XOR<UserCreateWithoutCreatedWebinarsInput, UserUncheckedCreateWithoutCreatedWebinarsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedWebinarsInput
    connect?: UserWhereUniqueInput
  }

  export type WebinarTicketUncheckedCreateNestedManyWithoutWebinarInput = {
    create?: XOR<WebinarTicketCreateWithoutWebinarInput, WebinarTicketUncheckedCreateWithoutWebinarInput> | WebinarTicketCreateWithoutWebinarInput[] | WebinarTicketUncheckedCreateWithoutWebinarInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutWebinarInput | WebinarTicketCreateOrConnectWithoutWebinarInput[]
    createMany?: WebinarTicketCreateManyWebinarInputEnvelope
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type WebinarTicketUpdateManyWithoutWebinarNestedInput = {
    create?: XOR<WebinarTicketCreateWithoutWebinarInput, WebinarTicketUncheckedCreateWithoutWebinarInput> | WebinarTicketCreateWithoutWebinarInput[] | WebinarTicketUncheckedCreateWithoutWebinarInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutWebinarInput | WebinarTicketCreateOrConnectWithoutWebinarInput[]
    upsert?: WebinarTicketUpsertWithWhereUniqueWithoutWebinarInput | WebinarTicketUpsertWithWhereUniqueWithoutWebinarInput[]
    createMany?: WebinarTicketCreateManyWebinarInputEnvelope
    set?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    disconnect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    delete?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    update?: WebinarTicketUpdateWithWhereUniqueWithoutWebinarInput | WebinarTicketUpdateWithWhereUniqueWithoutWebinarInput[]
    updateMany?: WebinarTicketUpdateManyWithWhereWithoutWebinarInput | WebinarTicketUpdateManyWithWhereWithoutWebinarInput[]
    deleteMany?: WebinarTicketScalarWhereInput | WebinarTicketScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedWebinarsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedWebinarsInput, UserUncheckedCreateWithoutCreatedWebinarsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedWebinarsInput
    upsert?: UserUpsertWithoutCreatedWebinarsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedWebinarsInput, UserUpdateWithoutCreatedWebinarsInput>, UserUncheckedUpdateWithoutCreatedWebinarsInput>
  }

  export type WebinarTicketUncheckedUpdateManyWithoutWebinarNestedInput = {
    create?: XOR<WebinarTicketCreateWithoutWebinarInput, WebinarTicketUncheckedCreateWithoutWebinarInput> | WebinarTicketCreateWithoutWebinarInput[] | WebinarTicketUncheckedCreateWithoutWebinarInput[]
    connectOrCreate?: WebinarTicketCreateOrConnectWithoutWebinarInput | WebinarTicketCreateOrConnectWithoutWebinarInput[]
    upsert?: WebinarTicketUpsertWithWhereUniqueWithoutWebinarInput | WebinarTicketUpsertWithWhereUniqueWithoutWebinarInput[]
    createMany?: WebinarTicketCreateManyWebinarInputEnvelope
    set?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    disconnect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    delete?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    connect?: WebinarTicketWhereUniqueInput | WebinarTicketWhereUniqueInput[]
    update?: WebinarTicketUpdateWithWhereUniqueWithoutWebinarInput | WebinarTicketUpdateWithWhereUniqueWithoutWebinarInput[]
    updateMany?: WebinarTicketUpdateManyWithWhereWithoutWebinarInput | WebinarTicketUpdateManyWithWhereWithoutWebinarInput[]
    deleteMany?: WebinarTicketScalarWhereInput | WebinarTicketScalarWhereInput[]
  }

  export type WebinarCreateNestedOneWithoutTicketsInput = {
    create?: XOR<WebinarCreateWithoutTicketsInput, WebinarUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: WebinarCreateOrConnectWithoutTicketsInput
    connect?: WebinarWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBoughtWebinarTicketsInput = {
    create?: XOR<UserCreateWithoutBoughtWebinarTicketsInput, UserUncheckedCreateWithoutBoughtWebinarTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtWebinarTicketsInput
    connect?: UserWhereUniqueInput
  }

  export type WebinarUpdateOneRequiredWithoutTicketsNestedInput = {
    create?: XOR<WebinarCreateWithoutTicketsInput, WebinarUncheckedCreateWithoutTicketsInput>
    connectOrCreate?: WebinarCreateOrConnectWithoutTicketsInput
    upsert?: WebinarUpsertWithoutTicketsInput
    connect?: WebinarWhereUniqueInput
    update?: XOR<XOR<WebinarUpdateToOneWithWhereWithoutTicketsInput, WebinarUpdateWithoutTicketsInput>, WebinarUncheckedUpdateWithoutTicketsInput>
  }

  export type UserUpdateOneRequiredWithoutBoughtWebinarTicketsNestedInput = {
    create?: XOR<UserCreateWithoutBoughtWebinarTicketsInput, UserUncheckedCreateWithoutBoughtWebinarTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtWebinarTicketsInput
    upsert?: UserUpsertWithoutBoughtWebinarTicketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoughtWebinarTicketsInput, UserUpdateWithoutBoughtWebinarTicketsInput>, UserUncheckedUpdateWithoutBoughtWebinarTicketsInput>
  }

  export type CourseProductCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseProductCreateWithoutCourseInput, CourseProductUncheckedCreateWithoutCourseInput> | CourseProductCreateWithoutCourseInput[] | CourseProductUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseProductCreateOrConnectWithoutCourseInput | CourseProductCreateOrConnectWithoutCourseInput[]
    createMany?: CourseProductCreateManyCourseInputEnvelope
    connect?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
  }

  export type LessonsCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatedCoursesInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
  }

  export type CoursePurchasersCreateNestedManyWithoutCourseInput = {
    create?: XOR<CoursePurchasersCreateWithoutCourseInput, CoursePurchasersUncheckedCreateWithoutCourseInput> | CoursePurchasersCreateWithoutCourseInput[] | CoursePurchasersUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutCourseInput | CoursePurchasersCreateOrConnectWithoutCourseInput[]
    createMany?: CoursePurchasersCreateManyCourseInputEnvelope
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
  }

  export type CourseProductUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CourseProductCreateWithoutCourseInput, CourseProductUncheckedCreateWithoutCourseInput> | CourseProductCreateWithoutCourseInput[] | CourseProductUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseProductCreateOrConnectWithoutCourseInput | CourseProductCreateOrConnectWithoutCourseInput[]
    createMany?: CourseProductCreateManyCourseInputEnvelope
    connect?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
  }

  export type LessonsUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
  }

  export type CoursePurchasersUncheckedCreateNestedManyWithoutCourseInput = {
    create?: XOR<CoursePurchasersCreateWithoutCourseInput, CoursePurchasersUncheckedCreateWithoutCourseInput> | CoursePurchasersCreateWithoutCourseInput[] | CoursePurchasersUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutCourseInput | CoursePurchasersCreateOrConnectWithoutCourseInput[]
    createMany?: CoursePurchasersCreateManyCourseInputEnvelope
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type CourseProductUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseProductCreateWithoutCourseInput, CourseProductUncheckedCreateWithoutCourseInput> | CourseProductCreateWithoutCourseInput[] | CourseProductUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseProductCreateOrConnectWithoutCourseInput | CourseProductCreateOrConnectWithoutCourseInput[]
    upsert?: CourseProductUpsertWithWhereUniqueWithoutCourseInput | CourseProductUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseProductCreateManyCourseInputEnvelope
    set?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    disconnect?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    delete?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    connect?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    update?: CourseProductUpdateWithWhereUniqueWithoutCourseInput | CourseProductUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseProductUpdateManyWithWhereWithoutCourseInput | CourseProductUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseProductScalarWhereInput | CourseProductScalarWhereInput[]
  }

  export type LessonsUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    upsert?: LessonsUpsertWithWhereUniqueWithoutCourseInput | LessonsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    set?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    disconnect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    delete?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    update?: LessonsUpdateWithWhereUniqueWithoutCourseInput | LessonsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonsUpdateManyWithWhereWithoutCourseInput | LessonsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedCoursesNestedInput = {
    create?: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedCoursesInput
    upsert?: UserUpsertWithoutCreatedCoursesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedCoursesInput, UserUpdateWithoutCreatedCoursesInput>, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type CoursePurchasersUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CoursePurchasersCreateWithoutCourseInput, CoursePurchasersUncheckedCreateWithoutCourseInput> | CoursePurchasersCreateWithoutCourseInput[] | CoursePurchasersUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutCourseInput | CoursePurchasersCreateOrConnectWithoutCourseInput[]
    upsert?: CoursePurchasersUpsertWithWhereUniqueWithoutCourseInput | CoursePurchasersUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CoursePurchasersCreateManyCourseInputEnvelope
    set?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    disconnect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    delete?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    update?: CoursePurchasersUpdateWithWhereUniqueWithoutCourseInput | CoursePurchasersUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CoursePurchasersUpdateManyWithWhereWithoutCourseInput | CoursePurchasersUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CoursePurchasersScalarWhereInput | CoursePurchasersScalarWhereInput[]
  }

  export type CourseProductUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CourseProductCreateWithoutCourseInput, CourseProductUncheckedCreateWithoutCourseInput> | CourseProductCreateWithoutCourseInput[] | CourseProductUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CourseProductCreateOrConnectWithoutCourseInput | CourseProductCreateOrConnectWithoutCourseInput[]
    upsert?: CourseProductUpsertWithWhereUniqueWithoutCourseInput | CourseProductUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CourseProductCreateManyCourseInputEnvelope
    set?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    disconnect?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    delete?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    connect?: CourseProductWhereUniqueInput | CourseProductWhereUniqueInput[]
    update?: CourseProductUpdateWithWhereUniqueWithoutCourseInput | CourseProductUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CourseProductUpdateManyWithWhereWithoutCourseInput | CourseProductUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CourseProductScalarWhereInput | CourseProductScalarWhereInput[]
  }

  export type LessonsUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput> | LessonsCreateWithoutCourseInput[] | LessonsUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: LessonsCreateOrConnectWithoutCourseInput | LessonsCreateOrConnectWithoutCourseInput[]
    upsert?: LessonsUpsertWithWhereUniqueWithoutCourseInput | LessonsUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: LessonsCreateManyCourseInputEnvelope
    set?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    disconnect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    delete?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    connect?: LessonsWhereUniqueInput | LessonsWhereUniqueInput[]
    update?: LessonsUpdateWithWhereUniqueWithoutCourseInput | LessonsUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: LessonsUpdateManyWithWhereWithoutCourseInput | LessonsUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
  }

  export type CoursePurchasersUncheckedUpdateManyWithoutCourseNestedInput = {
    create?: XOR<CoursePurchasersCreateWithoutCourseInput, CoursePurchasersUncheckedCreateWithoutCourseInput> | CoursePurchasersCreateWithoutCourseInput[] | CoursePurchasersUncheckedCreateWithoutCourseInput[]
    connectOrCreate?: CoursePurchasersCreateOrConnectWithoutCourseInput | CoursePurchasersCreateOrConnectWithoutCourseInput[]
    upsert?: CoursePurchasersUpsertWithWhereUniqueWithoutCourseInput | CoursePurchasersUpsertWithWhereUniqueWithoutCourseInput[]
    createMany?: CoursePurchasersCreateManyCourseInputEnvelope
    set?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    disconnect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    delete?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    connect?: CoursePurchasersWhereUniqueInput | CoursePurchasersWhereUniqueInput[]
    update?: CoursePurchasersUpdateWithWhereUniqueWithoutCourseInput | CoursePurchasersUpdateWithWhereUniqueWithoutCourseInput[]
    updateMany?: CoursePurchasersUpdateManyWithWhereWithoutCourseInput | CoursePurchasersUpdateManyWithWhereWithoutCourseInput[]
    deleteMany?: CoursePurchasersScalarWhereInput | CoursePurchasersScalarWhereInput[]
  }

  export type CourseCreateNestedOneWithoutProductsInput = {
    create?: XOR<CourseCreateWithoutProductsInput, CourseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutProductsInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<CourseCreateWithoutProductsInput, CourseUncheckedCreateWithoutProductsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutProductsInput
    upsert?: CourseUpsertWithoutProductsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutProductsInput, CourseUpdateWithoutProductsInput>, CourseUncheckedUpdateWithoutProductsInput>
  }

  export type CourseCreateNestedOneWithoutLessonsInput = {
    create?: XOR<CourseCreateWithoutLessonsInput, CourseUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutLessonsInput
    connect?: CourseWhereUniqueInput
  }

  export type CourseUpdateOneRequiredWithoutLessonsNestedInput = {
    create?: XOR<CourseCreateWithoutLessonsInput, CourseUncheckedCreateWithoutLessonsInput>
    connectOrCreate?: CourseCreateOrConnectWithoutLessonsInput
    upsert?: CourseUpsertWithoutLessonsInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutLessonsInput, CourseUpdateWithoutLessonsInput>, CourseUncheckedUpdateWithoutLessonsInput>
  }

  export type UserCreateNestedOneWithoutCoursePurchasersInput = {
    create?: XOR<UserCreateWithoutCoursePurchasersInput, UserUncheckedCreateWithoutCoursePurchasersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoursePurchasersInput
    connect?: UserWhereUniqueInput
  }

  export type CourseCreateNestedOneWithoutPurchasedByInput = {
    create?: XOR<CourseCreateWithoutPurchasedByInput, CourseUncheckedCreateWithoutPurchasedByInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPurchasedByInput
    connect?: CourseWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutCoursePurchasersNestedInput = {
    create?: XOR<UserCreateWithoutCoursePurchasersInput, UserUncheckedCreateWithoutCoursePurchasersInput>
    connectOrCreate?: UserCreateOrConnectWithoutCoursePurchasersInput
    upsert?: UserUpsertWithoutCoursePurchasersInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCoursePurchasersInput, UserUpdateWithoutCoursePurchasersInput>, UserUncheckedUpdateWithoutCoursePurchasersInput>
  }

  export type CourseUpdateOneRequiredWithoutPurchasedByNestedInput = {
    create?: XOR<CourseCreateWithoutPurchasedByInput, CourseUncheckedCreateWithoutPurchasedByInput>
    connectOrCreate?: CourseCreateOrConnectWithoutPurchasedByInput
    upsert?: CourseUpsertWithoutPurchasedByInput
    connect?: CourseWhereUniqueInput
    update?: XOR<XOR<CourseUpdateToOneWithWhereWithoutPurchasedByInput, CourseUpdateWithoutPurchasedByInput>, CourseUncheckedUpdateWithoutPurchasedByInput>
  }

  export type UserCreateNestedOneWithoutCreatedPayingUpsInput = {
    create?: XOR<UserCreateWithoutCreatedPayingUpsInput, UserUncheckedCreateWithoutCreatedPayingUpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPayingUpsInput
    connect?: UserWhereUniqueInput
  }

  export type PayingUpTicketCreateNestedManyWithoutPayingUpInput = {
    create?: XOR<PayingUpTicketCreateWithoutPayingUpInput, PayingUpTicketUncheckedCreateWithoutPayingUpInput> | PayingUpTicketCreateWithoutPayingUpInput[] | PayingUpTicketUncheckedCreateWithoutPayingUpInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutPayingUpInput | PayingUpTicketCreateOrConnectWithoutPayingUpInput[]
    createMany?: PayingUpTicketCreateManyPayingUpInputEnvelope
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
  }

  export type PayingUpTicketUncheckedCreateNestedManyWithoutPayingUpInput = {
    create?: XOR<PayingUpTicketCreateWithoutPayingUpInput, PayingUpTicketUncheckedCreateWithoutPayingUpInput> | PayingUpTicketCreateWithoutPayingUpInput[] | PayingUpTicketUncheckedCreateWithoutPayingUpInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutPayingUpInput | PayingUpTicketCreateOrConnectWithoutPayingUpInput[]
    createMany?: PayingUpTicketCreateManyPayingUpInputEnvelope
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedPayingUpsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedPayingUpsInput, UserUncheckedCreateWithoutCreatedPayingUpsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedPayingUpsInput
    upsert?: UserUpsertWithoutCreatedPayingUpsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedPayingUpsInput, UserUpdateWithoutCreatedPayingUpsInput>, UserUncheckedUpdateWithoutCreatedPayingUpsInput>
  }

  export type PayingUpTicketUpdateManyWithoutPayingUpNestedInput = {
    create?: XOR<PayingUpTicketCreateWithoutPayingUpInput, PayingUpTicketUncheckedCreateWithoutPayingUpInput> | PayingUpTicketCreateWithoutPayingUpInput[] | PayingUpTicketUncheckedCreateWithoutPayingUpInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutPayingUpInput | PayingUpTicketCreateOrConnectWithoutPayingUpInput[]
    upsert?: PayingUpTicketUpsertWithWhereUniqueWithoutPayingUpInput | PayingUpTicketUpsertWithWhereUniqueWithoutPayingUpInput[]
    createMany?: PayingUpTicketCreateManyPayingUpInputEnvelope
    set?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    disconnect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    delete?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    update?: PayingUpTicketUpdateWithWhereUniqueWithoutPayingUpInput | PayingUpTicketUpdateWithWhereUniqueWithoutPayingUpInput[]
    updateMany?: PayingUpTicketUpdateManyWithWhereWithoutPayingUpInput | PayingUpTicketUpdateManyWithWhereWithoutPayingUpInput[]
    deleteMany?: PayingUpTicketScalarWhereInput | PayingUpTicketScalarWhereInput[]
  }

  export type PayingUpTicketUncheckedUpdateManyWithoutPayingUpNestedInput = {
    create?: XOR<PayingUpTicketCreateWithoutPayingUpInput, PayingUpTicketUncheckedCreateWithoutPayingUpInput> | PayingUpTicketCreateWithoutPayingUpInput[] | PayingUpTicketUncheckedCreateWithoutPayingUpInput[]
    connectOrCreate?: PayingUpTicketCreateOrConnectWithoutPayingUpInput | PayingUpTicketCreateOrConnectWithoutPayingUpInput[]
    upsert?: PayingUpTicketUpsertWithWhereUniqueWithoutPayingUpInput | PayingUpTicketUpsertWithWhereUniqueWithoutPayingUpInput[]
    createMany?: PayingUpTicketCreateManyPayingUpInputEnvelope
    set?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    disconnect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    delete?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    connect?: PayingUpTicketWhereUniqueInput | PayingUpTicketWhereUniqueInput[]
    update?: PayingUpTicketUpdateWithWhereUniqueWithoutPayingUpInput | PayingUpTicketUpdateWithWhereUniqueWithoutPayingUpInput[]
    updateMany?: PayingUpTicketUpdateManyWithWhereWithoutPayingUpInput | PayingUpTicketUpdateManyWithWhereWithoutPayingUpInput[]
    deleteMany?: PayingUpTicketScalarWhereInput | PayingUpTicketScalarWhereInput[]
  }

  export type PayingUpCreateNestedOneWithoutPayingUpTicketsInput = {
    create?: XOR<PayingUpCreateWithoutPayingUpTicketsInput, PayingUpUncheckedCreateWithoutPayingUpTicketsInput>
    connectOrCreate?: PayingUpCreateOrConnectWithoutPayingUpTicketsInput
    connect?: PayingUpWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBoughtPayingUpTicketsInput = {
    create?: XOR<UserCreateWithoutBoughtPayingUpTicketsInput, UserUncheckedCreateWithoutBoughtPayingUpTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtPayingUpTicketsInput
    connect?: UserWhereUniqueInput
  }

  export type PayingUpUpdateOneRequiredWithoutPayingUpTicketsNestedInput = {
    create?: XOR<PayingUpCreateWithoutPayingUpTicketsInput, PayingUpUncheckedCreateWithoutPayingUpTicketsInput>
    connectOrCreate?: PayingUpCreateOrConnectWithoutPayingUpTicketsInput
    upsert?: PayingUpUpsertWithoutPayingUpTicketsInput
    connect?: PayingUpWhereUniqueInput
    update?: XOR<XOR<PayingUpUpdateToOneWithWhereWithoutPayingUpTicketsInput, PayingUpUpdateWithoutPayingUpTicketsInput>, PayingUpUncheckedUpdateWithoutPayingUpTicketsInput>
  }

  export type UserUpdateOneRequiredWithoutBoughtPayingUpTicketsNestedInput = {
    create?: XOR<UserCreateWithoutBoughtPayingUpTicketsInput, UserUncheckedCreateWithoutBoughtPayingUpTicketsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtPayingUpTicketsInput
    upsert?: UserUpsertWithoutBoughtPayingUpTicketsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoughtPayingUpTicketsInput, UserUpdateWithoutBoughtPayingUpTicketsInput>, UserUncheckedUpdateWithoutBoughtPayingUpTicketsInput>
  }

  export type UserCreateNestedOneWithoutCreatedTelegramsInput = {
    create?: XOR<UserCreateWithoutCreatedTelegramsInput, UserUncheckedCreateWithoutCreatedTelegramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTelegramsInput
    connect?: UserWhereUniqueInput
  }

  export type TelegramSubscriptionCreateNestedManyWithoutTelegramInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutTelegramInput, TelegramSubscriptionUncheckedCreateWithoutTelegramInput> | TelegramSubscriptionCreateWithoutTelegramInput[] | TelegramSubscriptionUncheckedCreateWithoutTelegramInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutTelegramInput | TelegramSubscriptionCreateOrConnectWithoutTelegramInput[]
    createMany?: TelegramSubscriptionCreateManyTelegramInputEnvelope
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
  }

  export type TelegramSubscriptionUncheckedCreateNestedManyWithoutTelegramInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutTelegramInput, TelegramSubscriptionUncheckedCreateWithoutTelegramInput> | TelegramSubscriptionCreateWithoutTelegramInput[] | TelegramSubscriptionUncheckedCreateWithoutTelegramInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutTelegramInput | TelegramSubscriptionCreateOrConnectWithoutTelegramInput[]
    createMany?: TelegramSubscriptionCreateManyTelegramInputEnvelope
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCreatedTelegramsNestedInput = {
    create?: XOR<UserCreateWithoutCreatedTelegramsInput, UserUncheckedCreateWithoutCreatedTelegramsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatedTelegramsInput
    upsert?: UserUpsertWithoutCreatedTelegramsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatedTelegramsInput, UserUpdateWithoutCreatedTelegramsInput>, UserUncheckedUpdateWithoutCreatedTelegramsInput>
  }

  export type TelegramSubscriptionUpdateManyWithoutTelegramNestedInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutTelegramInput, TelegramSubscriptionUncheckedCreateWithoutTelegramInput> | TelegramSubscriptionCreateWithoutTelegramInput[] | TelegramSubscriptionUncheckedCreateWithoutTelegramInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutTelegramInput | TelegramSubscriptionCreateOrConnectWithoutTelegramInput[]
    upsert?: TelegramSubscriptionUpsertWithWhereUniqueWithoutTelegramInput | TelegramSubscriptionUpsertWithWhereUniqueWithoutTelegramInput[]
    createMany?: TelegramSubscriptionCreateManyTelegramInputEnvelope
    set?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    disconnect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    delete?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    update?: TelegramSubscriptionUpdateWithWhereUniqueWithoutTelegramInput | TelegramSubscriptionUpdateWithWhereUniqueWithoutTelegramInput[]
    updateMany?: TelegramSubscriptionUpdateManyWithWhereWithoutTelegramInput | TelegramSubscriptionUpdateManyWithWhereWithoutTelegramInput[]
    deleteMany?: TelegramSubscriptionScalarWhereInput | TelegramSubscriptionScalarWhereInput[]
  }

  export type TelegramSubscriptionUncheckedUpdateManyWithoutTelegramNestedInput = {
    create?: XOR<TelegramSubscriptionCreateWithoutTelegramInput, TelegramSubscriptionUncheckedCreateWithoutTelegramInput> | TelegramSubscriptionCreateWithoutTelegramInput[] | TelegramSubscriptionUncheckedCreateWithoutTelegramInput[]
    connectOrCreate?: TelegramSubscriptionCreateOrConnectWithoutTelegramInput | TelegramSubscriptionCreateOrConnectWithoutTelegramInput[]
    upsert?: TelegramSubscriptionUpsertWithWhereUniqueWithoutTelegramInput | TelegramSubscriptionUpsertWithWhereUniqueWithoutTelegramInput[]
    createMany?: TelegramSubscriptionCreateManyTelegramInputEnvelope
    set?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    disconnect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    delete?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    connect?: TelegramSubscriptionWhereUniqueInput | TelegramSubscriptionWhereUniqueInput[]
    update?: TelegramSubscriptionUpdateWithWhereUniqueWithoutTelegramInput | TelegramSubscriptionUpdateWithWhereUniqueWithoutTelegramInput[]
    updateMany?: TelegramSubscriptionUpdateManyWithWhereWithoutTelegramInput | TelegramSubscriptionUpdateManyWithWhereWithoutTelegramInput[]
    deleteMany?: TelegramSubscriptionScalarWhereInput | TelegramSubscriptionScalarWhereInput[]
  }

  export type TelegramCreateNestedOneWithoutTelegramSubscriptionsInput = {
    create?: XOR<TelegramCreateWithoutTelegramSubscriptionsInput, TelegramUncheckedCreateWithoutTelegramSubscriptionsInput>
    connectOrCreate?: TelegramCreateOrConnectWithoutTelegramSubscriptionsInput
    connect?: TelegramWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutBoughtTelegramSubscriptionsInput = {
    create?: XOR<UserCreateWithoutBoughtTelegramSubscriptionsInput, UserUncheckedCreateWithoutBoughtTelegramSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtTelegramSubscriptionsInput
    connect?: UserWhereUniqueInput
  }

  export type TelegramUpdateOneRequiredWithoutTelegramSubscriptionsNestedInput = {
    create?: XOR<TelegramCreateWithoutTelegramSubscriptionsInput, TelegramUncheckedCreateWithoutTelegramSubscriptionsInput>
    connectOrCreate?: TelegramCreateOrConnectWithoutTelegramSubscriptionsInput
    upsert?: TelegramUpsertWithoutTelegramSubscriptionsInput
    connect?: TelegramWhereUniqueInput
    update?: XOR<XOR<TelegramUpdateToOneWithWhereWithoutTelegramSubscriptionsInput, TelegramUpdateWithoutTelegramSubscriptionsInput>, TelegramUncheckedUpdateWithoutTelegramSubscriptionsInput>
  }

  export type UserUpdateOneRequiredWithoutBoughtTelegramSubscriptionsNestedInput = {
    create?: XOR<UserCreateWithoutBoughtTelegramSubscriptionsInput, UserUncheckedCreateWithoutBoughtTelegramSubscriptionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutBoughtTelegramSubscriptionsInput
    upsert?: UserUpsertWithoutBoughtTelegramSubscriptionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBoughtTelegramSubscriptionsInput, UserUpdateWithoutBoughtTelegramSubscriptionsInput>, UserUncheckedUpdateWithoutBoughtTelegramSubscriptionsInput>
  }

  export type UserCreateNestedOneWithoutPremiumContentInput = {
    create?: XOR<UserCreateWithoutPremiumContentInput, UserUncheckedCreateWithoutPremiumContentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiumContentInput
    connect?: UserWhereUniqueInput
  }

  export type PremiumContentAccessCreateNestedManyWithoutPremiumContentInput = {
    create?: XOR<PremiumContentAccessCreateWithoutPremiumContentInput, PremiumContentAccessUncheckedCreateWithoutPremiumContentInput> | PremiumContentAccessCreateWithoutPremiumContentInput[] | PremiumContentAccessUncheckedCreateWithoutPremiumContentInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutPremiumContentInput | PremiumContentAccessCreateOrConnectWithoutPremiumContentInput[]
    createMany?: PremiumContentAccessCreateManyPremiumContentInputEnvelope
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
  }

  export type PremiumContentAccessUncheckedCreateNestedManyWithoutPremiumContentInput = {
    create?: XOR<PremiumContentAccessCreateWithoutPremiumContentInput, PremiumContentAccessUncheckedCreateWithoutPremiumContentInput> | PremiumContentAccessCreateWithoutPremiumContentInput[] | PremiumContentAccessUncheckedCreateWithoutPremiumContentInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutPremiumContentInput | PremiumContentAccessCreateOrConnectWithoutPremiumContentInput[]
    createMany?: PremiumContentAccessCreateManyPremiumContentInputEnvelope
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutPremiumContentNestedInput = {
    create?: XOR<UserCreateWithoutPremiumContentInput, UserUncheckedCreateWithoutPremiumContentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiumContentInput
    upsert?: UserUpsertWithoutPremiumContentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPremiumContentInput, UserUpdateWithoutPremiumContentInput>, UserUncheckedUpdateWithoutPremiumContentInput>
  }

  export type PremiumContentAccessUpdateManyWithoutPremiumContentNestedInput = {
    create?: XOR<PremiumContentAccessCreateWithoutPremiumContentInput, PremiumContentAccessUncheckedCreateWithoutPremiumContentInput> | PremiumContentAccessCreateWithoutPremiumContentInput[] | PremiumContentAccessUncheckedCreateWithoutPremiumContentInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutPremiumContentInput | PremiumContentAccessCreateOrConnectWithoutPremiumContentInput[]
    upsert?: PremiumContentAccessUpsertWithWhereUniqueWithoutPremiumContentInput | PremiumContentAccessUpsertWithWhereUniqueWithoutPremiumContentInput[]
    createMany?: PremiumContentAccessCreateManyPremiumContentInputEnvelope
    set?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    disconnect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    delete?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    update?: PremiumContentAccessUpdateWithWhereUniqueWithoutPremiumContentInput | PremiumContentAccessUpdateWithWhereUniqueWithoutPremiumContentInput[]
    updateMany?: PremiumContentAccessUpdateManyWithWhereWithoutPremiumContentInput | PremiumContentAccessUpdateManyWithWhereWithoutPremiumContentInput[]
    deleteMany?: PremiumContentAccessScalarWhereInput | PremiumContentAccessScalarWhereInput[]
  }

  export type PremiumContentAccessUncheckedUpdateManyWithoutPremiumContentNestedInput = {
    create?: XOR<PremiumContentAccessCreateWithoutPremiumContentInput, PremiumContentAccessUncheckedCreateWithoutPremiumContentInput> | PremiumContentAccessCreateWithoutPremiumContentInput[] | PremiumContentAccessUncheckedCreateWithoutPremiumContentInput[]
    connectOrCreate?: PremiumContentAccessCreateOrConnectWithoutPremiumContentInput | PremiumContentAccessCreateOrConnectWithoutPremiumContentInput[]
    upsert?: PremiumContentAccessUpsertWithWhereUniqueWithoutPremiumContentInput | PremiumContentAccessUpsertWithWhereUniqueWithoutPremiumContentInput[]
    createMany?: PremiumContentAccessCreateManyPremiumContentInputEnvelope
    set?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    disconnect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    delete?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    connect?: PremiumContentAccessWhereUniqueInput | PremiumContentAccessWhereUniqueInput[]
    update?: PremiumContentAccessUpdateWithWhereUniqueWithoutPremiumContentInput | PremiumContentAccessUpdateWithWhereUniqueWithoutPremiumContentInput[]
    updateMany?: PremiumContentAccessUpdateManyWithWhereWithoutPremiumContentInput | PremiumContentAccessUpdateManyWithWhereWithoutPremiumContentInput[]
    deleteMany?: PremiumContentAccessScalarWhereInput | PremiumContentAccessScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPremiumAccessInput = {
    create?: XOR<UserCreateWithoutPremiumAccessInput, UserUncheckedCreateWithoutPremiumAccessInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiumAccessInput
    connect?: UserWhereUniqueInput
  }

  export type PremiumContentCreateNestedOneWithoutAccessInput = {
    create?: XOR<PremiumContentCreateWithoutAccessInput, PremiumContentUncheckedCreateWithoutAccessInput>
    connectOrCreate?: PremiumContentCreateOrConnectWithoutAccessInput
    connect?: PremiumContentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPremiumAccessNestedInput = {
    create?: XOR<UserCreateWithoutPremiumAccessInput, UserUncheckedCreateWithoutPremiumAccessInput>
    connectOrCreate?: UserCreateOrConnectWithoutPremiumAccessInput
    upsert?: UserUpsertWithoutPremiumAccessInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPremiumAccessInput, UserUpdateWithoutPremiumAccessInput>, UserUncheckedUpdateWithoutPremiumAccessInput>
  }

  export type PremiumContentUpdateOneRequiredWithoutAccessNestedInput = {
    create?: XOR<PremiumContentCreateWithoutAccessInput, PremiumContentUncheckedCreateWithoutAccessInput>
    connectOrCreate?: PremiumContentCreateOrConnectWithoutAccessInput
    upsert?: PremiumContentUpsertWithoutAccessInput
    connect?: PremiumContentWhereUniqueInput
    update?: XOR<XOR<PremiumContentUpdateToOneWithWhereWithoutAccessInput, PremiumContentUpdateWithoutAccessInput>, PremiumContentUncheckedUpdateWithoutAccessInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }
  export type NestedJsonNullableFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonNullableFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonNullableFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type WebinarTicketCreateWithoutBoughtByInput = {
    id?: string
    paymentId?: string | null
    orderId?: string | null
    webinar: WebinarCreateNestedOneWithoutTicketsInput
  }

  export type WebinarTicketUncheckedCreateWithoutBoughtByInput = {
    id?: string
    webinarId: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type WebinarTicketCreateOrConnectWithoutBoughtByInput = {
    where: WebinarTicketWhereUniqueInput
    create: XOR<WebinarTicketCreateWithoutBoughtByInput, WebinarTicketUncheckedCreateWithoutBoughtByInput>
  }

  export type WebinarTicketCreateManyBoughtByInputEnvelope = {
    data: WebinarTicketCreateManyBoughtByInput | WebinarTicketCreateManyBoughtByInput[]
    skipDuplicates?: boolean
  }

  export type PayingUpTicketCreateWithoutBoughtByInput = {
    id?: string
    paymentId?: string | null
    orderId?: string | null
    payingUp: PayingUpCreateNestedOneWithoutPayingUpTicketsInput
  }

  export type PayingUpTicketUncheckedCreateWithoutBoughtByInput = {
    id?: string
    payingUpId: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type PayingUpTicketCreateOrConnectWithoutBoughtByInput = {
    where: PayingUpTicketWhereUniqueInput
    create: XOR<PayingUpTicketCreateWithoutBoughtByInput, PayingUpTicketUncheckedCreateWithoutBoughtByInput>
  }

  export type PayingUpTicketCreateManyBoughtByInputEnvelope = {
    data: PayingUpTicketCreateManyBoughtByInput | PayingUpTicketCreateManyBoughtByInput[]
    skipDuplicates?: boolean
  }

  export type TelegramSubscriptionCreateWithoutBoughtByInput = {
    id?: string
    validDays: number
    chatId?: string | null
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
    telegram: TelegramCreateNestedOneWithoutTelegramSubscriptionsInput
  }

  export type TelegramSubscriptionUncheckedCreateWithoutBoughtByInput = {
    id?: string
    validDays: number
    telegramId: string
    chatId?: string | null
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
  }

  export type TelegramSubscriptionCreateOrConnectWithoutBoughtByInput = {
    where: TelegramSubscriptionWhereUniqueInput
    create: XOR<TelegramSubscriptionCreateWithoutBoughtByInput, TelegramSubscriptionUncheckedCreateWithoutBoughtByInput>
  }

  export type TelegramSubscriptionCreateManyBoughtByInputEnvelope = {
    data: TelegramSubscriptionCreateManyBoughtByInput | TelegramSubscriptionCreateManyBoughtByInput[]
    skipDuplicates?: boolean
  }

  export type WebinarCreateWithoutCreatedByInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tickets?: WebinarTicketCreateNestedManyWithoutWebinarInput
  }

  export type WebinarUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tickets?: WebinarTicketUncheckedCreateNestedManyWithoutWebinarInput
  }

  export type WebinarCreateOrConnectWithoutCreatedByInput = {
    where: WebinarWhereUniqueInput
    create: XOR<WebinarCreateWithoutCreatedByInput, WebinarUncheckedCreateWithoutCreatedByInput>
  }

  export type WebinarCreateManyCreatedByInputEnvelope = {
    data: WebinarCreateManyCreatedByInput | WebinarCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type CourseCreateWithoutCreatorInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductCreateNestedManyWithoutCourseInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    purchasedBy?: CoursePurchasersCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutCreatorInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductUncheckedCreateNestedManyWithoutCourseInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    purchasedBy?: CoursePurchasersUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput>
  }

  export type CourseCreateManyCreatorInputEnvelope = {
    data: CourseCreateManyCreatorInput | CourseCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type PayingUpCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    payingUpTickets?: PayingUpTicketCreateNestedManyWithoutPayingUpInput
  }

  export type PayingUpUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    payingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutPayingUpInput
  }

  export type PayingUpCreateOrConnectWithoutCreatedByInput = {
    where: PayingUpWhereUniqueInput
    create: XOR<PayingUpCreateWithoutCreatedByInput, PayingUpUncheckedCreateWithoutCreatedByInput>
  }

  export type PayingUpCreateManyCreatedByInputEnvelope = {
    data: PayingUpCreateManyCreatedByInput | PayingUpCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type TelegramCreateWithoutCreatedByInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutTelegramInput
  }

  export type TelegramUncheckedCreateWithoutCreatedByInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    telegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutTelegramInput
  }

  export type TelegramCreateOrConnectWithoutCreatedByInput = {
    where: TelegramWhereUniqueInput
    create: XOR<TelegramCreateWithoutCreatedByInput, TelegramUncheckedCreateWithoutCreatedByInput>
  }

  export type TelegramCreateManyCreatedByInputEnvelope = {
    data: TelegramCreateManyCreatedByInput | TelegramCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type WalletCreateWithoutUserInput = {
    id?: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutWalletInput
    withdrawals?: WithdrawalCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutUserInput = {
    id?: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutWalletInput
    withdrawals?: WithdrawalUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutUserInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type CoursePurchasersCreateWithoutPurchaserInput = {
    id?: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
    course: CourseCreateNestedOneWithoutPurchasedByInput
  }

  export type CoursePurchasersUncheckedCreateWithoutPurchaserInput = {
    id?: string
    courseId: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
  }

  export type CoursePurchasersCreateOrConnectWithoutPurchaserInput = {
    where: CoursePurchasersWhereUniqueInput
    create: XOR<CoursePurchasersCreateWithoutPurchaserInput, CoursePurchasersUncheckedCreateWithoutPurchaserInput>
  }

  export type CoursePurchasersCreateManyPurchaserInputEnvelope = {
    data: CoursePurchasersCreateManyPurchaserInput | CoursePurchasersCreateManyPurchaserInput[]
    skipDuplicates?: boolean
  }

  export type BusinessInfoCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    businessStructure: string
    gstNumber?: string | null
    sebiNumber?: string | null
    sebiCertificate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessInfoUncheckedCreateWithoutUserInput = {
    id?: string
    firstName: string
    lastName: string
    businessStructure: string
    gstNumber?: string | null
    sebiNumber?: string | null
    sebiCertificate?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessInfoCreateOrConnectWithoutUserInput = {
    where: BusinessInfoWhereUniqueInput
    create: XOR<BusinessInfoCreateWithoutUserInput, BusinessInfoUncheckedCreateWithoutUserInput>
  }

  export type kycRecordsCreateWithoutUserInput = {
    id?: string
    socialMedia: JsonNullValueInput | InputJsonValue
    aadhaarNumber: string
    aadhaarFront: string
    aadhaarBack: string
    panCard: string
    selfie: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
  }

  export type kycRecordsUncheckedCreateWithoutUserInput = {
    id?: string
    socialMedia: JsonNullValueInput | InputJsonValue
    aadhaarNumber: string
    aadhaarFront: string
    aadhaarBack: string
    panCard: string
    selfie: string
    createdAt?: Date | string
    updatedAt?: Date | string
    status?: string
  }

  export type kycRecordsCreateOrConnectWithoutUserInput = {
    where: kycRecordsWhereUniqueInput
    create: XOR<kycRecordsCreateWithoutUserInput, kycRecordsUncheckedCreateWithoutUserInput>
  }

  export type BankDetailsCreateWithoutUserInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    upiIds?: UPICreateNestedManyWithoutBankDetailsInput
    withdrawls?: WithdrawalCreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsUncheckedCreateWithoutUserInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    upiIds?: UPIUncheckedCreateNestedManyWithoutBankDetailsInput
    withdrawls?: WithdrawalUncheckedCreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsCreateOrConnectWithoutUserInput = {
    where: BankDetailsWhereUniqueInput
    create: XOR<BankDetailsCreateWithoutUserInput, BankDetailsUncheckedCreateWithoutUserInput>
  }

  export type BankDetailsCreateManyUserInputEnvelope = {
    data: BankDetailsCreateManyUserInput | BankDetailsCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UPICreateWithoutUserInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bankDetails: BankDetailsCreateNestedOneWithoutUpiIdsInput
    withdrawls?: WithdrawalCreateNestedManyWithoutUpiInput
  }

  export type UPIUncheckedCreateWithoutUserInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    bankDetailsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    withdrawls?: WithdrawalUncheckedCreateNestedManyWithoutUpiInput
  }

  export type UPICreateOrConnectWithoutUserInput = {
    where: UPIWhereUniqueInput
    create: XOR<UPICreateWithoutUserInput, UPIUncheckedCreateWithoutUserInput>
  }

  export type UPICreateManyUserInputEnvelope = {
    data: UPICreateManyUserInput | UPICreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PremiumContentCreateWithoutCreatedByInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    access?: PremiumContentAccessCreateNestedManyWithoutPremiumContentInput
  }

  export type PremiumContentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    access?: PremiumContentAccessUncheckedCreateNestedManyWithoutPremiumContentInput
  }

  export type PremiumContentCreateOrConnectWithoutCreatedByInput = {
    where: PremiumContentWhereUniqueInput
    create: XOR<PremiumContentCreateWithoutCreatedByInput, PremiumContentUncheckedCreateWithoutCreatedByInput>
  }

  export type PremiumContentCreateManyCreatedByInputEnvelope = {
    data: PremiumContentCreateManyCreatedByInput | PremiumContentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PremiumContentAccessCreateWithoutUserInput = {
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
    premiumContent: PremiumContentCreateNestedOneWithoutAccessInput
  }

  export type PremiumContentAccessUncheckedCreateWithoutUserInput = {
    contentId: string
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
  }

  export type PremiumContentAccessCreateOrConnectWithoutUserInput = {
    where: PremiumContentAccessWhereUniqueInput
    create: XOR<PremiumContentAccessCreateWithoutUserInput, PremiumContentAccessUncheckedCreateWithoutUserInput>
  }

  export type PremiumContentAccessCreateManyUserInputEnvelope = {
    data: PremiumContentAccessCreateManyUserInput | PremiumContentAccessCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type WebinarTicketUpsertWithWhereUniqueWithoutBoughtByInput = {
    where: WebinarTicketWhereUniqueInput
    update: XOR<WebinarTicketUpdateWithoutBoughtByInput, WebinarTicketUncheckedUpdateWithoutBoughtByInput>
    create: XOR<WebinarTicketCreateWithoutBoughtByInput, WebinarTicketUncheckedCreateWithoutBoughtByInput>
  }

  export type WebinarTicketUpdateWithWhereUniqueWithoutBoughtByInput = {
    where: WebinarTicketWhereUniqueInput
    data: XOR<WebinarTicketUpdateWithoutBoughtByInput, WebinarTicketUncheckedUpdateWithoutBoughtByInput>
  }

  export type WebinarTicketUpdateManyWithWhereWithoutBoughtByInput = {
    where: WebinarTicketScalarWhereInput
    data: XOR<WebinarTicketUpdateManyMutationInput, WebinarTicketUncheckedUpdateManyWithoutBoughtByInput>
  }

  export type WebinarTicketScalarWhereInput = {
    AND?: WebinarTicketScalarWhereInput | WebinarTicketScalarWhereInput[]
    OR?: WebinarTicketScalarWhereInput[]
    NOT?: WebinarTicketScalarWhereInput | WebinarTicketScalarWhereInput[]
    id?: StringFilter<"WebinarTicket"> | string
    webinarId?: StringFilter<"WebinarTicket"> | string
    boughtById?: StringFilter<"WebinarTicket"> | string
    paymentId?: StringNullableFilter<"WebinarTicket"> | string | null
    orderId?: StringNullableFilter<"WebinarTicket"> | string | null
  }

  export type PayingUpTicketUpsertWithWhereUniqueWithoutBoughtByInput = {
    where: PayingUpTicketWhereUniqueInput
    update: XOR<PayingUpTicketUpdateWithoutBoughtByInput, PayingUpTicketUncheckedUpdateWithoutBoughtByInput>
    create: XOR<PayingUpTicketCreateWithoutBoughtByInput, PayingUpTicketUncheckedCreateWithoutBoughtByInput>
  }

  export type PayingUpTicketUpdateWithWhereUniqueWithoutBoughtByInput = {
    where: PayingUpTicketWhereUniqueInput
    data: XOR<PayingUpTicketUpdateWithoutBoughtByInput, PayingUpTicketUncheckedUpdateWithoutBoughtByInput>
  }

  export type PayingUpTicketUpdateManyWithWhereWithoutBoughtByInput = {
    where: PayingUpTicketScalarWhereInput
    data: XOR<PayingUpTicketUpdateManyMutationInput, PayingUpTicketUncheckedUpdateManyWithoutBoughtByInput>
  }

  export type PayingUpTicketScalarWhereInput = {
    AND?: PayingUpTicketScalarWhereInput | PayingUpTicketScalarWhereInput[]
    OR?: PayingUpTicketScalarWhereInput[]
    NOT?: PayingUpTicketScalarWhereInput | PayingUpTicketScalarWhereInput[]
    id?: StringFilter<"PayingUpTicket"> | string
    payingUpId?: StringFilter<"PayingUpTicket"> | string
    boughtById?: StringFilter<"PayingUpTicket"> | string
    paymentId?: StringNullableFilter<"PayingUpTicket"> | string | null
    orderId?: StringNullableFilter<"PayingUpTicket"> | string | null
  }

  export type TelegramSubscriptionUpsertWithWhereUniqueWithoutBoughtByInput = {
    where: TelegramSubscriptionWhereUniqueInput
    update: XOR<TelegramSubscriptionUpdateWithoutBoughtByInput, TelegramSubscriptionUncheckedUpdateWithoutBoughtByInput>
    create: XOR<TelegramSubscriptionCreateWithoutBoughtByInput, TelegramSubscriptionUncheckedCreateWithoutBoughtByInput>
  }

  export type TelegramSubscriptionUpdateWithWhereUniqueWithoutBoughtByInput = {
    where: TelegramSubscriptionWhereUniqueInput
    data: XOR<TelegramSubscriptionUpdateWithoutBoughtByInput, TelegramSubscriptionUncheckedUpdateWithoutBoughtByInput>
  }

  export type TelegramSubscriptionUpdateManyWithWhereWithoutBoughtByInput = {
    where: TelegramSubscriptionScalarWhereInput
    data: XOR<TelegramSubscriptionUpdateManyMutationInput, TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByInput>
  }

  export type TelegramSubscriptionScalarWhereInput = {
    AND?: TelegramSubscriptionScalarWhereInput | TelegramSubscriptionScalarWhereInput[]
    OR?: TelegramSubscriptionScalarWhereInput[]
    NOT?: TelegramSubscriptionScalarWhereInput | TelegramSubscriptionScalarWhereInput[]
    id?: StringFilter<"TelegramSubscription"> | string
    validDays?: IntFilter<"TelegramSubscription"> | number
    telegramId?: StringFilter<"TelegramSubscription"> | string
    chatId?: StringNullableFilter<"TelegramSubscription"> | string | null
    boughtById?: StringFilter<"TelegramSubscription"> | string
    paymentId?: StringNullableFilter<"TelegramSubscription"> | string | null
    orderId?: StringNullableFilter<"TelegramSubscription"> | string | null
    createdAt?: DateTimeFilter<"TelegramSubscription"> | Date | string
  }

  export type WebinarUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: WebinarWhereUniqueInput
    update: XOR<WebinarUpdateWithoutCreatedByInput, WebinarUncheckedUpdateWithoutCreatedByInput>
    create: XOR<WebinarCreateWithoutCreatedByInput, WebinarUncheckedCreateWithoutCreatedByInput>
  }

  export type WebinarUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: WebinarWhereUniqueInput
    data: XOR<WebinarUpdateWithoutCreatedByInput, WebinarUncheckedUpdateWithoutCreatedByInput>
  }

  export type WebinarUpdateManyWithWhereWithoutCreatedByInput = {
    where: WebinarScalarWhereInput
    data: XOR<WebinarUpdateManyMutationInput, WebinarUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type WebinarScalarWhereInput = {
    AND?: WebinarScalarWhereInput | WebinarScalarWhereInput[]
    OR?: WebinarScalarWhereInput[]
    NOT?: WebinarScalarWhereInput | WebinarScalarWhereInput[]
    id?: StringFilter<"Webinar"> | string
    title?: StringFilter<"Webinar"> | string
    category?: StringFilter<"Webinar"> | string
    coverImage?: StringFilter<"Webinar"> | string
    occurrence?: StringFilter<"Webinar"> | string
    startDate?: DateTimeFilter<"Webinar"> | Date | string
    paymentEnabled?: BoolFilter<"Webinar"> | boolean
    endDate?: DateTimeFilter<"Webinar"> | Date | string
    isOnline?: BoolFilter<"Webinar"> | boolean
    venue?: StringNullableFilter<"Webinar"> | string | null
    link?: JsonFilter<"Webinar">
    discount?: JsonNullableFilter<"Webinar">
    isPaid?: BoolFilter<"Webinar"> | boolean
    quantity?: IntFilter<"Webinar"> | number
    amount?: FloatNullableFilter<"Webinar"> | number | null
    createdById?: StringFilter<"Webinar"> | string
    createdAt?: DateTimeFilter<"Webinar"> | Date | string
    updatedAt?: DateTimeFilter<"Webinar"> | Date | string
  }

  export type CourseUpsertWithWhereUniqueWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    update: XOR<CourseUpdateWithoutCreatorInput, CourseUncheckedUpdateWithoutCreatorInput>
    create: XOR<CourseCreateWithoutCreatorInput, CourseUncheckedCreateWithoutCreatorInput>
  }

  export type CourseUpdateWithWhereUniqueWithoutCreatorInput = {
    where: CourseWhereUniqueInput
    data: XOR<CourseUpdateWithoutCreatorInput, CourseUncheckedUpdateWithoutCreatorInput>
  }

  export type CourseUpdateManyWithWhereWithoutCreatorInput = {
    where: CourseScalarWhereInput
    data: XOR<CourseUpdateManyMutationInput, CourseUncheckedUpdateManyWithoutCreatorInput>
  }

  export type CourseScalarWhereInput = {
    AND?: CourseScalarWhereInput | CourseScalarWhereInput[]
    OR?: CourseScalarWhereInput[]
    NOT?: CourseScalarWhereInput | CourseScalarWhereInput[]
    id?: StringFilter<"Course"> | string
    title?: StringFilter<"Course"> | string
    price?: FloatFilter<"Course"> | number
    discount?: JsonNullableFilter<"Course">
    validity?: StringFilter<"Course"> | string
    aboutThisCourse?: JsonFilter<"Course">
    testimonials?: JsonFilter<"Course">
    courseBenefits?: JsonFilter<"Course">
    faqs?: JsonFilter<"Course">
    gallery?: JsonFilter<"Course">
    coverImage?: JsonFilter<"Course">
    language?: JsonFilter<"Course">
    startDate?: DateTimeFilter<"Course"> | Date | string
    endDate?: DateTimeNullableFilter<"Course"> | Date | string | null
    createdBy?: StringFilter<"Course"> | string
    createdAt?: DateTimeFilter<"Course"> | Date | string
    updatedAt?: DateTimeFilter<"Course"> | Date | string
  }

  export type PayingUpUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PayingUpWhereUniqueInput
    update: XOR<PayingUpUpdateWithoutCreatedByInput, PayingUpUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PayingUpCreateWithoutCreatedByInput, PayingUpUncheckedCreateWithoutCreatedByInput>
  }

  export type PayingUpUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PayingUpWhereUniqueInput
    data: XOR<PayingUpUpdateWithoutCreatedByInput, PayingUpUncheckedUpdateWithoutCreatedByInput>
  }

  export type PayingUpUpdateManyWithWhereWithoutCreatedByInput = {
    where: PayingUpScalarWhereInput
    data: XOR<PayingUpUpdateManyMutationInput, PayingUpUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PayingUpScalarWhereInput = {
    AND?: PayingUpScalarWhereInput | PayingUpScalarWhereInput[]
    OR?: PayingUpScalarWhereInput[]
    NOT?: PayingUpScalarWhereInput | PayingUpScalarWhereInput[]
    id?: StringFilter<"PayingUp"> | string
    title?: StringFilter<"PayingUp"> | string
    description?: StringFilter<"PayingUp"> | string
    discount?: JsonNullableFilter<"PayingUp">
    paymentDetails?: JsonFilter<"PayingUp">
    category?: JsonFilter<"PayingUp">
    testimonials?: JsonFilter<"PayingUp">
    faqs?: JsonFilter<"PayingUp">
    refundPolicies?: JsonFilter<"PayingUp">
    tacs?: JsonFilter<"PayingUp">
    coverImage?: JsonFilter<"PayingUp">
    files?: JsonFilter<"PayingUp">
    createdById?: StringFilter<"PayingUp"> | string
    createdAt?: DateTimeFilter<"PayingUp"> | Date | string
    updatedAt?: DateTimeFilter<"PayingUp"> | Date | string
  }

  export type TelegramUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: TelegramWhereUniqueInput
    update: XOR<TelegramUpdateWithoutCreatedByInput, TelegramUncheckedUpdateWithoutCreatedByInput>
    create: XOR<TelegramCreateWithoutCreatedByInput, TelegramUncheckedCreateWithoutCreatedByInput>
  }

  export type TelegramUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: TelegramWhereUniqueInput
    data: XOR<TelegramUpdateWithoutCreatedByInput, TelegramUncheckedUpdateWithoutCreatedByInput>
  }

  export type TelegramUpdateManyWithWhereWithoutCreatedByInput = {
    where: TelegramScalarWhereInput
    data: XOR<TelegramUpdateManyMutationInput, TelegramUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type TelegramScalarWhereInput = {
    AND?: TelegramScalarWhereInput | TelegramScalarWhereInput[]
    OR?: TelegramScalarWhereInput[]
    NOT?: TelegramScalarWhereInput | TelegramScalarWhereInput[]
    id?: StringFilter<"Telegram"> | string
    coverImage?: StringFilter<"Telegram"> | string
    channelLink?: StringFilter<"Telegram"> | string
    title?: StringFilter<"Telegram"> | string
    description?: StringFilter<"Telegram"> | string
    genre?: StringFilter<"Telegram"> | string
    discount?: JsonFilter<"Telegram">
    subscription?: JsonFilter<"Telegram">
    createdById?: StringFilter<"Telegram"> | string
    createdAt?: DateTimeFilter<"Telegram"> | Date | string
    updatedAt?: DateTimeFilter<"Telegram"> | Date | string
  }

  export type WalletUpsertWithoutUserInput = {
    update: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutUserInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
  }

  export type WalletUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutWalletNestedInput
    withdrawals?: WithdrawalUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutWalletNestedInput
    withdrawals?: WithdrawalUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type CoursePurchasersUpsertWithWhereUniqueWithoutPurchaserInput = {
    where: CoursePurchasersWhereUniqueInput
    update: XOR<CoursePurchasersUpdateWithoutPurchaserInput, CoursePurchasersUncheckedUpdateWithoutPurchaserInput>
    create: XOR<CoursePurchasersCreateWithoutPurchaserInput, CoursePurchasersUncheckedCreateWithoutPurchaserInput>
  }

  export type CoursePurchasersUpdateWithWhereUniqueWithoutPurchaserInput = {
    where: CoursePurchasersWhereUniqueInput
    data: XOR<CoursePurchasersUpdateWithoutPurchaserInput, CoursePurchasersUncheckedUpdateWithoutPurchaserInput>
  }

  export type CoursePurchasersUpdateManyWithWhereWithoutPurchaserInput = {
    where: CoursePurchasersScalarWhereInput
    data: XOR<CoursePurchasersUpdateManyMutationInput, CoursePurchasersUncheckedUpdateManyWithoutPurchaserInput>
  }

  export type CoursePurchasersScalarWhereInput = {
    AND?: CoursePurchasersScalarWhereInput | CoursePurchasersScalarWhereInput[]
    OR?: CoursePurchasersScalarWhereInput[]
    NOT?: CoursePurchasersScalarWhereInput | CoursePurchasersScalarWhereInput[]
    id?: StringFilter<"CoursePurchasers"> | string
    courseId?: StringFilter<"CoursePurchasers"> | string
    purchaserId?: StringFilter<"CoursePurchasers"> | string
    paymentId?: StringFilter<"CoursePurchasers"> | string
    orderId?: StringFilter<"CoursePurchasers"> | string
    createdAt?: DateTimeFilter<"CoursePurchasers"> | Date | string
  }

  export type BusinessInfoUpsertWithoutUserInput = {
    update: XOR<BusinessInfoUpdateWithoutUserInput, BusinessInfoUncheckedUpdateWithoutUserInput>
    create: XOR<BusinessInfoCreateWithoutUserInput, BusinessInfoUncheckedCreateWithoutUserInput>
    where?: BusinessInfoWhereInput
  }

  export type BusinessInfoUpdateToOneWithWhereWithoutUserInput = {
    where?: BusinessInfoWhereInput
    data: XOR<BusinessInfoUpdateWithoutUserInput, BusinessInfoUncheckedUpdateWithoutUserInput>
  }

  export type BusinessInfoUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    businessStructure?: StringFieldUpdateOperationsInput | string
    gstNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessInfoUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    businessStructure?: StringFieldUpdateOperationsInput | string
    gstNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiNumber?: NullableStringFieldUpdateOperationsInput | string | null
    sebiCertificate?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type kycRecordsUpsertWithoutUserInput = {
    update: XOR<kycRecordsUpdateWithoutUserInput, kycRecordsUncheckedUpdateWithoutUserInput>
    create: XOR<kycRecordsCreateWithoutUserInput, kycRecordsUncheckedCreateWithoutUserInput>
    where?: kycRecordsWhereInput
  }

  export type kycRecordsUpdateToOneWithWhereWithoutUserInput = {
    where?: kycRecordsWhereInput
    data: XOR<kycRecordsUpdateWithoutUserInput, kycRecordsUncheckedUpdateWithoutUserInput>
  }

  export type kycRecordsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    aadhaarFront?: StringFieldUpdateOperationsInput | string
    aadhaarBack?: StringFieldUpdateOperationsInput | string
    panCard?: StringFieldUpdateOperationsInput | string
    selfie?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type kycRecordsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    socialMedia?: JsonNullValueInput | InputJsonValue
    aadhaarNumber?: StringFieldUpdateOperationsInput | string
    aadhaarFront?: StringFieldUpdateOperationsInput | string
    aadhaarBack?: StringFieldUpdateOperationsInput | string
    panCard?: StringFieldUpdateOperationsInput | string
    selfie?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
  }

  export type BankDetailsUpsertWithWhereUniqueWithoutUserInput = {
    where: BankDetailsWhereUniqueInput
    update: XOR<BankDetailsUpdateWithoutUserInput, BankDetailsUncheckedUpdateWithoutUserInput>
    create: XOR<BankDetailsCreateWithoutUserInput, BankDetailsUncheckedCreateWithoutUserInput>
  }

  export type BankDetailsUpdateWithWhereUniqueWithoutUserInput = {
    where: BankDetailsWhereUniqueInput
    data: XOR<BankDetailsUpdateWithoutUserInput, BankDetailsUncheckedUpdateWithoutUserInput>
  }

  export type BankDetailsUpdateManyWithWhereWithoutUserInput = {
    where: BankDetailsScalarWhereInput
    data: XOR<BankDetailsUpdateManyMutationInput, BankDetailsUncheckedUpdateManyWithoutUserInput>
  }

  export type BankDetailsScalarWhereInput = {
    AND?: BankDetailsScalarWhereInput | BankDetailsScalarWhereInput[]
    OR?: BankDetailsScalarWhereInput[]
    NOT?: BankDetailsScalarWhereInput | BankDetailsScalarWhereInput[]
    id?: StringFilter<"BankDetails"> | string
    accountHolderName?: StringFilter<"BankDetails"> | string
    accountNumber?: StringFilter<"BankDetails"> | string
    ifscCode?: StringFilter<"BankDetails"> | string
    bankDocument?: StringNullableFilter<"BankDetails"> | string | null
    upiId?: StringNullableListFilter<"BankDetails">
    razorpayContactID?: StringNullableFilter<"BankDetails"> | string | null
    razorpayFundAccountID?: StringNullableFilter<"BankDetails"> | string | null
    userId?: StringFilter<"BankDetails"> | string
    primary?: BoolFilter<"BankDetails"> | boolean
    createdAt?: DateTimeFilter<"BankDetails"> | Date | string
    updatedAt?: DateTimeFilter<"BankDetails"> | Date | string
  }

  export type UPIUpsertWithWhereUniqueWithoutUserInput = {
    where: UPIWhereUniqueInput
    update: XOR<UPIUpdateWithoutUserInput, UPIUncheckedUpdateWithoutUserInput>
    create: XOR<UPICreateWithoutUserInput, UPIUncheckedCreateWithoutUserInput>
  }

  export type UPIUpdateWithWhereUniqueWithoutUserInput = {
    where: UPIWhereUniqueInput
    data: XOR<UPIUpdateWithoutUserInput, UPIUncheckedUpdateWithoutUserInput>
  }

  export type UPIUpdateManyWithWhereWithoutUserInput = {
    where: UPIScalarWhereInput
    data: XOR<UPIUpdateManyMutationInput, UPIUncheckedUpdateManyWithoutUserInput>
  }

  export type UPIScalarWhereInput = {
    AND?: UPIScalarWhereInput | UPIScalarWhereInput[]
    OR?: UPIScalarWhereInput[]
    NOT?: UPIScalarWhereInput | UPIScalarWhereInput[]
    id?: StringFilter<"UPI"> | string
    upiId?: StringFilter<"UPI"> | string
    razorpayFundAccountID?: StringNullableFilter<"UPI"> | string | null
    razorpayContactID?: StringNullableFilter<"UPI"> | string | null
    bankDetailsId?: StringFilter<"UPI"> | string
    userId?: StringFilter<"UPI"> | string
    createdAt?: DateTimeFilter<"UPI"> | Date | string
    updatedAt?: DateTimeFilter<"UPI"> | Date | string
  }

  export type PremiumContentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PremiumContentWhereUniqueInput
    update: XOR<PremiumContentUpdateWithoutCreatedByInput, PremiumContentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PremiumContentCreateWithoutCreatedByInput, PremiumContentUncheckedCreateWithoutCreatedByInput>
  }

  export type PremiumContentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PremiumContentWhereUniqueInput
    data: XOR<PremiumContentUpdateWithoutCreatedByInput, PremiumContentUncheckedUpdateWithoutCreatedByInput>
  }

  export type PremiumContentUpdateManyWithWhereWithoutCreatedByInput = {
    where: PremiumContentScalarWhereInput
    data: XOR<PremiumContentUpdateManyMutationInput, PremiumContentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PremiumContentScalarWhereInput = {
    AND?: PremiumContentScalarWhereInput | PremiumContentScalarWhereInput[]
    OR?: PremiumContentScalarWhereInput[]
    NOT?: PremiumContentScalarWhereInput | PremiumContentScalarWhereInput[]
    id?: StringFilter<"PremiumContent"> | string
    title?: StringFilter<"PremiumContent"> | string
    category?: StringFilter<"PremiumContent"> | string
    unlockPrice?: FloatFilter<"PremiumContent"> | number
    content?: JsonFilter<"PremiumContent">
    discount?: JsonNullableFilter<"PremiumContent">
    createdById?: StringFilter<"PremiumContent"> | string
    createdAt?: DateTimeFilter<"PremiumContent"> | Date | string
  }

  export type PremiumContentAccessUpsertWithWhereUniqueWithoutUserInput = {
    where: PremiumContentAccessWhereUniqueInput
    update: XOR<PremiumContentAccessUpdateWithoutUserInput, PremiumContentAccessUncheckedUpdateWithoutUserInput>
    create: XOR<PremiumContentAccessCreateWithoutUserInput, PremiumContentAccessUncheckedCreateWithoutUserInput>
  }

  export type PremiumContentAccessUpdateWithWhereUniqueWithoutUserInput = {
    where: PremiumContentAccessWhereUniqueInput
    data: XOR<PremiumContentAccessUpdateWithoutUserInput, PremiumContentAccessUncheckedUpdateWithoutUserInput>
  }

  export type PremiumContentAccessUpdateManyWithWhereWithoutUserInput = {
    where: PremiumContentAccessScalarWhereInput
    data: XOR<PremiumContentAccessUpdateManyMutationInput, PremiumContentAccessUncheckedUpdateManyWithoutUserInput>
  }

  export type PremiumContentAccessScalarWhereInput = {
    AND?: PremiumContentAccessScalarWhereInput | PremiumContentAccessScalarWhereInput[]
    OR?: PremiumContentAccessScalarWhereInput[]
    NOT?: PremiumContentAccessScalarWhereInput | PremiumContentAccessScalarWhereInput[]
    userId?: StringFilter<"PremiumContentAccess"> | string
    contentId?: StringFilter<"PremiumContentAccess"> | string
    purchasedAt?: DateTimeFilter<"PremiumContentAccess"> | Date | string
    expiryDate?: DateTimeNullableFilter<"PremiumContentAccess"> | Date | string | null
  }

  export type UserCreateWithoutWalletInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWalletInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWalletInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
  }

  export type TransactionCreateWithoutWalletInput = {
    id?: string
    amount: number
    email: string
    phoneNumber: string
    product: string
    modeOfPayment: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUncheckedCreateWithoutWalletInput = {
    id?: string
    amount: number
    email: string
    phoneNumber: string
    product: string
    modeOfPayment: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionCreateOrConnectWithoutWalletInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput>
  }

  export type TransactionCreateManyWalletInputEnvelope = {
    data: TransactionCreateManyWalletInput | TransactionCreateManyWalletInput[]
    skipDuplicates?: boolean
  }

  export type WithdrawalCreateWithoutWalletInput = {
    id?: string
    amount: number
    modeOfWithdrawal: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
    bankDetails: BankDetailsCreateNestedOneWithoutWithdrawlsInput
    upi: UPICreateNestedOneWithoutWithdrawlsInput
  }

  export type WithdrawalUncheckedCreateWithoutWalletInput = {
    id?: string
    amount: number
    modeOfWithdrawal: string
    bankDetailsId: string
    upiId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type WithdrawalCreateOrConnectWithoutWalletInput = {
    where: WithdrawalWhereUniqueInput
    create: XOR<WithdrawalCreateWithoutWalletInput, WithdrawalUncheckedCreateWithoutWalletInput>
  }

  export type WithdrawalCreateManyWalletInputEnvelope = {
    data: WithdrawalCreateManyWalletInput | WithdrawalCreateManyWalletInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWalletInput = {
    update: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
    create: XOR<UserCreateWithoutWalletInput, UserUncheckedCreateWithoutWalletInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutWalletInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutWalletInput, UserUncheckedUpdateWithoutWalletInput>
  }

  export type UserUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TransactionUpsertWithWhereUniqueWithoutWalletInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutWalletInput, TransactionUncheckedUpdateWithoutWalletInput>
    create: XOR<TransactionCreateWithoutWalletInput, TransactionUncheckedCreateWithoutWalletInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutWalletInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutWalletInput, TransactionUncheckedUpdateWithoutWalletInput>
  }

  export type TransactionUpdateManyWithWhereWithoutWalletInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutWalletInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: StringFilter<"Transaction"> | string
    walletId?: StringFilter<"Transaction"> | string
    amount?: FloatFilter<"Transaction"> | number
    email?: StringFilter<"Transaction"> | string
    phoneNumber?: StringFilter<"Transaction"> | string
    product?: StringFilter<"Transaction"> | string
    modeOfPayment?: StringFilter<"Transaction"> | string
    status?: StringFilter<"Transaction"> | string
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type WithdrawalUpsertWithWhereUniqueWithoutWalletInput = {
    where: WithdrawalWhereUniqueInput
    update: XOR<WithdrawalUpdateWithoutWalletInput, WithdrawalUncheckedUpdateWithoutWalletInput>
    create: XOR<WithdrawalCreateWithoutWalletInput, WithdrawalUncheckedCreateWithoutWalletInput>
  }

  export type WithdrawalUpdateWithWhereUniqueWithoutWalletInput = {
    where: WithdrawalWhereUniqueInput
    data: XOR<WithdrawalUpdateWithoutWalletInput, WithdrawalUncheckedUpdateWithoutWalletInput>
  }

  export type WithdrawalUpdateManyWithWhereWithoutWalletInput = {
    where: WithdrawalScalarWhereInput
    data: XOR<WithdrawalUpdateManyMutationInput, WithdrawalUncheckedUpdateManyWithoutWalletInput>
  }

  export type WithdrawalScalarWhereInput = {
    AND?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
    OR?: WithdrawalScalarWhereInput[]
    NOT?: WithdrawalScalarWhereInput | WithdrawalScalarWhereInput[]
    id?: StringFilter<"Withdrawal"> | string
    walletId?: StringFilter<"Withdrawal"> | string
    amount?: FloatFilter<"Withdrawal"> | number
    modeOfWithdrawal?: StringFilter<"Withdrawal"> | string
    bankDetailsId?: StringFilter<"Withdrawal"> | string
    upiId?: StringFilter<"Withdrawal"> | string
    status?: StringFilter<"Withdrawal"> | string
    razorpayPayoutID?: StringNullableFilter<"Withdrawal"> | string | null
    createdAt?: DateTimeFilter<"Withdrawal"> | Date | string
  }

  export type UserCreateWithoutBankAccountsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBankAccountsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBankAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
  }

  export type UPICreateWithoutBankDetailsInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutUpiIdsInput
    withdrawls?: WithdrawalCreateNestedManyWithoutUpiInput
  }

  export type UPIUncheckedCreateWithoutBankDetailsInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    withdrawls?: WithdrawalUncheckedCreateNestedManyWithoutUpiInput
  }

  export type UPICreateOrConnectWithoutBankDetailsInput = {
    where: UPIWhereUniqueInput
    create: XOR<UPICreateWithoutBankDetailsInput, UPIUncheckedCreateWithoutBankDetailsInput>
  }

  export type UPICreateManyBankDetailsInputEnvelope = {
    data: UPICreateManyBankDetailsInput | UPICreateManyBankDetailsInput[]
    skipDuplicates?: boolean
  }

  export type WithdrawalCreateWithoutBankDetailsInput = {
    id?: string
    amount: number
    modeOfWithdrawal: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
    wallet: WalletCreateNestedOneWithoutWithdrawalsInput
    upi: UPICreateNestedOneWithoutWithdrawlsInput
  }

  export type WithdrawalUncheckedCreateWithoutBankDetailsInput = {
    id?: string
    walletId: string
    amount: number
    modeOfWithdrawal: string
    upiId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type WithdrawalCreateOrConnectWithoutBankDetailsInput = {
    where: WithdrawalWhereUniqueInput
    create: XOR<WithdrawalCreateWithoutBankDetailsInput, WithdrawalUncheckedCreateWithoutBankDetailsInput>
  }

  export type WithdrawalCreateManyBankDetailsInputEnvelope = {
    data: WithdrawalCreateManyBankDetailsInput | WithdrawalCreateManyBankDetailsInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBankAccountsInput = {
    update: XOR<UserUpdateWithoutBankAccountsInput, UserUncheckedUpdateWithoutBankAccountsInput>
    create: XOR<UserCreateWithoutBankAccountsInput, UserUncheckedCreateWithoutBankAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBankAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBankAccountsInput, UserUncheckedUpdateWithoutBankAccountsInput>
  }

  export type UserUpdateWithoutBankAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBankAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UPIUpsertWithWhereUniqueWithoutBankDetailsInput = {
    where: UPIWhereUniqueInput
    update: XOR<UPIUpdateWithoutBankDetailsInput, UPIUncheckedUpdateWithoutBankDetailsInput>
    create: XOR<UPICreateWithoutBankDetailsInput, UPIUncheckedCreateWithoutBankDetailsInput>
  }

  export type UPIUpdateWithWhereUniqueWithoutBankDetailsInput = {
    where: UPIWhereUniqueInput
    data: XOR<UPIUpdateWithoutBankDetailsInput, UPIUncheckedUpdateWithoutBankDetailsInput>
  }

  export type UPIUpdateManyWithWhereWithoutBankDetailsInput = {
    where: UPIScalarWhereInput
    data: XOR<UPIUpdateManyMutationInput, UPIUncheckedUpdateManyWithoutBankDetailsInput>
  }

  export type WithdrawalUpsertWithWhereUniqueWithoutBankDetailsInput = {
    where: WithdrawalWhereUniqueInput
    update: XOR<WithdrawalUpdateWithoutBankDetailsInput, WithdrawalUncheckedUpdateWithoutBankDetailsInput>
    create: XOR<WithdrawalCreateWithoutBankDetailsInput, WithdrawalUncheckedCreateWithoutBankDetailsInput>
  }

  export type WithdrawalUpdateWithWhereUniqueWithoutBankDetailsInput = {
    where: WithdrawalWhereUniqueInput
    data: XOR<WithdrawalUpdateWithoutBankDetailsInput, WithdrawalUncheckedUpdateWithoutBankDetailsInput>
  }

  export type WithdrawalUpdateManyWithWhereWithoutBankDetailsInput = {
    where: WithdrawalScalarWhereInput
    data: XOR<WithdrawalUpdateManyMutationInput, WithdrawalUncheckedUpdateManyWithoutBankDetailsInput>
  }

  export type BankDetailsCreateWithoutUpiIdsInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBankAccountsInput
    withdrawls?: WithdrawalCreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsUncheckedCreateWithoutUpiIdsInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    userId: string
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    withdrawls?: WithdrawalUncheckedCreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsCreateOrConnectWithoutUpiIdsInput = {
    where: BankDetailsWhereUniqueInput
    create: XOR<BankDetailsCreateWithoutUpiIdsInput, BankDetailsUncheckedCreateWithoutUpiIdsInput>
  }

  export type UserCreateWithoutUpiIdsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutUpiIdsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutUpiIdsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpiIdsInput, UserUncheckedCreateWithoutUpiIdsInput>
  }

  export type WithdrawalCreateWithoutUpiInput = {
    id?: string
    amount: number
    modeOfWithdrawal: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
    wallet: WalletCreateNestedOneWithoutWithdrawalsInput
    bankDetails: BankDetailsCreateNestedOneWithoutWithdrawlsInput
  }

  export type WithdrawalUncheckedCreateWithoutUpiInput = {
    id?: string
    walletId: string
    amount: number
    modeOfWithdrawal: string
    bankDetailsId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type WithdrawalCreateOrConnectWithoutUpiInput = {
    where: WithdrawalWhereUniqueInput
    create: XOR<WithdrawalCreateWithoutUpiInput, WithdrawalUncheckedCreateWithoutUpiInput>
  }

  export type WithdrawalCreateManyUpiInputEnvelope = {
    data: WithdrawalCreateManyUpiInput | WithdrawalCreateManyUpiInput[]
    skipDuplicates?: boolean
  }

  export type BankDetailsUpsertWithoutUpiIdsInput = {
    update: XOR<BankDetailsUpdateWithoutUpiIdsInput, BankDetailsUncheckedUpdateWithoutUpiIdsInput>
    create: XOR<BankDetailsCreateWithoutUpiIdsInput, BankDetailsUncheckedCreateWithoutUpiIdsInput>
    where?: BankDetailsWhereInput
  }

  export type BankDetailsUpdateToOneWithWhereWithoutUpiIdsInput = {
    where?: BankDetailsWhereInput
    data: XOR<BankDetailsUpdateWithoutUpiIdsInput, BankDetailsUncheckedUpdateWithoutUpiIdsInput>
  }

  export type BankDetailsUpdateWithoutUpiIdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBankAccountsNestedInput
    withdrawls?: WithdrawalUpdateManyWithoutBankDetailsNestedInput
  }

  export type BankDetailsUncheckedUpdateWithoutUpiIdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    withdrawls?: WithdrawalUncheckedUpdateManyWithoutBankDetailsNestedInput
  }

  export type UserUpsertWithoutUpiIdsInput = {
    update: XOR<UserUpdateWithoutUpiIdsInput, UserUncheckedUpdateWithoutUpiIdsInput>
    create: XOR<UserCreateWithoutUpiIdsInput, UserUncheckedCreateWithoutUpiIdsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpiIdsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpiIdsInput, UserUncheckedUpdateWithoutUpiIdsInput>
  }

  export type UserUpdateWithoutUpiIdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutUpiIdsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WithdrawalUpsertWithWhereUniqueWithoutUpiInput = {
    where: WithdrawalWhereUniqueInput
    update: XOR<WithdrawalUpdateWithoutUpiInput, WithdrawalUncheckedUpdateWithoutUpiInput>
    create: XOR<WithdrawalCreateWithoutUpiInput, WithdrawalUncheckedCreateWithoutUpiInput>
  }

  export type WithdrawalUpdateWithWhereUniqueWithoutUpiInput = {
    where: WithdrawalWhereUniqueInput
    data: XOR<WithdrawalUpdateWithoutUpiInput, WithdrawalUncheckedUpdateWithoutUpiInput>
  }

  export type WithdrawalUpdateManyWithWhereWithoutUpiInput = {
    where: WithdrawalScalarWhereInput
    data: XOR<WithdrawalUpdateManyMutationInput, WithdrawalUncheckedUpdateManyWithoutUpiInput>
  }

  export type UserCreateWithoutKycRecordsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutKycRecordsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutKycRecordsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutKycRecordsInput, UserUncheckedCreateWithoutKycRecordsInput>
  }

  export type UserUpsertWithoutKycRecordsInput = {
    update: XOR<UserUpdateWithoutKycRecordsInput, UserUncheckedUpdateWithoutKycRecordsInput>
    create: XOR<UserCreateWithoutKycRecordsInput, UserUncheckedCreateWithoutKycRecordsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutKycRecordsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutKycRecordsInput, UserUncheckedUpdateWithoutKycRecordsInput>
  }

  export type UserUpdateWithoutKycRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutKycRecordsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutBusinessInfoInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBusinessInfoInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBusinessInfoInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBusinessInfoInput, UserUncheckedCreateWithoutBusinessInfoInput>
  }

  export type UserUpsertWithoutBusinessInfoInput = {
    update: XOR<UserUpdateWithoutBusinessInfoInput, UserUncheckedUpdateWithoutBusinessInfoInput>
    create: XOR<UserCreateWithoutBusinessInfoInput, UserUncheckedCreateWithoutBusinessInfoInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBusinessInfoInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBusinessInfoInput, UserUncheckedUpdateWithoutBusinessInfoInput>
  }

  export type UserUpdateWithoutBusinessInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBusinessInfoInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WalletCreateWithoutTransactionsInput = {
    id?: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWalletInput
    withdrawals?: WithdrawalCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutTransactionsInput = {
    id?: string
    userId: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    withdrawals?: WithdrawalUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutTransactionsInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
  }

  export type WalletUpsertWithoutTransactionsInput = {
    update: XOR<WalletUpdateWithoutTransactionsInput, WalletUncheckedUpdateWithoutTransactionsInput>
    create: XOR<WalletCreateWithoutTransactionsInput, WalletUncheckedCreateWithoutTransactionsInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutTransactionsInput, WalletUncheckedUpdateWithoutTransactionsInput>
  }

  export type WalletUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWalletNestedInput
    withdrawals?: WithdrawalUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutTransactionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    withdrawals?: WithdrawalUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type WalletCreateWithoutWithdrawalsInput = {
    id?: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutWalletInput
    transactions?: TransactionCreateNestedManyWithoutWalletInput
  }

  export type WalletUncheckedCreateWithoutWithdrawalsInput = {
    id?: string
    userId: string
    balance?: number
    totalEarnings?: number
    totalWithdrawals?: number
    isKycVerified?: boolean
    mpin?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutWalletInput
  }

  export type WalletCreateOrConnectWithoutWithdrawalsInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutWithdrawalsInput, WalletUncheckedCreateWithoutWithdrawalsInput>
  }

  export type BankDetailsCreateWithoutWithdrawlsInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutBankAccountsInput
    upiIds?: UPICreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsUncheckedCreateWithoutWithdrawlsInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    userId: string
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    upiIds?: UPIUncheckedCreateNestedManyWithoutBankDetailsInput
  }

  export type BankDetailsCreateOrConnectWithoutWithdrawlsInput = {
    where: BankDetailsWhereUniqueInput
    create: XOR<BankDetailsCreateWithoutWithdrawlsInput, BankDetailsUncheckedCreateWithoutWithdrawlsInput>
  }

  export type UPICreateWithoutWithdrawlsInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    bankDetails: BankDetailsCreateNestedOneWithoutUpiIdsInput
    user: UserCreateNestedOneWithoutUpiIdsInput
  }

  export type UPIUncheckedCreateWithoutWithdrawlsInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    bankDetailsId: string
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UPICreateOrConnectWithoutWithdrawlsInput = {
    where: UPIWhereUniqueInput
    create: XOR<UPICreateWithoutWithdrawlsInput, UPIUncheckedCreateWithoutWithdrawlsInput>
  }

  export type WalletUpsertWithoutWithdrawalsInput = {
    update: XOR<WalletUpdateWithoutWithdrawalsInput, WalletUncheckedUpdateWithoutWithdrawalsInput>
    create: XOR<WalletCreateWithoutWithdrawalsInput, WalletUncheckedCreateWithoutWithdrawalsInput>
    where?: WalletWhereInput
  }

  export type WalletUpdateToOneWithWhereWithoutWithdrawalsInput = {
    where?: WalletWhereInput
    data: XOR<WalletUpdateWithoutWithdrawalsInput, WalletUncheckedUpdateWithoutWithdrawalsInput>
  }

  export type WalletUpdateWithoutWithdrawalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutWalletNestedInput
    transactions?: TransactionUpdateManyWithoutWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutWithdrawalsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    balance?: FloatFieldUpdateOperationsInput | number
    totalEarnings?: FloatFieldUpdateOperationsInput | number
    totalWithdrawals?: FloatFieldUpdateOperationsInput | number
    isKycVerified?: BoolFieldUpdateOperationsInput | boolean
    mpin?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutWalletNestedInput
  }

  export type BankDetailsUpsertWithoutWithdrawlsInput = {
    update: XOR<BankDetailsUpdateWithoutWithdrawlsInput, BankDetailsUncheckedUpdateWithoutWithdrawlsInput>
    create: XOR<BankDetailsCreateWithoutWithdrawlsInput, BankDetailsUncheckedCreateWithoutWithdrawlsInput>
    where?: BankDetailsWhereInput
  }

  export type BankDetailsUpdateToOneWithWhereWithoutWithdrawlsInput = {
    where?: BankDetailsWhereInput
    data: XOR<BankDetailsUpdateWithoutWithdrawlsInput, BankDetailsUncheckedUpdateWithoutWithdrawlsInput>
  }

  export type BankDetailsUpdateWithoutWithdrawlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutBankAccountsNestedInput
    upiIds?: UPIUpdateManyWithoutBankDetailsNestedInput
  }

  export type BankDetailsUncheckedUpdateWithoutWithdrawlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    upiIds?: UPIUncheckedUpdateManyWithoutBankDetailsNestedInput
  }

  export type UPIUpsertWithoutWithdrawlsInput = {
    update: XOR<UPIUpdateWithoutWithdrawlsInput, UPIUncheckedUpdateWithoutWithdrawlsInput>
    create: XOR<UPICreateWithoutWithdrawlsInput, UPIUncheckedCreateWithoutWithdrawlsInput>
    where?: UPIWhereInput
  }

  export type UPIUpdateToOneWithWhereWithoutWithdrawlsInput = {
    where?: UPIWhereInput
    data: XOR<UPIUpdateWithoutWithdrawlsInput, UPIUncheckedUpdateWithoutWithdrawlsInput>
  }

  export type UPIUpdateWithoutWithdrawlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankDetails?: BankDetailsUpdateOneRequiredWithoutUpiIdsNestedInput
    user?: UserUpdateOneRequiredWithoutUpiIdsNestedInput
  }

  export type UPIUncheckedUpdateWithoutWithdrawlsInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebinarTicketCreateWithoutWebinarInput = {
    id?: string
    paymentId?: string | null
    orderId?: string | null
    boughtBy: UserCreateNestedOneWithoutBoughtWebinarTicketsInput
  }

  export type WebinarTicketUncheckedCreateWithoutWebinarInput = {
    id?: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type WebinarTicketCreateOrConnectWithoutWebinarInput = {
    where: WebinarTicketWhereUniqueInput
    create: XOR<WebinarTicketCreateWithoutWebinarInput, WebinarTicketUncheckedCreateWithoutWebinarInput>
  }

  export type WebinarTicketCreateManyWebinarInputEnvelope = {
    data: WebinarTicketCreateManyWebinarInput | WebinarTicketCreateManyWebinarInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedWebinarsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedWebinarsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedWebinarsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedWebinarsInput, UserUncheckedCreateWithoutCreatedWebinarsInput>
  }

  export type WebinarTicketUpsertWithWhereUniqueWithoutWebinarInput = {
    where: WebinarTicketWhereUniqueInput
    update: XOR<WebinarTicketUpdateWithoutWebinarInput, WebinarTicketUncheckedUpdateWithoutWebinarInput>
    create: XOR<WebinarTicketCreateWithoutWebinarInput, WebinarTicketUncheckedCreateWithoutWebinarInput>
  }

  export type WebinarTicketUpdateWithWhereUniqueWithoutWebinarInput = {
    where: WebinarTicketWhereUniqueInput
    data: XOR<WebinarTicketUpdateWithoutWebinarInput, WebinarTicketUncheckedUpdateWithoutWebinarInput>
  }

  export type WebinarTicketUpdateManyWithWhereWithoutWebinarInput = {
    where: WebinarTicketScalarWhereInput
    data: XOR<WebinarTicketUpdateManyMutationInput, WebinarTicketUncheckedUpdateManyWithoutWebinarInput>
  }

  export type UserUpsertWithoutCreatedWebinarsInput = {
    update: XOR<UserUpdateWithoutCreatedWebinarsInput, UserUncheckedUpdateWithoutCreatedWebinarsInput>
    create: XOR<UserCreateWithoutCreatedWebinarsInput, UserUncheckedCreateWithoutCreatedWebinarsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedWebinarsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedWebinarsInput, UserUncheckedUpdateWithoutCreatedWebinarsInput>
  }

  export type UserUpdateWithoutCreatedWebinarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedWebinarsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WebinarCreateWithoutTicketsInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedWebinarsInput
  }

  export type WebinarUncheckedCreateWithoutTicketsInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WebinarCreateOrConnectWithoutTicketsInput = {
    where: WebinarWhereUniqueInput
    create: XOR<WebinarCreateWithoutTicketsInput, WebinarUncheckedCreateWithoutTicketsInput>
  }

  export type UserCreateWithoutBoughtWebinarTicketsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBoughtWebinarTicketsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBoughtWebinarTicketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoughtWebinarTicketsInput, UserUncheckedCreateWithoutBoughtWebinarTicketsInput>
  }

  export type WebinarUpsertWithoutTicketsInput = {
    update: XOR<WebinarUpdateWithoutTicketsInput, WebinarUncheckedUpdateWithoutTicketsInput>
    create: XOR<WebinarCreateWithoutTicketsInput, WebinarUncheckedCreateWithoutTicketsInput>
    where?: WebinarWhereInput
  }

  export type WebinarUpdateToOneWithWhereWithoutTicketsInput = {
    where?: WebinarWhereInput
    data: XOR<WebinarUpdateWithoutTicketsInput, WebinarUncheckedUpdateWithoutTicketsInput>
  }

  export type WebinarUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedWebinarsNestedInput
  }

  export type WebinarUncheckedUpdateWithoutTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutBoughtWebinarTicketsInput = {
    update: XOR<UserUpdateWithoutBoughtWebinarTicketsInput, UserUncheckedUpdateWithoutBoughtWebinarTicketsInput>
    create: XOR<UserCreateWithoutBoughtWebinarTicketsInput, UserUncheckedCreateWithoutBoughtWebinarTicketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoughtWebinarTicketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoughtWebinarTicketsInput, UserUncheckedUpdateWithoutBoughtWebinarTicketsInput>
  }

  export type UserUpdateWithoutBoughtWebinarTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBoughtWebinarTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseProductCreateWithoutCourseInput = {
    id?: string
    title: string
    isActive?: boolean
    productMetaData: JsonNullValueInput | InputJsonValue
  }

  export type CourseProductUncheckedCreateWithoutCourseInput = {
    id?: string
    title: string
    isActive?: boolean
    productMetaData: JsonNullValueInput | InputJsonValue
  }

  export type CourseProductCreateOrConnectWithoutCourseInput = {
    where: CourseProductWhereUniqueInput
    create: XOR<CourseProductCreateWithoutCourseInput, CourseProductUncheckedCreateWithoutCourseInput>
  }

  export type CourseProductCreateManyCourseInputEnvelope = {
    data: CourseProductCreateManyCourseInput | CourseProductCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type LessonsCreateWithoutCourseInput = {
    id?: string
    isActive: boolean
    lessonData: JsonNullValueInput | InputJsonValue
  }

  export type LessonsUncheckedCreateWithoutCourseInput = {
    id?: string
    isActive: boolean
    lessonData: JsonNullValueInput | InputJsonValue
  }

  export type LessonsCreateOrConnectWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    create: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput>
  }

  export type LessonsCreateManyCourseInputEnvelope = {
    data: LessonsCreateManyCourseInput | LessonsCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatedCoursesInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedCoursesInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedCoursesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
  }

  export type CoursePurchasersCreateWithoutCourseInput = {
    id?: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
    purchaser: UserCreateNestedOneWithoutCoursePurchasersInput
  }

  export type CoursePurchasersUncheckedCreateWithoutCourseInput = {
    id?: string
    purchaserId: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
  }

  export type CoursePurchasersCreateOrConnectWithoutCourseInput = {
    where: CoursePurchasersWhereUniqueInput
    create: XOR<CoursePurchasersCreateWithoutCourseInput, CoursePurchasersUncheckedCreateWithoutCourseInput>
  }

  export type CoursePurchasersCreateManyCourseInputEnvelope = {
    data: CoursePurchasersCreateManyCourseInput | CoursePurchasersCreateManyCourseInput[]
    skipDuplicates?: boolean
  }

  export type CourseProductUpsertWithWhereUniqueWithoutCourseInput = {
    where: CourseProductWhereUniqueInput
    update: XOR<CourseProductUpdateWithoutCourseInput, CourseProductUncheckedUpdateWithoutCourseInput>
    create: XOR<CourseProductCreateWithoutCourseInput, CourseProductUncheckedCreateWithoutCourseInput>
  }

  export type CourseProductUpdateWithWhereUniqueWithoutCourseInput = {
    where: CourseProductWhereUniqueInput
    data: XOR<CourseProductUpdateWithoutCourseInput, CourseProductUncheckedUpdateWithoutCourseInput>
  }

  export type CourseProductUpdateManyWithWhereWithoutCourseInput = {
    where: CourseProductScalarWhereInput
    data: XOR<CourseProductUpdateManyMutationInput, CourseProductUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseProductScalarWhereInput = {
    AND?: CourseProductScalarWhereInput | CourseProductScalarWhereInput[]
    OR?: CourseProductScalarWhereInput[]
    NOT?: CourseProductScalarWhereInput | CourseProductScalarWhereInput[]
    id?: StringFilter<"CourseProduct"> | string
    title?: StringFilter<"CourseProduct"> | string
    isActive?: BoolFilter<"CourseProduct"> | boolean
    productMetaData?: JsonFilter<"CourseProduct">
    courseId?: StringFilter<"CourseProduct"> | string
  }

  export type LessonsUpsertWithWhereUniqueWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    update: XOR<LessonsUpdateWithoutCourseInput, LessonsUncheckedUpdateWithoutCourseInput>
    create: XOR<LessonsCreateWithoutCourseInput, LessonsUncheckedCreateWithoutCourseInput>
  }

  export type LessonsUpdateWithWhereUniqueWithoutCourseInput = {
    where: LessonsWhereUniqueInput
    data: XOR<LessonsUpdateWithoutCourseInput, LessonsUncheckedUpdateWithoutCourseInput>
  }

  export type LessonsUpdateManyWithWhereWithoutCourseInput = {
    where: LessonsScalarWhereInput
    data: XOR<LessonsUpdateManyMutationInput, LessonsUncheckedUpdateManyWithoutCourseInput>
  }

  export type LessonsScalarWhereInput = {
    AND?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
    OR?: LessonsScalarWhereInput[]
    NOT?: LessonsScalarWhereInput | LessonsScalarWhereInput[]
    id?: StringFilter<"Lessons"> | string
    isActive?: BoolFilter<"Lessons"> | boolean
    lessonData?: JsonFilter<"Lessons">
    courseId?: StringFilter<"Lessons"> | string
  }

  export type UserUpsertWithoutCreatedCoursesInput = {
    update: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
    create: XOR<UserCreateWithoutCreatedCoursesInput, UserUncheckedCreateWithoutCreatedCoursesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedCoursesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedCoursesInput, UserUncheckedUpdateWithoutCreatedCoursesInput>
  }

  export type UserUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedCoursesInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CoursePurchasersUpsertWithWhereUniqueWithoutCourseInput = {
    where: CoursePurchasersWhereUniqueInput
    update: XOR<CoursePurchasersUpdateWithoutCourseInput, CoursePurchasersUncheckedUpdateWithoutCourseInput>
    create: XOR<CoursePurchasersCreateWithoutCourseInput, CoursePurchasersUncheckedCreateWithoutCourseInput>
  }

  export type CoursePurchasersUpdateWithWhereUniqueWithoutCourseInput = {
    where: CoursePurchasersWhereUniqueInput
    data: XOR<CoursePurchasersUpdateWithoutCourseInput, CoursePurchasersUncheckedUpdateWithoutCourseInput>
  }

  export type CoursePurchasersUpdateManyWithWhereWithoutCourseInput = {
    where: CoursePurchasersScalarWhereInput
    data: XOR<CoursePurchasersUpdateManyMutationInput, CoursePurchasersUncheckedUpdateManyWithoutCourseInput>
  }

  export type CourseCreateWithoutProductsInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    purchasedBy?: CoursePurchasersCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutProductsInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
    purchasedBy?: CoursePurchasersUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutProductsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutProductsInput, CourseUncheckedCreateWithoutProductsInput>
  }

  export type CourseUpsertWithoutProductsInput = {
    update: XOR<CourseUpdateWithoutProductsInput, CourseUncheckedUpdateWithoutProductsInput>
    create: XOR<CourseCreateWithoutProductsInput, CourseUncheckedCreateWithoutProductsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutProductsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutProductsInput, CourseUncheckedUpdateWithoutProductsInput>
  }

  export type CourseUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    purchasedBy?: CoursePurchasersUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    purchasedBy?: CoursePurchasersUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseCreateWithoutLessonsInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductCreateNestedManyWithoutCourseInput
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
    purchasedBy?: CoursePurchasersCreateNestedManyWithoutCourseInput
  }

  export type CourseUncheckedCreateWithoutLessonsInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductUncheckedCreateNestedManyWithoutCourseInput
    purchasedBy?: CoursePurchasersUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutLessonsInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutLessonsInput, CourseUncheckedCreateWithoutLessonsInput>
  }

  export type CourseUpsertWithoutLessonsInput = {
    update: XOR<CourseUpdateWithoutLessonsInput, CourseUncheckedUpdateWithoutLessonsInput>
    create: XOR<CourseCreateWithoutLessonsInput, CourseUncheckedCreateWithoutLessonsInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutLessonsInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutLessonsInput, CourseUncheckedUpdateWithoutLessonsInput>
  }

  export type CourseUpdateWithoutLessonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUpdateManyWithoutCourseNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
    purchasedBy?: CoursePurchasersUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutLessonsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUncheckedUpdateManyWithoutCourseNestedInput
    purchasedBy?: CoursePurchasersUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserCreateWithoutCoursePurchasersInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCoursePurchasersInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCoursePurchasersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCoursePurchasersInput, UserUncheckedCreateWithoutCoursePurchasersInput>
  }

  export type CourseCreateWithoutPurchasedByInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductCreateNestedManyWithoutCourseInput
    lessons?: LessonsCreateNestedManyWithoutCourseInput
    creator: UserCreateNestedOneWithoutCreatedCoursesInput
  }

  export type CourseUncheckedCreateWithoutPurchasedByInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdBy: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: CourseProductUncheckedCreateNestedManyWithoutCourseInput
    lessons?: LessonsUncheckedCreateNestedManyWithoutCourseInput
  }

  export type CourseCreateOrConnectWithoutPurchasedByInput = {
    where: CourseWhereUniqueInput
    create: XOR<CourseCreateWithoutPurchasedByInput, CourseUncheckedCreateWithoutPurchasedByInput>
  }

  export type UserUpsertWithoutCoursePurchasersInput = {
    update: XOR<UserUpdateWithoutCoursePurchasersInput, UserUncheckedUpdateWithoutCoursePurchasersInput>
    create: XOR<UserCreateWithoutCoursePurchasersInput, UserUncheckedCreateWithoutCoursePurchasersInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCoursePurchasersInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCoursePurchasersInput, UserUncheckedUpdateWithoutCoursePurchasersInput>
  }

  export type UserUpdateWithoutCoursePurchasersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCoursePurchasersInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CourseUpsertWithoutPurchasedByInput = {
    update: XOR<CourseUpdateWithoutPurchasedByInput, CourseUncheckedUpdateWithoutPurchasedByInput>
    create: XOR<CourseCreateWithoutPurchasedByInput, CourseUncheckedCreateWithoutPurchasedByInput>
    where?: CourseWhereInput
  }

  export type CourseUpdateToOneWithWhereWithoutPurchasedByInput = {
    where?: CourseWhereInput
    data: XOR<CourseUpdateWithoutPurchasedByInput, CourseUncheckedUpdateWithoutPurchasedByInput>
  }

  export type CourseUpdateWithoutPurchasedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUpdateManyWithoutCourseNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    creator?: UserUpdateOneRequiredWithoutCreatedCoursesNestedInput
  }

  export type CourseUncheckedUpdateWithoutPurchasedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUncheckedUpdateManyWithoutCourseNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type UserCreateWithoutCreatedPayingUpsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedPayingUpsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedPayingUpsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedPayingUpsInput, UserUncheckedCreateWithoutCreatedPayingUpsInput>
  }

  export type PayingUpTicketCreateWithoutPayingUpInput = {
    id?: string
    paymentId?: string | null
    orderId?: string | null
    boughtBy: UserCreateNestedOneWithoutBoughtPayingUpTicketsInput
  }

  export type PayingUpTicketUncheckedCreateWithoutPayingUpInput = {
    id?: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type PayingUpTicketCreateOrConnectWithoutPayingUpInput = {
    where: PayingUpTicketWhereUniqueInput
    create: XOR<PayingUpTicketCreateWithoutPayingUpInput, PayingUpTicketUncheckedCreateWithoutPayingUpInput>
  }

  export type PayingUpTicketCreateManyPayingUpInputEnvelope = {
    data: PayingUpTicketCreateManyPayingUpInput | PayingUpTicketCreateManyPayingUpInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedPayingUpsInput = {
    update: XOR<UserUpdateWithoutCreatedPayingUpsInput, UserUncheckedUpdateWithoutCreatedPayingUpsInput>
    create: XOR<UserCreateWithoutCreatedPayingUpsInput, UserUncheckedCreateWithoutCreatedPayingUpsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedPayingUpsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedPayingUpsInput, UserUncheckedUpdateWithoutCreatedPayingUpsInput>
  }

  export type UserUpdateWithoutCreatedPayingUpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedPayingUpsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PayingUpTicketUpsertWithWhereUniqueWithoutPayingUpInput = {
    where: PayingUpTicketWhereUniqueInput
    update: XOR<PayingUpTicketUpdateWithoutPayingUpInput, PayingUpTicketUncheckedUpdateWithoutPayingUpInput>
    create: XOR<PayingUpTicketCreateWithoutPayingUpInput, PayingUpTicketUncheckedCreateWithoutPayingUpInput>
  }

  export type PayingUpTicketUpdateWithWhereUniqueWithoutPayingUpInput = {
    where: PayingUpTicketWhereUniqueInput
    data: XOR<PayingUpTicketUpdateWithoutPayingUpInput, PayingUpTicketUncheckedUpdateWithoutPayingUpInput>
  }

  export type PayingUpTicketUpdateManyWithWhereWithoutPayingUpInput = {
    where: PayingUpTicketScalarWhereInput
    data: XOR<PayingUpTicketUpdateManyMutationInput, PayingUpTicketUncheckedUpdateManyWithoutPayingUpInput>
  }

  export type PayingUpCreateWithoutPayingUpTicketsInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedPayingUpsInput
  }

  export type PayingUpUncheckedCreateWithoutPayingUpTicketsInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayingUpCreateOrConnectWithoutPayingUpTicketsInput = {
    where: PayingUpWhereUniqueInput
    create: XOR<PayingUpCreateWithoutPayingUpTicketsInput, PayingUpUncheckedCreateWithoutPayingUpTicketsInput>
  }

  export type UserCreateWithoutBoughtPayingUpTicketsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBoughtPayingUpTicketsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBoughtPayingUpTicketsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoughtPayingUpTicketsInput, UserUncheckedCreateWithoutBoughtPayingUpTicketsInput>
  }

  export type PayingUpUpsertWithoutPayingUpTicketsInput = {
    update: XOR<PayingUpUpdateWithoutPayingUpTicketsInput, PayingUpUncheckedUpdateWithoutPayingUpTicketsInput>
    create: XOR<PayingUpCreateWithoutPayingUpTicketsInput, PayingUpUncheckedCreateWithoutPayingUpTicketsInput>
    where?: PayingUpWhereInput
  }

  export type PayingUpUpdateToOneWithWhereWithoutPayingUpTicketsInput = {
    where?: PayingUpWhereInput
    data: XOR<PayingUpUpdateWithoutPayingUpTicketsInput, PayingUpUncheckedUpdateWithoutPayingUpTicketsInput>
  }

  export type PayingUpUpdateWithoutPayingUpTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedPayingUpsNestedInput
  }

  export type PayingUpUncheckedUpdateWithoutPayingUpTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutBoughtPayingUpTicketsInput = {
    update: XOR<UserUpdateWithoutBoughtPayingUpTicketsInput, UserUncheckedUpdateWithoutBoughtPayingUpTicketsInput>
    create: XOR<UserCreateWithoutBoughtPayingUpTicketsInput, UserUncheckedCreateWithoutBoughtPayingUpTicketsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoughtPayingUpTicketsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoughtPayingUpTicketsInput, UserUncheckedUpdateWithoutBoughtPayingUpTicketsInput>
  }

  export type UserUpdateWithoutBoughtPayingUpTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBoughtPayingUpTicketsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutCreatedTelegramsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCreatedTelegramsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCreatedTelegramsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatedTelegramsInput, UserUncheckedCreateWithoutCreatedTelegramsInput>
  }

  export type TelegramSubscriptionCreateWithoutTelegramInput = {
    id?: string
    validDays: number
    chatId?: string | null
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
    boughtBy: UserCreateNestedOneWithoutBoughtTelegramSubscriptionsInput
  }

  export type TelegramSubscriptionUncheckedCreateWithoutTelegramInput = {
    id?: string
    validDays: number
    chatId?: string | null
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
  }

  export type TelegramSubscriptionCreateOrConnectWithoutTelegramInput = {
    where: TelegramSubscriptionWhereUniqueInput
    create: XOR<TelegramSubscriptionCreateWithoutTelegramInput, TelegramSubscriptionUncheckedCreateWithoutTelegramInput>
  }

  export type TelegramSubscriptionCreateManyTelegramInputEnvelope = {
    data: TelegramSubscriptionCreateManyTelegramInput | TelegramSubscriptionCreateManyTelegramInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatedTelegramsInput = {
    update: XOR<UserUpdateWithoutCreatedTelegramsInput, UserUncheckedUpdateWithoutCreatedTelegramsInput>
    create: XOR<UserCreateWithoutCreatedTelegramsInput, UserUncheckedCreateWithoutCreatedTelegramsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatedTelegramsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatedTelegramsInput, UserUncheckedUpdateWithoutCreatedTelegramsInput>
  }

  export type UserUpdateWithoutCreatedTelegramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatedTelegramsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type TelegramSubscriptionUpsertWithWhereUniqueWithoutTelegramInput = {
    where: TelegramSubscriptionWhereUniqueInput
    update: XOR<TelegramSubscriptionUpdateWithoutTelegramInput, TelegramSubscriptionUncheckedUpdateWithoutTelegramInput>
    create: XOR<TelegramSubscriptionCreateWithoutTelegramInput, TelegramSubscriptionUncheckedCreateWithoutTelegramInput>
  }

  export type TelegramSubscriptionUpdateWithWhereUniqueWithoutTelegramInput = {
    where: TelegramSubscriptionWhereUniqueInput
    data: XOR<TelegramSubscriptionUpdateWithoutTelegramInput, TelegramSubscriptionUncheckedUpdateWithoutTelegramInput>
  }

  export type TelegramSubscriptionUpdateManyWithWhereWithoutTelegramInput = {
    where: TelegramSubscriptionScalarWhereInput
    data: XOR<TelegramSubscriptionUpdateManyMutationInput, TelegramSubscriptionUncheckedUpdateManyWithoutTelegramInput>
  }

  export type TelegramCreateWithoutTelegramSubscriptionsInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy: UserCreateNestedOneWithoutCreatedTelegramsInput
  }

  export type TelegramUncheckedCreateWithoutTelegramSubscriptionsInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelegramCreateOrConnectWithoutTelegramSubscriptionsInput = {
    where: TelegramWhereUniqueInput
    create: XOR<TelegramCreateWithoutTelegramSubscriptionsInput, TelegramUncheckedCreateWithoutTelegramSubscriptionsInput>
  }

  export type UserCreateWithoutBoughtTelegramSubscriptionsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBoughtTelegramSubscriptionsInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBoughtTelegramSubscriptionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBoughtTelegramSubscriptionsInput, UserUncheckedCreateWithoutBoughtTelegramSubscriptionsInput>
  }

  export type TelegramUpsertWithoutTelegramSubscriptionsInput = {
    update: XOR<TelegramUpdateWithoutTelegramSubscriptionsInput, TelegramUncheckedUpdateWithoutTelegramSubscriptionsInput>
    create: XOR<TelegramCreateWithoutTelegramSubscriptionsInput, TelegramUncheckedCreateWithoutTelegramSubscriptionsInput>
    where?: TelegramWhereInput
  }

  export type TelegramUpdateToOneWithWhereWithoutTelegramSubscriptionsInput = {
    where?: TelegramWhereInput
    data: XOR<TelegramUpdateWithoutTelegramSubscriptionsInput, TelegramUncheckedUpdateWithoutTelegramSubscriptionsInput>
  }

  export type TelegramUpdateWithoutTelegramSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutCreatedTelegramsNestedInput
  }

  export type TelegramUncheckedUpdateWithoutTelegramSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutBoughtTelegramSubscriptionsInput = {
    update: XOR<UserUpdateWithoutBoughtTelegramSubscriptionsInput, UserUncheckedUpdateWithoutBoughtTelegramSubscriptionsInput>
    create: XOR<UserCreateWithoutBoughtTelegramSubscriptionsInput, UserUncheckedCreateWithoutBoughtTelegramSubscriptionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBoughtTelegramSubscriptionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBoughtTelegramSubscriptionsInput, UserUncheckedUpdateWithoutBoughtTelegramSubscriptionsInput>
  }

  export type UserUpdateWithoutBoughtTelegramSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBoughtTelegramSubscriptionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutPremiumContentInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumAccess?: PremiumContentAccessCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPremiumContentInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumAccess?: PremiumContentAccessUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPremiumContentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPremiumContentInput, UserUncheckedCreateWithoutPremiumContentInput>
  }

  export type PremiumContentAccessCreateWithoutPremiumContentInput = {
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
    user: UserCreateNestedOneWithoutPremiumAccessInput
  }

  export type PremiumContentAccessUncheckedCreateWithoutPremiumContentInput = {
    userId: string
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
  }

  export type PremiumContentAccessCreateOrConnectWithoutPremiumContentInput = {
    where: PremiumContentAccessWhereUniqueInput
    create: XOR<PremiumContentAccessCreateWithoutPremiumContentInput, PremiumContentAccessUncheckedCreateWithoutPremiumContentInput>
  }

  export type PremiumContentAccessCreateManyPremiumContentInputEnvelope = {
    data: PremiumContentAccessCreateManyPremiumContentInput | PremiumContentAccessCreateManyPremiumContentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPremiumContentInput = {
    update: XOR<UserUpdateWithoutPremiumContentInput, UserUncheckedUpdateWithoutPremiumContentInput>
    create: XOR<UserCreateWithoutPremiumContentInput, UserUncheckedCreateWithoutPremiumContentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPremiumContentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPremiumContentInput, UserUncheckedUpdateWithoutPremiumContentInput>
  }

  export type UserUpdateWithoutPremiumContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumAccess?: PremiumContentAccessUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPremiumContentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumAccess?: PremiumContentAccessUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PremiumContentAccessUpsertWithWhereUniqueWithoutPremiumContentInput = {
    where: PremiumContentAccessWhereUniqueInput
    update: XOR<PremiumContentAccessUpdateWithoutPremiumContentInput, PremiumContentAccessUncheckedUpdateWithoutPremiumContentInput>
    create: XOR<PremiumContentAccessCreateWithoutPremiumContentInput, PremiumContentAccessUncheckedCreateWithoutPremiumContentInput>
  }

  export type PremiumContentAccessUpdateWithWhereUniqueWithoutPremiumContentInput = {
    where: PremiumContentAccessWhereUniqueInput
    data: XOR<PremiumContentAccessUpdateWithoutPremiumContentInput, PremiumContentAccessUncheckedUpdateWithoutPremiumContentInput>
  }

  export type PremiumContentAccessUpdateManyWithWhereWithoutPremiumContentInput = {
    where: PremiumContentAccessScalarWhereInput
    data: XOR<PremiumContentAccessUpdateManyMutationInput, PremiumContentAccessUncheckedUpdateManyWithoutPremiumContentInput>
  }

  export type UserCreateWithoutPremiumAccessInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramCreateNestedManyWithoutCreatedByInput
    wallet?: WalletCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsCreateNestedManyWithoutUserInput
    upiIds?: UPICreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutPremiumAccessInput = {
    id?: string
    email: string
    phone: string
    name: string
    socialMedia: string
    goals?: UserCreategoalsInput | string[]
    heardAboutUs: string
    role: $Enums.Role
    verified?: boolean
    creatorComission?: number | null
    boughtWebinarTickets?: WebinarTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedCreateNestedManyWithoutBoughtByInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedCreateNestedManyWithoutBoughtByInput
    createdWebinars?: WebinarUncheckedCreateNestedManyWithoutCreatedByInput
    createdCourses?: CourseUncheckedCreateNestedManyWithoutCreatorInput
    createdPayingUps?: PayingUpUncheckedCreateNestedManyWithoutCreatedByInput
    createdTelegrams?: TelegramUncheckedCreateNestedManyWithoutCreatedByInput
    wallet?: WalletUncheckedCreateNestedOneWithoutUserInput
    CoursePurchasers?: CoursePurchasersUncheckedCreateNestedManyWithoutPurchaserInput
    businessInfo?: BusinessInfoUncheckedCreateNestedOneWithoutUserInput
    kycRecords?: kycRecordsUncheckedCreateNestedOneWithoutUserInput
    BankAccounts?: BankDetailsUncheckedCreateNestedManyWithoutUserInput
    upiIds?: UPIUncheckedCreateNestedManyWithoutUserInput
    premiumContent?: PremiumContentUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutPremiumAccessInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPremiumAccessInput, UserUncheckedCreateWithoutPremiumAccessInput>
  }

  export type PremiumContentCreateWithoutAccessInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    createdBy: UserCreateNestedOneWithoutPremiumContentInput
  }

  export type PremiumContentUncheckedCreateWithoutAccessInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdById: string
    createdAt?: Date | string
  }

  export type PremiumContentCreateOrConnectWithoutAccessInput = {
    where: PremiumContentWhereUniqueInput
    create: XOR<PremiumContentCreateWithoutAccessInput, PremiumContentUncheckedCreateWithoutAccessInput>
  }

  export type UserUpsertWithoutPremiumAccessInput = {
    update: XOR<UserUpdateWithoutPremiumAccessInput, UserUncheckedUpdateWithoutPremiumAccessInput>
    create: XOR<UserCreateWithoutPremiumAccessInput, UserUncheckedCreateWithoutPremiumAccessInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPremiumAccessInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPremiumAccessInput, UserUncheckedUpdateWithoutPremiumAccessInput>
  }

  export type UserUpdateWithoutPremiumAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUpdateManyWithoutUserNestedInput
    upiIds?: UPIUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPremiumAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    socialMedia?: StringFieldUpdateOperationsInput | string
    goals?: UserUpdategoalsInput | string[]
    heardAboutUs?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    verified?: BoolFieldUpdateOperationsInput | boolean
    creatorComission?: NullableIntFieldUpdateOperationsInput | number | null
    boughtWebinarTickets?: WebinarTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtPayingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutBoughtByNestedInput
    boughtTelegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByNestedInput
    createdWebinars?: WebinarUncheckedUpdateManyWithoutCreatedByNestedInput
    createdCourses?: CourseUncheckedUpdateManyWithoutCreatorNestedInput
    createdPayingUps?: PayingUpUncheckedUpdateManyWithoutCreatedByNestedInput
    createdTelegrams?: TelegramUncheckedUpdateManyWithoutCreatedByNestedInput
    wallet?: WalletUncheckedUpdateOneWithoutUserNestedInput
    CoursePurchasers?: CoursePurchasersUncheckedUpdateManyWithoutPurchaserNestedInput
    businessInfo?: BusinessInfoUncheckedUpdateOneWithoutUserNestedInput
    kycRecords?: kycRecordsUncheckedUpdateOneWithoutUserNestedInput
    BankAccounts?: BankDetailsUncheckedUpdateManyWithoutUserNestedInput
    upiIds?: UPIUncheckedUpdateManyWithoutUserNestedInput
    premiumContent?: PremiumContentUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type PremiumContentUpsertWithoutAccessInput = {
    update: XOR<PremiumContentUpdateWithoutAccessInput, PremiumContentUncheckedUpdateWithoutAccessInput>
    create: XOR<PremiumContentCreateWithoutAccessInput, PremiumContentUncheckedCreateWithoutAccessInput>
    where?: PremiumContentWhereInput
  }

  export type PremiumContentUpdateToOneWithWhereWithoutAccessInput = {
    where?: PremiumContentWhereInput
    data: XOR<PremiumContentUpdateWithoutAccessInput, PremiumContentUncheckedUpdateWithoutAccessInput>
  }

  export type PremiumContentUpdateWithoutAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneRequiredWithoutPremiumContentNestedInput
  }

  export type PremiumContentUncheckedUpdateWithoutAccessInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdById?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebinarTicketCreateManyBoughtByInput = {
    id?: string
    webinarId: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type PayingUpTicketCreateManyBoughtByInput = {
    id?: string
    payingUpId: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type TelegramSubscriptionCreateManyBoughtByInput = {
    id?: string
    validDays: number
    telegramId: string
    chatId?: string | null
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
  }

  export type WebinarCreateManyCreatedByInput = {
    id?: string
    title: string
    category: string
    coverImage: string
    occurrence: string
    startDate: Date | string
    paymentEnabled?: boolean
    endDate: Date | string
    isOnline: boolean
    venue?: string | null
    link: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid: boolean
    quantity: number
    amount?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CourseCreateManyCreatorInput = {
    id?: string
    title: string
    price: number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity: string
    aboutThisCourse: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    courseBenefits: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    gallery: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    language: JsonNullValueInput | InputJsonValue
    startDate: Date | string
    endDate?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PayingUpCreateManyCreatedByInput = {
    id?: string
    title: string
    description: string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails: JsonNullValueInput | InputJsonValue
    category: JsonNullValueInput | InputJsonValue
    testimonials: JsonNullValueInput | InputJsonValue
    faqs: JsonNullValueInput | InputJsonValue
    refundPolicies: JsonNullValueInput | InputJsonValue
    tacs: JsonNullValueInput | InputJsonValue
    coverImage: JsonNullValueInput | InputJsonValue
    files: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TelegramCreateManyCreatedByInput = {
    id?: string
    coverImage: string
    channelLink: string
    title: string
    description: string
    genre: string
    discount: JsonNullValueInput | InputJsonValue
    subscription: JsonNullValueInput | InputJsonValue
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CoursePurchasersCreateManyPurchaserInput = {
    id?: string
    courseId: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
  }

  export type BankDetailsCreateManyUserInput = {
    id?: string
    accountHolderName: string
    accountNumber: string
    ifscCode: string
    bankDocument?: string | null
    upiId?: BankDetailsCreateupiIdInput | string[]
    razorpayContactID?: string | null
    razorpayFundAccountID?: string | null
    primary?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UPICreateManyUserInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    bankDetailsId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PremiumContentCreateManyCreatedByInput = {
    id?: string
    title: string
    category: string
    unlockPrice: number
    content: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: Date | string
  }

  export type PremiumContentAccessCreateManyUserInput = {
    contentId: string
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
  }

  export type WebinarTicketUpdateWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    webinar?: WebinarUpdateOneRequiredWithoutTicketsNestedInput
  }

  export type WebinarTicketUncheckedUpdateWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    webinarId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebinarTicketUncheckedUpdateManyWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    webinarId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayingUpTicketUpdateWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    payingUp?: PayingUpUpdateOneRequiredWithoutPayingUpTicketsNestedInput
  }

  export type PayingUpTicketUncheckedUpdateWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    payingUpId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayingUpTicketUncheckedUpdateManyWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    payingUpId?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TelegramSubscriptionUpdateWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegram?: TelegramUpdateOneRequiredWithoutTelegramSubscriptionsNestedInput
  }

  export type TelegramSubscriptionUncheckedUpdateWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelegramSubscriptionUncheckedUpdateManyWithoutBoughtByInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    telegramId?: StringFieldUpdateOperationsInput | string
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebinarUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: WebinarTicketUpdateManyWithoutWebinarNestedInput
  }

  export type WebinarUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tickets?: WebinarTicketUncheckedUpdateManyWithoutWebinarNestedInput
  }

  export type WebinarUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    occurrence?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    paymentEnabled?: BoolFieldUpdateOperationsInput | boolean
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isOnline?: BoolFieldUpdateOperationsInput | boolean
    venue?: NullableStringFieldUpdateOperationsInput | string | null
    link?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    isPaid?: BoolFieldUpdateOperationsInput | boolean
    quantity?: IntFieldUpdateOperationsInput | number
    amount?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CourseUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUpdateManyWithoutCourseNestedInput
    lessons?: LessonsUpdateManyWithoutCourseNestedInput
    purchasedBy?: CoursePurchasersUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: CourseProductUncheckedUpdateManyWithoutCourseNestedInput
    lessons?: LessonsUncheckedUpdateManyWithoutCourseNestedInput
    purchasedBy?: CoursePurchasersUncheckedUpdateManyWithoutCourseNestedInput
  }

  export type CourseUncheckedUpdateManyWithoutCreatorInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    discount?: NullableJsonNullValueInput | InputJsonValue
    validity?: StringFieldUpdateOperationsInput | string
    aboutThisCourse?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    courseBenefits?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    gallery?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    language?: JsonNullValueInput | InputJsonValue
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayingUpUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payingUpTickets?: PayingUpTicketUpdateManyWithoutPayingUpNestedInput
  }

  export type PayingUpUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    payingUpTickets?: PayingUpTicketUncheckedUpdateManyWithoutPayingUpNestedInput
  }

  export type PayingUpUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    discount?: NullableJsonNullValueInput | InputJsonValue
    paymentDetails?: JsonNullValueInput | InputJsonValue
    category?: JsonNullValueInput | InputJsonValue
    testimonials?: JsonNullValueInput | InputJsonValue
    faqs?: JsonNullValueInput | InputJsonValue
    refundPolicies?: JsonNullValueInput | InputJsonValue
    tacs?: JsonNullValueInput | InputJsonValue
    coverImage?: JsonNullValueInput | InputJsonValue
    files?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelegramUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramSubscriptions?: TelegramSubscriptionUpdateManyWithoutTelegramNestedInput
  }

  export type TelegramUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    telegramSubscriptions?: TelegramSubscriptionUncheckedUpdateManyWithoutTelegramNestedInput
  }

  export type TelegramUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    coverImage?: StringFieldUpdateOperationsInput | string
    channelLink?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    genre?: StringFieldUpdateOperationsInput | string
    discount?: JsonNullValueInput | InputJsonValue
    subscription?: JsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursePurchasersUpdateWithoutPurchaserInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    course?: CourseUpdateOneRequiredWithoutPurchasedByNestedInput
  }

  export type CoursePurchasersUncheckedUpdateWithoutPurchaserInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursePurchasersUncheckedUpdateManyWithoutPurchaserInput = {
    id?: StringFieldUpdateOperationsInput | string
    courseId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BankDetailsUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    upiIds?: UPIUpdateManyWithoutBankDetailsNestedInput
    withdrawls?: WithdrawalUpdateManyWithoutBankDetailsNestedInput
  }

  export type BankDetailsUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    upiIds?: UPIUncheckedUpdateManyWithoutBankDetailsNestedInput
    withdrawls?: WithdrawalUncheckedUpdateManyWithoutBankDetailsNestedInput
  }

  export type BankDetailsUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    accountHolderName?: StringFieldUpdateOperationsInput | string
    accountNumber?: StringFieldUpdateOperationsInput | string
    ifscCode?: StringFieldUpdateOperationsInput | string
    bankDocument?: NullableStringFieldUpdateOperationsInput | string | null
    upiId?: BankDetailsUpdateupiIdInput | string[]
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    primary?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UPIUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankDetails?: BankDetailsUpdateOneRequiredWithoutUpiIdsNestedInput
    withdrawls?: WithdrawalUpdateManyWithoutUpiNestedInput
  }

  export type UPIUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    withdrawls?: WithdrawalUncheckedUpdateManyWithoutUpiNestedInput
  }

  export type UPIUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumContentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    access?: PremiumContentAccessUpdateManyWithoutPremiumContentNestedInput
  }

  export type PremiumContentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    access?: PremiumContentAccessUncheckedUpdateManyWithoutPremiumContentNestedInput
  }

  export type PremiumContentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    unlockPrice?: FloatFieldUpdateOperationsInput | number
    content?: JsonNullValueInput | InputJsonValue
    discount?: NullableJsonNullValueInput | InputJsonValue
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumContentAccessUpdateWithoutUserInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    premiumContent?: PremiumContentUpdateOneRequiredWithoutAccessNestedInput
  }

  export type PremiumContentAccessUncheckedUpdateWithoutUserInput = {
    contentId?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiumContentAccessUncheckedUpdateManyWithoutUserInput = {
    contentId?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type TransactionCreateManyWalletInput = {
    id?: string
    amount: number
    email: string
    phoneNumber: string
    product: string
    modeOfPayment: string
    status: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WithdrawalCreateManyWalletInput = {
    id?: string
    amount: number
    modeOfWithdrawal: string
    bankDetailsId: string
    upiId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type TransactionUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    modeOfPayment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    modeOfPayment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    modeOfPayment?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    bankDetails?: BankDetailsUpdateOneRequiredWithoutWithdrawlsNestedInput
    upi?: UPIUpdateOneRequiredWithoutWithdrawlsNestedInput
  }

  export type WithdrawalUncheckedUpdateWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalUncheckedUpdateManyWithoutWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UPICreateManyBankDetailsInput = {
    id?: string
    upiId: string
    razorpayFundAccountID?: string | null
    razorpayContactID?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type WithdrawalCreateManyBankDetailsInput = {
    id?: string
    walletId: string
    amount: number
    modeOfWithdrawal: string
    upiId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type UPIUpdateWithoutBankDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutUpiIdsNestedInput
    withdrawls?: WithdrawalUpdateManyWithoutUpiNestedInput
  }

  export type UPIUncheckedUpdateWithoutBankDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    withdrawls?: WithdrawalUncheckedUpdateManyWithoutUpiNestedInput
  }

  export type UPIUncheckedUpdateManyWithoutBankDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    razorpayFundAccountID?: NullableStringFieldUpdateOperationsInput | string | null
    razorpayContactID?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalUpdateWithoutBankDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: WalletUpdateOneRequiredWithoutWithdrawalsNestedInput
    upi?: UPIUpdateOneRequiredWithoutWithdrawlsNestedInput
  }

  export type WithdrawalUncheckedUpdateWithoutBankDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalUncheckedUpdateManyWithoutBankDetailsInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    upiId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalCreateManyUpiInput = {
    id?: string
    walletId: string
    amount: number
    modeOfWithdrawal: string
    bankDetailsId: string
    status: string
    razorpayPayoutID?: string | null
    createdAt?: Date | string
  }

  export type WithdrawalUpdateWithoutUpiInput = {
    id?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    wallet?: WalletUpdateOneRequiredWithoutWithdrawalsNestedInput
    bankDetails?: BankDetailsUpdateOneRequiredWithoutWithdrawlsNestedInput
  }

  export type WithdrawalUncheckedUpdateWithoutUpiInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WithdrawalUncheckedUpdateManyWithoutUpiInput = {
    id?: StringFieldUpdateOperationsInput | string
    walletId?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    modeOfWithdrawal?: StringFieldUpdateOperationsInput | string
    bankDetailsId?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    razorpayPayoutID?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type WebinarTicketCreateManyWebinarInput = {
    id?: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type WebinarTicketUpdateWithoutWebinarInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    boughtBy?: UserUpdateOneRequiredWithoutBoughtWebinarTicketsNestedInput
  }

  export type WebinarTicketUncheckedUpdateWithoutWebinarInput = {
    id?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type WebinarTicketUncheckedUpdateManyWithoutWebinarInput = {
    id?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CourseProductCreateManyCourseInput = {
    id?: string
    title: string
    isActive?: boolean
    productMetaData: JsonNullValueInput | InputJsonValue
  }

  export type LessonsCreateManyCourseInput = {
    id?: string
    isActive: boolean
    lessonData: JsonNullValueInput | InputJsonValue
  }

  export type CoursePurchasersCreateManyCourseInput = {
    id?: string
    purchaserId: string
    paymentId: string
    orderId: string
    createdAt?: Date | string
  }

  export type CourseProductUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    productMetaData?: JsonNullValueInput | InputJsonValue
  }

  export type CourseProductUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    productMetaData?: JsonNullValueInput | InputJsonValue
  }

  export type CourseProductUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    productMetaData?: JsonNullValueInput | InputJsonValue
  }

  export type LessonsUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lessonData?: JsonNullValueInput | InputJsonValue
  }

  export type LessonsUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lessonData?: JsonNullValueInput | InputJsonValue
  }

  export type LessonsUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    lessonData?: JsonNullValueInput | InputJsonValue
  }

  export type CoursePurchasersUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    purchaser?: UserUpdateOneRequiredWithoutCoursePurchasersNestedInput
  }

  export type CoursePurchasersUncheckedUpdateWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaserId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CoursePurchasersUncheckedUpdateManyWithoutCourseInput = {
    id?: StringFieldUpdateOperationsInput | string
    purchaserId?: StringFieldUpdateOperationsInput | string
    paymentId?: StringFieldUpdateOperationsInput | string
    orderId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PayingUpTicketCreateManyPayingUpInput = {
    id?: string
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
  }

  export type PayingUpTicketUpdateWithoutPayingUpInput = {
    id?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    boughtBy?: UserUpdateOneRequiredWithoutBoughtPayingUpTicketsNestedInput
  }

  export type PayingUpTicketUncheckedUpdateWithoutPayingUpInput = {
    id?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PayingUpTicketUncheckedUpdateManyWithoutPayingUpInput = {
    id?: StringFieldUpdateOperationsInput | string
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type TelegramSubscriptionCreateManyTelegramInput = {
    id?: string
    validDays: number
    chatId?: string | null
    boughtById: string
    paymentId?: string | null
    orderId?: string | null
    createdAt?: Date | string
  }

  export type TelegramSubscriptionUpdateWithoutTelegramInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    boughtBy?: UserUpdateOneRequiredWithoutBoughtTelegramSubscriptionsNestedInput
  }

  export type TelegramSubscriptionUncheckedUpdateWithoutTelegramInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelegramSubscriptionUncheckedUpdateManyWithoutTelegramInput = {
    id?: StringFieldUpdateOperationsInput | string
    validDays?: IntFieldUpdateOperationsInput | number
    chatId?: NullableStringFieldUpdateOperationsInput | string | null
    boughtById?: StringFieldUpdateOperationsInput | string
    paymentId?: NullableStringFieldUpdateOperationsInput | string | null
    orderId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PremiumContentAccessCreateManyPremiumContentInput = {
    userId: string
    purchasedAt?: Date | string
    expiryDate?: Date | string | null
  }

  export type PremiumContentAccessUpdateWithoutPremiumContentInput = {
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    user?: UserUpdateOneRequiredWithoutPremiumAccessNestedInput
  }

  export type PremiumContentAccessUncheckedUpdateWithoutPremiumContentInput = {
    userId?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type PremiumContentAccessUncheckedUpdateManyWithoutPremiumContentInput = {
    userId?: StringFieldUpdateOperationsInput | string
    purchasedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}