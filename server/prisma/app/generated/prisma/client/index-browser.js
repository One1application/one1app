
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phone: 'phone',
  name: 'name',
  socialMedia: 'socialMedia',
  goals: 'goals',
  heardAboutUs: 'heardAboutUs',
  role: 'role',
  verified: 'verified',
  creatorComission: 'creatorComission'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  phoneNumber: 'phoneNumber',
  phoneCodeHash: 'phoneCodeHash',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  balance: 'balance',
  totalEarnings: 'totalEarnings',
  totalWithdrawals: 'totalWithdrawals',
  isKycVerified: 'isKycVerified',
  mpin: 'mpin',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.BankDetailsScalarFieldEnum = {
  id: 'id',
  accountHolderName: 'accountHolderName',
  accountNumber: 'accountNumber',
  ifscCode: 'ifscCode',
  bankDocument: 'bankDocument',
  upiId: 'upiId',
  razorpayContactID: 'razorpayContactID',
  razorpayFundAccountID: 'razorpayFundAccountID',
  userId: 'userId',
  primary: 'primary',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UPIScalarFieldEnum = {
  id: 'id',
  upiId: 'upiId',
  razorpayFundAccountID: 'razorpayFundAccountID',
  razorpayContactID: 'razorpayContactID',
  bankDetailsId: 'bankDetailsId',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.KycRecordsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  socialMedia: 'socialMedia',
  aadhaarNumber: 'aadhaarNumber',
  aadhaarFront: 'aadhaarFront',
  aadhaarBack: 'aadhaarBack',
  panCard: 'panCard',
  selfie: 'selfie',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status'
};

exports.Prisma.BusinessInfoScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  businessStructure: 'businessStructure',
  gstNumber: 'gstNumber',
  sebiNumber: 'sebiNumber',
  sebiCertificate: 'sebiCertificate',
  userId: 'userId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  amount: 'amount',
  email: 'email',
  phoneNumber: 'phoneNumber',
  product: 'product',
  modeOfPayment: 'modeOfPayment',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WithdrawalScalarFieldEnum = {
  id: 'id',
  walletId: 'walletId',
  amount: 'amount',
  modeOfWithdrawal: 'modeOfWithdrawal',
  bankDetailsId: 'bankDetailsId',
  upiId: 'upiId',
  status: 'status',
  razorpayPayoutID: 'razorpayPayoutID',
  createdAt: 'createdAt'
};

exports.Prisma.WebinarScalarFieldEnum = {
  id: 'id',
  title: 'title',
  category: 'category',
  coverImage: 'coverImage',
  occurrence: 'occurrence',
  startDate: 'startDate',
  paymentEnabled: 'paymentEnabled',
  endDate: 'endDate',
  isOnline: 'isOnline',
  venue: 'venue',
  link: 'link',
  discount: 'discount',
  isPaid: 'isPaid',
  quantity: 'quantity',
  amount: 'amount',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.WebinarTicketScalarFieldEnum = {
  id: 'id',
  webinarId: 'webinarId',
  boughtById: 'boughtById',
  paymentId: 'paymentId',
  orderId: 'orderId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  price: 'price',
  discount: 'discount',
  validity: 'validity',
  aboutThisCourse: 'aboutThisCourse',
  testimonials: 'testimonials',
  courseBenefits: 'courseBenefits',
  faqs: 'faqs',
  gallery: 'gallery',
  coverImage: 'coverImage',
  language: 'language',
  startDate: 'startDate',
  endDate: 'endDate',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CourseProductScalarFieldEnum = {
  id: 'id',
  title: 'title',
  isActive: 'isActive',
  productMetaData: 'productMetaData',
  courseId: 'courseId'
};

exports.Prisma.LessonsScalarFieldEnum = {
  id: 'id',
  isActive: 'isActive',
  lessonData: 'lessonData',
  courseId: 'courseId'
};

exports.Prisma.CoursePurchasersScalarFieldEnum = {
  id: 'id',
  courseId: 'courseId',
  purchaserId: 'purchaserId',
  paymentId: 'paymentId',
  orderId: 'orderId',
  createdAt: 'createdAt'
};

exports.Prisma.PayingUpScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  discount: 'discount',
  paymentDetails: 'paymentDetails',
  category: 'category',
  testimonials: 'testimonials',
  faqs: 'faqs',
  refundPolicies: 'refundPolicies',
  tacs: 'tacs',
  coverImage: 'coverImage',
  files: 'files',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PayingUpTicketScalarFieldEnum = {
  id: 'id',
  payingUpId: 'payingUpId',
  boughtById: 'boughtById',
  paymentId: 'paymentId',
  orderId: 'orderId'
};

exports.Prisma.TelegramScalarFieldEnum = {
  id: 'id',
  coverImage: 'coverImage',
  channelLink: 'channelLink',
  title: 'title',
  description: 'description',
  genre: 'genre',
  discount: 'discount',
  subscription: 'subscription',
  createdById: 'createdById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TelegramSubscriptionScalarFieldEnum = {
  id: 'id',
  validDays: 'validDays',
  telegramId: 'telegramId',
  chatId: 'chatId',
  boughtById: 'boughtById',
  paymentId: 'paymentId',
  orderId: 'orderId',
  createdAt: 'createdAt'
};

exports.Prisma.PremiumContentScalarFieldEnum = {
  id: 'id',
  title: 'title',
  category: 'category',
  unlockPrice: 'unlockPrice',
  content: 'content',
  discount: 'discount',
  createdById: 'createdById',
  createdAt: 'createdAt'
};

exports.Prisma.PremiumContentAccessScalarFieldEnum = {
  userId: 'userId',
  contentId: 'contentId',
  purchasedAt: 'purchasedAt',
  expiryDate: 'expiryDate'
};

exports.Prisma.NewsletterScalarFieldEnum = {
  id: 'id',
  email: 'email',
  isSubscribed: 'isSubscribed',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.Role = exports.$Enums.Role = {
  User: 'User',
  Creator: 'Creator',
  Admin: 'Admin',
  SuperAdmin: 'SuperAdmin'
};

exports.Prisma.ModelName = {
  User: 'User',
  Otp: 'Otp',
  Wallet: 'Wallet',
  BankDetails: 'BankDetails',
  UPI: 'UPI',
  kycRecords: 'kycRecords',
  BusinessInfo: 'BusinessInfo',
  Transaction: 'Transaction',
  Withdrawal: 'Withdrawal',
  Webinar: 'Webinar',
  WebinarTicket: 'WebinarTicket',
  Course: 'Course',
  CourseProduct: 'CourseProduct',
  Lessons: 'Lessons',
  CoursePurchasers: 'CoursePurchasers',
  PayingUp: 'PayingUp',
  PayingUpTicket: 'PayingUpTicket',
  Telegram: 'Telegram',
  TelegramSubscription: 'TelegramSubscription',
  PremiumContent: 'PremiumContent',
  PremiumContentAccess: 'PremiumContentAccess',
  Newsletter: 'Newsletter'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
